{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'args' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 696,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 694,
        "length": 4,
        "offset": 57,
        "surroundingCode": "            old_run = self.run\n\n            def new_run(*args, **kwargs):\n                try:\n                    old_run(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "05b4bc9ded528a519e43f7786aead3e70fd55191e4a885a915791e14f23fbd10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'kwargs' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 696,
      "offset": 34,
      "length": 6,
      "code": {
        "startLine": 694,
        "length": 6,
        "offset": 65,
        "surroundingCode": "            old_run = self.run\n\n            def new_run(*args, **kwargs):\n                try:\n                    old_run(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "68ff202ce1efac888f87cf706baf2fe8913ce4917ed16f6aac3af1ff4e2080f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'logger' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 462,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 460,
        "length": 6,
        "offset": 34,
        "surroundingCode": "    Examples\n    --------\n    >>> logger = get_logger(name='retroarcher')\n    >>> listener(logger=logger)\n    \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "4748541c9b1a0a139935e2d7176a5fb52db99d0ebd100d14f46ed1da1e83c5a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'logger' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 507,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 505,
        "length": 6,
        "offset": 34,
        "surroundingCode": "    Examples\n    --------\n    >>> logger = get_logger(name='retroarcher')\n    >>> init_multiprocessing(logger=logger)\n    \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "b6369b038983e7c1cc9247ce740d9a25fd10d5dd34479e78a822f61674553849"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'cmd' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "scripts/_run_tests.py",
      "language": "Python",
      "line": 78,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 76,
        "length": 3,
        "offset": 36,
        "surroundingCode": "\n    try:\n        cmd_checkcall(cmd=cmd)\n    except NameError:\n        pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "a10d7d52775b0a7a5377f7c078d6b1e6ca89f106867c7024805779a23cb55ba3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'cmd' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "scripts/_run_tests.py",
      "language": "Python",
      "line": 135,
      "offset": 31,
      "length": 3,
      "code": {
        "startLine": 133,
        "length": 3,
        "offset": 40,
        "surroundingCode": "\n    try:\n        subprocess.Popen(args=cmd)\n    except NameError:\n        pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "903b72b57bf9c958cb45577df28802ce40e9c1ae5f00924d570c35652ce74e91"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/definitions.py",
      "language": "Python",
      "line": 13,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 11,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass Names:\n    \"\"\"\n    Class representing common names."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "fbee4344314df7b2a46f6407be6bc4cc6dded4416c7968194b1718a7c3030001"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/definitions.py",
      "language": "Python",
      "line": 30,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 28,
        "length": 8,
        "offset": 8,
        "surroundingCode": "\n\nclass Platform:\n    \"\"\"\n    Class representing the machine platform."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "782e438006ebc08c74f8075ae84a48b851988b27f4584f0dc117ef5f5dc246c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/definitions.py",
      "language": "Python",
      "line": 74,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 72,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass Modes:\n    \"\"\"\n    Class representing runtime variables."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "6750ef74c62a31caf38e07570218cd0c7debb07c64b4aff095a2e3d1087fea1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/definitions.py",
      "language": "Python",
      "line": 104,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 102,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass Files:\n    \"\"\"\n    Class representing common Files."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "69cca77ace17f86c1d558a748c1f109ca6b85bcbaea4288223bb1a4000b1c90b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Class has no `__init__` method",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Class has no __init__ method",
  "detailsInfo": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/definitions.py",
      "language": "Python",
      "line": 121,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 119,
        "length": 5,
        "offset": 8,
        "surroundingCode": "\n\nclass Paths:\n    \"\"\"\n    Class representing common Paths."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyClassHasNoInitInspection"
  },
  "hash": "75520660f557a962a21c5821492c57c4e6b0b573fe091bc1104df91c9892954f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/helpers.py",
      "language": "Python",
      "line": 316,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 314,
        "length": 19,
        "offset": 6,
        "surroundingCode": "\n\ndef timestamp_to_YMDHMS(ts: int, separate: bool = False) -> str:\n    \"\"\"\n    Convert timestamp to YMDHMS format."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8494fe3bf42325138226a8ccb2fe9edec1ab0f8cc2672e61ac0d7b3ef2011468"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 104,
      "offset": 24,
      "length": 10,
      "code": {
        "startLine": 102,
        "length": 10,
        "offset": 32,
        "surroundingCode": "    \"\"\"\n\n    def __init__(self, threadName):\n        super(NoThreadFilter, self).__init__()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a0c7599cf7ce729c86aac330fd7b61a7a1365d41689f170604a8332b493339e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Attempt to call a non-callable object",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "'Icon' is not callable",
  "detailsInfo": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/tray_icon.py",
      "language": "Python",
      "line": 67,
      "offset": 17,
      "length": 24,
      "code": {
        "startLine": 65,
        "length": 24,
        "offset": 64,
        "surroundingCode": "    if not icon_supported:\n        return False\n    tray_icon = Icon(name='retroarcher')\n    tray_icon.title = definitions.Names.name\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyCallingNonCallableInspection"
  },
  "hash": "a1e709139142e021d820d4a34d2f5de220c5853d3ede4e8fa5ec211fcc4373ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'filter' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 157,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 155,
        "length": 6,
        "offset": 57,
        "surroundingCode": "        super(BlacklistFilter, self).__init__()\n\n    def filter(self, record) -> bool:\n        \"\"\"\n        Filter the given record."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection"
  },
  "hash": "0361eb2e1763ea6ae267a8edb4f74db820e871278a7459fb15d3d21b58aa1ab4"
}]}