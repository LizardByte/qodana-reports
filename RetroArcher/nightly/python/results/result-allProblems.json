{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows built-in name 'copyright'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "docs/source/conf.py",
      "language": "Python",
      "line": 32,
      "offset": 1,
      "length": 9,
      "code": {
        "startLine": 30,
        "length": 9,
        "offset": 114,
        "surroundingCode": "# -- Project information -----------------------------------------------------\nproject = definitions.Names().name\ncopyright = f'{datetime.now ().year}, {project}'\nauthor = 'ReenigneArcher'\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection"
  },
  "hash": "2b855c4bbbc4acd0c7a57ab2e26989f2d55d43cc848b9757a0ce3d505ecb671f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "The default argument is mutable",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Default argument value is mutable",
  "detailsInfo": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/config.py",
      "language": "Python",
      "line": 56,
      "offset": 57,
      "length": 12,
      "code": {
        "startLine": 54,
        "length": 12,
        "offset": 58,
        "surroundingCode": "\n\ndef create_config(config_file: str, config_spec: list = _CONFIG_SPEC) -> ConfigObj:\n    \"\"\"\n    Create a config file and `ConfigObj` using a config spec."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyDefaultArgumentInspection"
  },
  "hash": "e70e8dd461400927b3355e5080b960846332fdbfdfd8a870c5ff83383587ef0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'args' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 696,
      "offset": 26,
      "length": 4,
      "code": {
        "startLine": 694,
        "length": 4,
        "offset": 57,
        "surroundingCode": "            old_run = self.run\n\n            def new_run(*args, **kwargs):\n                try:\n                    old_run(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "05b4bc9ded528a519e43f7786aead3e70fd55191e4a885a915791e14f23fbd10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'kwargs' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 696,
      "offset": 34,
      "length": 6,
      "code": {
        "startLine": 694,
        "length": 6,
        "offset": 65,
        "surroundingCode": "            old_run = self.run\n\n            def new_run(*args, **kwargs):\n                try:\n                    old_run(*args, **kwargs)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "68ff202ce1efac888f87cf706baf2fe8913ce4917ed16f6aac3af1ff4e2080f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'logger' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 462,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 460,
        "length": 6,
        "offset": 34,
        "surroundingCode": "    Examples\n    --------\n    >>> logger = get_logger(name='retroarcher')\n    >>> listener(logger=logger)\n    \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "4748541c9b1a0a139935e2d7176a5fb52db99d0ebd100d14f46ed1da1e83c5a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'logger' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 507,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 505,
        "length": 6,
        "offset": 34,
        "surroundingCode": "    Examples\n    --------\n    >>> logger = get_logger(name='retroarcher')\n    >>> init_multiprocessing(logger=logger)\n    \"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection"
  },
  "hash": "b6369b038983e7c1cc9247ce740d9a25fd10d5dd34479e78a822f61674553849"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'cmd' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "scripts/_run_tests.py",
      "language": "Python",
      "line": 78,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 76,
        "length": 3,
        "offset": 36,
        "surroundingCode": "\n    try:\n        cmd_checkcall(cmd=cmd)\n    except NameError:\n        pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "a10d7d52775b0a7a5377f7c078d6b1e6ca89f106867c7024805779a23cb55ba3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'cmd' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "scripts/_run_tests.py",
      "language": "Python",
      "line": 135,
      "offset": 31,
      "length": 3,
      "code": {
        "startLine": 133,
        "length": 3,
        "offset": 40,
        "surroundingCode": "\n    try:\n        subprocess.Popen(args=cmd)\n    except NameError:\n        pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection"
  },
  "hash": "903b72b57bf9c958cb45577df28802ce40e9c1ae5f00924d570c35652ce74e91"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/helpers.py",
      "language": "Python",
      "line": 316,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 314,
        "length": 19,
        "offset": 6,
        "surroundingCode": "\n\ndef timestamp_to_YMDHMS(ts: int, separate: bool = False) -> str:\n    \"\"\"\n    Convert timestamp to YMDHMS format."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "8494fe3bf42325138226a8ccb2fe9edec1ab0f8cc2672e61ac0d7b3ef2011468"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Argument name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 104,
      "offset": 24,
      "length": 10,
      "code": {
        "startLine": 102,
        "length": 10,
        "offset": 32,
        "surroundingCode": "    \"\"\"\n\n    def __init__(self, threadName):\n        super(NoThreadFilter, self).__init__()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection"
  },
  "hash": "a0c7599cf7ce729c86aac330fd7b61a7a1365d41689f170604a8332b493339e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "docs/source/conf.py",
      "language": "Python",
      "line": 27,
      "offset": 8,
      "length": 9,
      "code": {
        "startLine": 25,
        "length": 9,
        "offset": 123,
        "surroundingCode": "    from pyra import definitions  # put this in a try/except to prevent flake8 warning\n    from pyra import version\nexcept Exception:\n    sys.exit(1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "395414d05f7a0f952cd66c89a9dbd61db50761d3cbc4a73ad28d81d88d6ded94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/hardware.py",
      "language": "Python",
      "line": 68,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 66,
        "length": 9,
        "offset": 57,
        "surroundingCode": "    try:\n        from pyadl import ADLManager\n    except Exception:  # cannot import `ADLError` from `pyadl.pyadl`\n        amd_gpus = range(0)  # no amd gpus found\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "c55f8d0732e775a82bf3f5f2b2baa244f19abceb247dab4b09b8647f84d2f53b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/helpers.py",
      "language": "Python",
      "line": 202,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 200,
        "length": 9,
        "offset": 103,
        "surroundingCode": "        try:\n            ip_address = socket.getaddrinfo(host=host, port=None)[0][4][0]\n        except Exception:\n            log.error(f\"IP Checker :: Bad IP or hostname provided: {host}.\")\n        else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "6e5408448535f31ae805cf33200a4848a933554151885951ce73622250bb12bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/config.py",
      "language": "Python",
      "line": 167,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 165,
        "length": 9,
        "offset": 43,
        "surroundingCode": "    try:\n        config.write()\n    except Exception:\n        return False\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "7cf0d08d8aa1d98f8903dc602751996232c9201229208642205ccdd89e2e4cbe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/tray_icon.py",
      "language": "Python",
      "line": 32,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 30,
        "length": 9,
        "offset": 40,
        "surroundingCode": "    try:\n        import Xlib\n    except Exception:\n        pass\ntry:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d667a6dd34e7622269079ec7fe55bdc5756fca8270005f08e4246eaa82a43595"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 193,
      "offset": 28,
      "length": 9,
      "code": {
        "startLine": 191,
        "length": 9,
        "offset": 139,
        "surroundingCode": "                            arg_str = arg_str.replace(item, 16 * '*')\n                            arg = arg_str\n                    except Exception:\n                        pass\n                    args.append(arg)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "efcc7551b652c2e32aa1421258996af4dea993294367aea875f04613ceabe1f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 197,
      "offset": 20,
      "length": 9,
      "code": {
        "startLine": 195,
        "length": 9,
        "offset": 98,
        "surroundingCode": "                    args.append(arg)\n                record.args = tuple(args)\n            except Exception:\n                pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "0fa9af62088106810824f83cbeda6920a124ad7a5a9f51f49384ee7a36bd8da6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 268,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 266,
        "length": 9,
        "offset": 128,
        "surroundingCode": "                            arg_str = self.replace(arg_str, match)\n                        arg = arg_str\n                except Exception:\n                    pass\n                args.append(arg)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "feb00a08f2884bc8ac5932ed701cc91c3a4411d705a643eee21676fbfe31e865"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 272,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 270,
        "length": 9,
        "offset": 86,
        "surroundingCode": "                args.append(arg)\n            record.args = tuple(args)\n        except Exception:\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "d0822be5caad19c2330a6837811dd6818acddedbf5f4b72bd337b8a2eb04ba15"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 677,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 675,
        "length": 9,
        "offset": 150,
        "surroundingCode": "            message = \"\".join(traceback.format_exception(*exception_info))\n            logger.error(\"Uncaught exception: %s\", message)\n        except Exception:\n            pass\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "998111646a039a215f651042199625455f6825c616ff30870935f88005cb4747"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unclear exception clauses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Too broad exception clause",
  "detailsInfo": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 701,
      "offset": 24,
      "length": 9,
      "code": {
        "startLine": 699,
        "length": 9,
        "offset": 105,
        "surroundingCode": "                except (KeyboardInterrupt, SystemExit):\n                    raise\n                except Exception:\n                    excepthook(*sys.exc_info())\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyBroadExceptionInspection"
  },
  "hash": "ff1fc19d699fc5d771d2e1523c2876b27be97c1d7ccd78c901c2829596e4a659"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Package containing module 'pyamdgpuinfo' is not listed in the project requirements",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/hardware.py",
      "language": "Python",
      "line": 63,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 61,
        "length": 12,
        "offset": 17,
        "surroundingCode": "\ntry:\n    import pyamdgpuinfo  # linux only\nexcept ModuleNotFoundError:\n    pyamdgpu = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "72f54356173bea8d38b4489052c471a8d90dcae96dda63f1c1ed093bb4d36522"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Package containing module 'Xlib' is not listed in the project requirements",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "pyra/tray_icon.py",
      "language": "Python",
      "line": 31,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 29,
        "length": 4,
        "offset": 72,
        "surroundingCode": "if definitions.Platform.os_platform == 'linux':\n    try:\n        import Xlib\n    except Exception:\n        pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "5b32eb2d2f0c11c13dc991e49a36995166cd5383d8efce2d142d1b1a1bf1fd58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unsatisfied package requirements",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Package containing module 'PyInstaller' is not listed in the project requirements",
  "detailsInfo": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click.",
  "sources": [
    {
      "type": "file",
      "path": "scripts/build.py",
      "language": "Python",
      "line": 11,
      "offset": 8,
      "length": 11,
      "code": {
        "startLine": 9,
        "length": 11,
        "offset": 22,
        "surroundingCode": "\n# lib imports\nimport PyInstaller.__main__\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPackageRequirementsInspection"
  },
  "hash": "39eac71d3185de8b6d28431ddf56a2b7045b1febc804951bb13b6b028896b523"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type 'SimpleQueue | Queue', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "pyra/logger.py",
      "language": "Python",
      "line": 519,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 517,
        "length": 5,
        "offset": 72,
        "surroundingCode": "        logger.removeHandler(handler)\n\n    queue_handler = QueueHandler(queue)\n    queue_handler.setLevel(logging.DEBUG)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection"
  },
  "hash": "e867a18b7f4cb696acf0a23f01f662c67d222eda6d5e377549169509553c6102"
}]}