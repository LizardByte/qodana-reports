{
  "profile": "Default",
  "groups": [
    {
      "name": "EditorConfig",
      "inspections": [
        {
          "shortName": "EditorConfigCharClassRedundancy",
          "displayName": "Unnecessary character class",
          "enabled": false,
          "description": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`â†’`a`."
        },
        {
          "shortName": "EditorConfigRootDeclarationUniqueness",
          "displayName": "Extra top-level declaration",
          "enabled": false,
          "description": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
        },
        {
          "shortName": "EditorConfigNumerousWildcards",
          "displayName": "Too many wildcards",
          "enabled": false,
          "description": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
        },
        {
          "shortName": "EditorConfigPartialOverride",
          "displayName": "Overlapping sections",
          "enabled": false,
          "description": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
        },
        {
          "shortName": "EditorConfigEmptySection",
          "displayName": "Empty section",
          "enabled": false,
          "description": "Reports sections that do not contain any EditorConfig properties."
        },
        {
          "shortName": "EditorConfigShadowingOption",
          "displayName": "Overriding property",
          "enabled": false,
          "description": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
        },
        {
          "shortName": "EditorConfigListAcceptability",
          "displayName": "Unexpected value list",
          "enabled": false,
          "description": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
        },
        {
          "shortName": "EditorConfigKeyCorrectness",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
        },
        {
          "shortName": "EditorConfigPatternEnumerationRedundancy",
          "displayName": "Unnecessary braces",
          "enabled": false,
          "description": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
        },
        {
          "shortName": "EditorConfigEncoding",
          "displayName": "File encoding doesn't match EditorConfig charset",
          "enabled": false,
          "description": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
        },
        {
          "shortName": "EditorConfigRootDeclarationCorrectness",
          "displayName": "Unexpected top-level declaration",
          "enabled": false,
          "description": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
        },
        {
          "shortName": "EditorConfigReferenceCorrectness",
          "displayName": "Invalid reference",
          "enabled": false,
          "description": "Reports identifiers that are either unknown or have a wrong type."
        },
        {
          "shortName": "EditorConfigPairAcceptability",
          "displayName": "Unexpected key-value pair",
          "enabled": false,
          "description": "Reports key-value pairs that are not allowed in the current context."
        },
        {
          "shortName": "EditorConfigPatternRedundancy",
          "displayName": "Duplicate or redundant pattern",
          "enabled": false,
          "description": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
        },
        {
          "shortName": "EditorConfigNoMatchingFiles",
          "displayName": "No matching files",
          "enabled": false,
          "description": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
        },
        {
          "shortName": "EditorConfigDeprecatedDescriptor",
          "displayName": "Deprecated property",
          "enabled": false,
          "description": "Reports EditorConfig properties that are no longer supported."
        },
        {
          "shortName": "EditorConfigWildcardRedundancy",
          "displayName": "Redundant wildcard",
          "enabled": false,
          "description": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
        },
        {
          "shortName": "EditorConfigHeaderUniqueness",
          "displayName": "EditorConfig section is not unique",
          "enabled": false,
          "description": "Reports sections that define the same file pattern as other sections."
        },
        {
          "shortName": "EditorConfigShadowedOption",
          "displayName": "Overridden property",
          "enabled": false,
          "description": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
        },
        {
          "shortName": "EditorConfigEmptyHeader",
          "displayName": "Empty header",
          "enabled": false,
          "description": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
        },
        {
          "shortName": "EditorConfigValueCorrectness",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
        },
        {
          "shortName": "EditorConfigVerifyByCore",
          "displayName": "Invalid .editorconfig file",
          "enabled": false,
          "description": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied."
        },
        {
          "shortName": "EditorConfigValueUniqueness",
          "displayName": "Non-unique list value",
          "enabled": false,
          "description": "Reports duplicates in lists of values."
        },
        {
          "shortName": "EditorConfigMissingRequiredDeclaration",
          "displayName": "Required declarations are missing",
          "enabled": false,
          "description": "Reports properties that miss the required declarations. Refer to the documentation for more information."
        },
        {
          "shortName": "EditorConfigCharClassLetterRedundancy",
          "displayName": "Duplicate character class letter",
          "enabled": false,
          "description": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
        },
        {
          "shortName": "EditorConfigSpaceInHeader",
          "displayName": "Space in file pattern",
          "enabled": false,
          "description": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
        },
        {
          "shortName": "EditorConfigOptionRedundancy",
          "displayName": "Redundant property",
          "enabled": false,
          "description": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
        },
        {
          "shortName": "EditorConfigUnusedDeclaration",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "Reports unused declarations. Such declarations can be removed."
        },
        {
          "shortName": "EditorConfigUnexpectedComma",
          "displayName": "Unexpected comma",
          "enabled": false,
          "description": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
        }
      ]
    },
    {
      "name": "Python",
      "inspections": [
        {
          "shortName": "PyPandasSeriesToListInspection",
          "displayName": "Method Series.to_list() is recommended",
          "enabled": true,
          "description": "Reports redundant `list` in `list(Series.values)` statement for pandas and polars libraries.\nSuch `Series` values extraction can be replaced with the `to_list()` function call.\n\n**Example:**\n\n```\nlist(df['column'].values)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndf['column'].to_list()\n```"
        },
        {
          "shortName": "PySetFunctionToLiteralInspection",
          "displayName": "Function call can be replaced with set literal",
          "enabled": true,
          "description": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n\n    def do_mult(a, b):\n        c = a * b\n        return set([c, a, b])\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def do_mult(a, b):\n        c = a * b\n        return {c, a, b}\n"
        },
        {
          "shortName": "PyInitNewSignatureInspection",
          "displayName": "Incompatible signatures of __new__ and __init__",
          "enabled": true,
          "description": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n\n    class MyClass(object):\n        def __new__(cls, arg1):\n            return super().__new__(cls)\n\n        def __init__(self):\n            pass\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
        },
        {
          "shortName": "PyMissingConstructorInspection",
          "displayName": "Missed call to '__init__' of the super class",
          "enabled": true,
          "description": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n\n    class Fruit:\n        def __init__(self):\n            pass\n\n\n    class Pear(Fruit):\n        def __init__(self):\n            pass\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    class Fruit:\n        def __init__(self):\n            pass\n\n\n    class Pear(Fruit):\n        def __init__(self):\n            super().__init__()\n"
        },
        {
          "shortName": "PySimplifyBooleanCheckInspection",
          "displayName": "Redundant boolean variable check",
          "enabled": true,
          "description": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n\n    def func(s):\n        if s.isdigit() == True:\n            return int(s)\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n\n    def func(s):\n        if s.isdigit():\n            return int(s)\n"
        },
        {
          "shortName": "PyCallingNonCallableInspection",
          "displayName": "Attempt to call a non-callable object",
          "enabled": true,
          "description": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n**Example:**\n\n\n    class Record:\n        @property\n        def as_json(self):\n\n    json = Record().as_json()\n"
        },
        {
          "shortName": "PyUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "enabled": true,
          "description": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n\n    if True:\n        print('Yes')\n    else:\n        print('No')\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
        },
        {
          "shortName": "PyChainedComparisonsInspection",
          "displayName": "Too complex chained comparisons",
          "enabled": true,
          "description": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
        },
        {
          "shortName": "PyCompatibilityInspection",
          "displayName": "Code is incompatible with specific Python versions",
          "enabled": false,
          "description": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
        },
        {
          "shortName": "PyGlobalUndefinedInspection",
          "displayName": "Global variable is not defined at the module level",
          "enabled": true,
          "description": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n\n    def foo():\n        global bar\n        print(bar)\n\n    foo()\n\nAs a fix, you can move the global variable declaration:\n\n\n    global bar\n\n\n    def foo():\n        print(bar)\n"
        },
        {
          "shortName": "PyProtocolInspection",
          "displayName": "Invalid protocol definitions and usages",
          "enabled": true,
          "description": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n\n    from typing import Protocol\n\n\n    class MyProtocol(Protocol):\n        def method(self, p: int) -> str:\n            pass\n\n\n    class MyClass(MyProtocol):\n        def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n            pass\n\n\n    class MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n        pass\n\n"
        },
        {
          "shortName": "PyTypeHintsInspection",
          "displayName": "Invalid type hints definitions and usages",
          "enabled": true,
          "description": "Reports invalid usages of type hints.\n\n**Example:**\n\n\n    from typing import TypeVar\n\n    T0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\n    def b(p: int) -> int:  # Type specified both in a comment and annotation\n        # type: (int) -> int\n        pass\n\n\n    def c(p1, p2): # Type signature has too many arguments\n        # type: (int) -> int\n        pass\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
        },
        {
          "shortName": "PyMethodMayBeStaticInspection",
          "displayName": "Method is not declared static",
          "enabled": true,
          "description": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n\n    class MyClass(object):\n        def my_method(self, x):\n            print(x)\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n\n    def my_method(x):\n        print(x)\n\n\n    class MyClass(object):\n        pass\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n\n    class MyClass(object):\n        @staticmethod\n        def my_method(x):\n            print(x)\n"
        },
        {
          "shortName": "CythonUsageBeforeDeclarationInspection",
          "displayName": "Cython variable is used before its declaration",
          "enabled": true,
          "description": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n\n    cdef int c_x\n\n    print(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\n    cdef int c_y = 0\n"
        },
        {
          "shortName": "PyDictCreationInspection",
          "displayName": "Dictionary creation can be rewritten by dictionary literal",
          "enabled": true,
          "description": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n\n    dic = {}\n    dic['var'] = 1\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    dic = {'var': 1}\n"
        },
        {
          "shortName": "PyStringFormatInspection",
          "displayName": "Errors in string formatting operations",
          "enabled": true,
          "description": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n\n    \"Hello {1}\".format(\"people\")\n\n**Example 2:**\n\n\n    def bar():\n        return 1\n\n\n    \"%s %s\" % bar()\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
        },
        {
          "shortName": "PyExceptionInheritInspection",
          "displayName": "Exceptions do not inherit from standard 'Exception' class",
          "enabled": true,
          "description": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n\n    class A:\n        pass\n\n\n    def me_exception():\n        raise A()\n\nThe proposed quick-fix changes the code to:\n\n\n    class A(Exception):\n        pass\n\n\n    def me_exception():\n        raise A()\n"
        },
        {
          "shortName": "PyAssignmentToLoopOrWithParameterInspection",
          "displayName": "Assignments to 'for' loop or 'with' statement parameter",
          "enabled": true,
          "description": "Reports the cases when you rewrite a loop variable with an inner loop.\n\n**Example:**\n\n\n        for i in range(5):\n          for i in range(20, 25):\n              print(\"Inner\", i)\n          print(\"Outer\", i)\n      \nIt also warns you if a variable declared in the `with` statement is redeclared inside the statement body:\n\n\n        with open(\"file\") as f:\n          f.read()\n          with open(\"file\") as f:\n      \n"
        },
        {
          "shortName": "PySuperArgumentsInspection",
          "displayName": "Wrong arguments to call super",
          "enabled": true,
          "description": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n\n    class Figure:\n        def color(self):\n            pass\n\n\n    class Rectangle(Figure):\n        def color(self):\n            pass\n\n\n    class Square(Figure):\n        def color(self):\n            return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
        },
        {
          "shortName": "PyNonAsciiCharInspection",
          "displayName": "File contains non-ASCII character",
          "enabled": true,
          "description": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n\n    class A(object):\n    # â„–5\n        def __init__(self):\n            pass\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n\n    # coding=utf-8\n    class A(object)\n    # â„–5\n        def __init__(self):\n            pass\n"
        },
        {
          "shortName": "PyOldStyleClassesInspection",
          "displayName": "Old-style class contains new-style class features",
          "enabled": true,
          "description": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
        },
        {
          "shortName": "PyAbstractClassInspection",
          "displayName": "Class must implement all abstract methods",
          "enabled": true,
          "description": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n\n    from abc import abstractmethod, ABC\n\n\n    class Figure(ABC):\n\n        @abstractmethod\n        def do_figure(self):\n            pass\n\n\n    class Triangle(Figure):\n        def do_triangle(self):\n            pass\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n\n    from abc import abstractmethod, ABC\n\n\n    class Figure(ABC):\n\n        @abstractmethod\n        def do_figure(self):\n            pass\n\n\n    class Triangle(Figure):\n        def do_figure(self):\n            pass\n\n        def do_triangle(self):\n            pass\n"
        },
        {
          "shortName": "PyBroadExceptionInspection",
          "displayName": "Unclear exception clauses",
          "enabled": true,
          "description": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
        },
        {
          "shortName": "PyTypeCheckerInspection",
          "displayName": "Incorrect type",
          "enabled": true,
          "description": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n\n    def foo() -> int:\n        return \"abc\" # Expected int, got str\n\n\n    a: str\n    a = foo() # Expected str, got int\n\nWith the quick-fix, you can modify the problematic types:\n\n\n    def foo() -> str:\n        return \"abc\"\n\n\n    a: str\n    a = foo()\n"
        },
        {
          "shortName": "PyByteLiteralInspection",
          "displayName": "A byte literal contains a non-ASCII character",
          "enabled": true,
          "description": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n\n\n      s = b'â„–5'\n"
        },
        {
          "shortName": "PyAugmentAssignmentInspection",
          "displayName": "Assignment can be replaced with augmented assignment",
          "enabled": false,
          "description": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n\n    a = 23\n    b = 3\n    a = a + b\n\nAfter the quick-fix is applied, the code changes to:\n\n\n    a = 23\n    b = 3\n    a += b\n"
        },
        {
          "shortName": "PyDeprecationInspection",
          "displayName": "Deprecated function, class, or module",
          "enabled": true,
          "description": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n\n    class Foo:\n        @property\n        def bar(self):\n            import warnings\n            warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n            return 5\n\n\n    foo = Foo()\n    print(foo.bar)\n"
        },
        {
          "shortName": "PyUnnecessaryBackslashInspection",
          "displayName": "Unnecessary backslash",
          "enabled": true,
          "description": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n\n    a = ('first', \\\n         'second', 'third')\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
        },
        {
          "shortName": "PyShadowingNamesInspection",
          "displayName": "Shadowing names from outer scopes",
          "enabled": true,
          "description": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n\n    def outer(p):\n        def inner(p):\n            pass\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
        },
        {
          "shortName": "PyFinalInspection",
          "displayName": "Invalid usages of final classes, methods, and variables",
          "enabled": true,
          "description": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n\n    from typing import final\n\n\n    @final\n    class A:\n        def a_method(self):\n            pass\n\n\n    class B(A):\n        def a_method(self):\n            pass\n"
        },
        {
          "shortName": "PySingleQuotedDocstringInspection",
          "displayName": "Single quoted docstring",
          "enabled": true,
          "description": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n\n    def calc(self, balance=0):\n        'param: balance'\n        self.balance = balance\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def calc(self, balance=0):\n        \"\"\"param: balance\"\"\"\n        self.balance = balance\n"
        },
        {
          "shortName": "PyUnusedLocalInspection",
          "displayName": "Unused local symbols",
          "enabled": true,
          "description": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
        },
        {
          "shortName": "PyReturnFromInitInspection",
          "displayName": "__init__ method that returns a value",
          "enabled": true,
          "description": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n\n    class Sum:\n        def __init__(self, a, b):\n            self.a = a\n            self.b = b\n            self.sum = a + b\n            return self.sum\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
        },
        {
          "shortName": "PyMissingOrEmptyDocstringInspection",
          "displayName": "Missing or empty docstring",
          "enabled": false,
          "description": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n\n    def demo(a):\n        c = a ** 2\n\n**Example of an empty docstring**\n\n\n    def demo(a):\n        \"\"\"\n        \"\"\"\n        c = a ** 2\n\nWhen the quick-fix is applied, the code fragments change to:\n\n\n    def demo(a):\n        \"\"\"\n\n        :param a:\n        \"\"\"\n        c = a ** 2\n\nYou need to provide some details about the parameter in the generated template."
        },
        {
          "shortName": "PyPep8NamingInspection",
          "displayName": "PEP 8 naming convention violation",
          "enabled": true,
          "description": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n\n    class mammalia(object):\n        extremities = 4\n\n        def feeds(self):\n            print(\"milk\")\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n\n    class Mammalia(object):\n        extremities = 4\n\n        def feeds(self):\n            print(\"milk\")\n"
        },
        {
          "shortName": "PyDictDuplicateKeysInspection",
          "displayName": "Dictionary contains duplicate keys",
          "enabled": true,
          "description": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n\n    dic = {\"a\": [1, 2], \"a\": [3, 4]}\n"
        },
        {
          "shortName": "PyNoneFunctionAssignmentInspection",
          "displayName": "Assigning function calls that don't return anything",
          "enabled": true,
          "description": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n**Example:**\n\n\n    def just_print():\n        print(\"Hello!\")\n\n\n    action = just_print()\n\nAs a quick-fix, the IDE offers to remove the assignment."
        },
        {
          "shortName": "PyStatementEffectInspection",
          "displayName": "Statement has no effect",
          "enabled": true,
          "description": "Reports statements that have no effect.\n\n**Example:**\n\n\n    class Car:\n        def __init__(self, speed=0):\n            self.speed = speed\n            self.time # has no effect\n\n    2 + 3 # has no effect\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
        },
        {
          "shortName": "PyMandatoryEncodingInspection",
          "displayName": "No encoding specified for file",
          "enabled": false,
          "description": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n\n    class Book(object):\n        def __init__(self):\n            pass\n\nWhen the quick-fix is applied, the missing comment is added:\n\n\n    # coding=utf-8\n    class Book(object):\n        def __init__(self):\n            pass\n"
        },
        {
          "shortName": "PyInconsistentIndentationInspection",
          "displayName": "Inconsistent indentation",
          "enabled": true,
          "description": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
        },
        {
          "shortName": "PyAttributeOutsideInitInspection",
          "displayName": "An instance attribute is defined outside `__init__`",
          "enabled": true,
          "description": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n\n        class Book:\n        def __init__(self):\n            self.author = 'Mark Twain'\n\n        def release(self):\n            self.year = '1889'\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n\n        class Book:\n        def __init__(self):\n            self.year = '1889'\n            self.author = 'Mark Twain'\n\n        def release(self):\n            pass\n"
        },
        {
          "shortName": "PyTypedDictInspection",
          "displayName": "Invalid TypedDict definition and usages",
          "enabled": true,
          "description": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n\n    from typing import TypedDict\n\n\n    class Movie(TypedDict):\n        name: str\n        year: int\n        rate: int = 10  # Right-hand side values are not supported\n\n        def method(self): # Invalid statement in TypedDict\n            pass\n\n\n    m = Movie(name=\"name\", year=1000, rate=9)\n    print(m[\"director\"])  # There is no the 'director' key in 'Movie'\n    del m[\"name\"]  # The 'name' key cannot be deleted\n    m[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n"
        },
        {
          "shortName": "PyPep8Inspection",
          "displayName": "PEP 8 coding style violation",
          "enabled": true,
          "description": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
        },
        {
          "shortName": "PyMissingTypeHintsInspection",
          "displayName": "Missing type hinting for function definition",
          "enabled": false,
          "description": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
        },
        {
          "shortName": "PyTupleItemAssignmentInspection",
          "displayName": "Tuple item assignment is prohibited",
          "enabled": true,
          "description": "Reports assignments to a tuple item.\n\n**Example:**\n\n\n    t = ('red', 'blue', 'green', 'white')\n    t[3] = 'black'\n\nA quick-fix offers to replace the tuple with a list."
        },
        {
          "shortName": "PyDunderSlotsInspection",
          "displayName": "Invalid usages of classes with  '__slots__' definitions",
          "enabled": true,
          "description": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n\n    class Foo:\n        __slots__ = ['foo', 'bar']\n\n\n    foo = Foo()\n    foo.baz = 'spam'\n"
        },
        {
          "shortName": "PyDefaultArgumentInspection",
          "displayName": "The default argument is mutable",
          "enabled": true,
          "description": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n\n    def func(s, cache={}):\n        cache[s] = None\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def func(s, cache=None):\n        if cache is None:\n            cache = {}\n        cache[s] = None\n"
        },
        {
          "shortName": "PyShadowingBuiltinsInspection",
          "displayName": "Shadowing built-in names",
          "enabled": true,
          "description": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n\n    def len(a, b, c):\n        d = a + b + c\n        return d\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
        },
        {
          "shortName": "PyMethodOverridingInspection",
          "displayName": "Method signature does not match signature of overridden method",
          "enabled": true,
          "description": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n\n    class Book:\n        def add_title(self):\n            pass\n\n\n    class Novel(Book):\n        def add_title(self, text):\n            pass\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
        },
        {
          "shortName": "PyTestParametrizedInspection",
          "displayName": "Incorrect arguments in @pytest.mark.parametrize",
          "enabled": true,
          "description": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
        },
        {
          "shortName": "PyDecoratorInspection",
          "displayName": "Class-specific decorator is used outside the class",
          "enabled": true,
          "description": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n\n    class State(object):\n\n        @classmethod\n        def my_state(cls, name):\n            cls.name = name\n\n\n    @classmethod\n    def change_state(self):\n        pass\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n\n    class State(object):\n\n        @classmethod\n        def my_state(cls, name):\n            cls.name = name\n\n\n    def change_state(self):\n        pass\n"
        },
        {
          "shortName": "PyAsyncCallInspection",
          "displayName": "Missing `await` syntax in coroutine calls",
          "enabled": true,
          "description": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n\n    async def bar():\n        pass\n\n\n    async def foo():\n        bar()\n\nAfter the quick-fix is applied, the code changes to:\n\n\n    async def bar():\n        pass\n\n\n    async def foo():\n        await bar()\n"
        },
        {
          "shortName": "PyComparisonWithNoneInspection",
          "displayName": "Using equality operators to compare with None",
          "enabled": true,
          "description": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n\n    a = 2\n\n\n    if a == None:\n        print(\"Success\")\n\nOnce the quick-fix is applied, the code changes to:\n\n\n    a = 2\n\n\n    if a is None:\n        print(\"Success\")\n"
        },
        {
          "shortName": "CommandLineInspection",
          "displayName": "Incorrect CLI syntax",
          "enabled": true,
          "description": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
        },
        {
          "shortName": "PyMethodParametersInspection",
          "displayName": "Improper first parameter",
          "enabled": true,
          "description": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n\n    class Movie:\n\n       def show():\n           pass\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    class Movie:\n\n       def show(self):\n           pass\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n\n    class Movie:\n        @classmethod\n        def show(abc):\n            pass\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
        },
        {
          "shortName": "PyDocstringTypesInspection",
          "displayName": "Type in docstring does not match inferred type",
          "enabled": true,
          "description": "Reports types in docstring that do not match dynamically inferred types."
        },
        {
          "shortName": "PyMethodFirstArgAssignmentInspection",
          "displayName": "First argument of the method is reassigned",
          "enabled": true,
          "description": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n\n    class Account:\n        def calc(self, balance):\n            if balance == 0:\n                self = balance\n            return self\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
        },
        {
          "shortName": "PyTupleAssignmentBalanceInspection",
          "displayName": "Tuple assignment balance is incorrect",
          "enabled": true,
          "description": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n\n    t = ('red', 'blue', 'green', 'white')\n    (c1, c2, c3) = t\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
        },
        {
          "shortName": "PyClassHasNoInitInspection",
          "displayName": "Class has no `__init__` method",
          "enabled": true,
          "description": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n\n    class Book():\n        pass\n\nThe quick-fix adds the `__init__` method:\n\n\n    class Book():\n        def __init__(self):\n            pass\n"
        },
        {
          "shortName": "PyArgumentEqualDefaultInspection",
          "displayName": "The function argument is equal to the default parameter value",
          "enabled": false,
          "description": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n\n    def my_function(a: int = 2):\n        print(a)\n\n\n    my_function(2)\n"
        },
        {
          "shortName": "PyClassVarInspection",
          "displayName": "Invalid usage of ClassVar variables",
          "enabled": true,
          "description": "Reports invalid usages of [ClassVar](https://docs.python.org/3/library/typing.html#typing.ClassVar) annotations.\n\n**Example:**\n\n\n    from typing import ClassVar\n\n\n    class Cat:\n        color: ClassVar[str] = \"white\"\n        weight: int\n\n        def __init__(self, weight: int):\n            self.weight = weight\n\n\n    Cat.color = \"black\"  # OK\n    my_cat = Cat(5)\n    my_cat.color = \"gray\"  # Error, setting class variable on instance\n"
        },
        {
          "shortName": "PyFromFutureImportInspection",
          "displayName": "Improper position of from __future__ import",
          "enabled": true,
          "description": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n\n    a = 1\n    from __future__ import print_function\n    print()\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    from __future__ import print_function\n\n    a = 1\n    print()\n"
        },
        {
          "shortName": "PyUnresolvedReferencesInspection",
          "displayName": "Unresolved references",
          "enabled": false,
          "description": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n\n    def print_string(s):\n      print(s.abc())\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
        },
        {
          "shortName": "PyPackageRequirementsInspection",
          "displayName": "Unsatisfied package requirements",
          "enabled": true,
          "description": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
        },
        {
          "shortName": "PyRedundantParenthesesInspection",
          "displayName": "Redundant parentheses",
          "enabled": true,
          "description": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
        },
        {
          "shortName": "PyTrailingSemicolonInspection",
          "displayName": "Prohibited trailing semicolon in a statement",
          "enabled": true,
          "description": "Reports trailing semicolons in statements.\n\n**Example:**\n\n\n    def my_func(a):\n        c = a ** 2;\n        return c\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n\n    def my_func(a):\n        c = a ** 2\n        return c\n"
        },
        {
          "shortName": "PyArgumentListInspection",
          "displayName": "Incorrect call arguments",
          "enabled": true,
          "description": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n\n    class Foo:\n        def __call__(self, p1: int, *, p2: str = \"%\"):\n            return p2 * p1\n\n\n    bar = Foo()\n    bar.__call__() # unfilled parameter\n    bar(5, \"#\") # unexpected argument\n\nThe correct code fragment looks at follows:\n\n\n    class Foo:\n        def __call__(self, p1: int, *, p2: str = \"%\"):\n            return p2 * p1\n\n\n    bar = Foo()\n    bar.__call__(5)\n    bar(5, p2=\"#\")\n"
        },
        {
          "shortName": "PyInterpreterInspection",
          "displayName": "An invalid interpreter",
          "enabled": false,
          "description": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
        },
        {
          "shortName": "PyPropertyAccessInspection",
          "displayName": "Inappropriate access to properties",
          "enabled": true,
          "description": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n\n    class MyClass:\n        @property\n        def read_only(self): return None\n\n        def __write_only_setter(self, value): pass\n\n        write_only = property(None, __write_only_setter)\n\n\n    a = MyClass()\n    a.read_only = 10 # property cannot be set\n    del a.read_only # property cannot be deleted\n    print(a.write_only) # property cannot be read\n"
        },
        {
          "shortName": "PyStubPackagesAdvertiser",
          "displayName": "Stub packages advertiser",
          "enabled": true,
          "description": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
        },
        {
          "shortName": "PyRelativeImportInspection",
          "displayName": "Suspicious relative imports",
          "enabled": true,
          "description": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
        },
        {
          "shortName": "PyRedeclarationInspection",
          "displayName": "Redeclared names without usages",
          "enabled": true,
          "description": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n\n    def x(): pass\n\n\n    x = 2\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
        },
        {
          "shortName": "PyProtectedMemberInspection",
          "displayName": "Accessing a protected member of a class or a module",
          "enabled": true,
          "description": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n**Example:**\n\n\n    class Foo:\n        def _protected_method(self):\n            pass\n\n\n    class Bar(Foo):\n        def public_method(self):\n            self._protected_method()\n\n\n    foo = Foo()\n    foo._protected_method() # Access to a protected method\n"
        },
        {
          "shortName": "PyStubPackagesCompatibilityInspection",
          "displayName": "Incompatible stub packages",
          "enabled": true,
          "description": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
        },
        {
          "shortName": "PyUnboundLocalVariableInspection",
          "displayName": "Unbound local variables",
          "enabled": true,
          "description": "Reports local variables referenced before assignment.\n\n**Example:**\n\n\n    x = 0\n    if x > 10:\n        b = 3\n    print(b)\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n\n    x = 0\n    if x > 10:\n        b = 3\n        print(b)\n"
        },
        {
          "shortName": "PyNamedTupleInspection",
          "displayName": "Invalid definition of 'typing.NamedTuple'",
          "enabled": true,
          "description": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n\n    import typing\n\n\n    class FullName(typing.NamedTuple):\n        first: str\n        last: str = \"\"\n        middle: str\n\nAs a fix, place the field with the default value after the fields without default values:\n\n\n    import typing\n\n\n    class FullName(typing.NamedTuple):\n        first: str\n        middle: str\n        last: str = \"\"\n"
        },
        {
          "shortName": "PyNestedDecoratorsInspection",
          "displayName": "Problematic nesting of decorators",
          "enabled": true,
          "description": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n\n    def innocent(f):\n        return f\n\n\n    class A:\n        @innocent  # Decorator will not receive a callable it may expect\n        @classmethod\n        def f2(cls):\n            pass\n\n        @innocent  # Decorator will not receive a callable it may expect\n        @staticmethod\n        def f1():\n            pass\n\nAs a quick-fix, the IDE offers to remove the decorator."
        },
        {
          "shortName": "PyOverloadsInspection",
          "displayName": "Overloads in regular Python files",
          "enabled": true,
          "description": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n\n    from typing import overload\n\n\n    @overload\n    def foo(p1, p2): # Overload signature is not compatible with the implementation\n        pass\n\n\n    @overload\n    def foo(p1): # Overload signature is not compatible with the implementation\n        pass\n\n\n    def foo(p1, p2, p3):\n        print(p1, p2, p3)\n"
        },
        {
          "shortName": "PyExceptClausesOrderInspection",
          "displayName": "Wrong order of 'except' clauses",
          "enabled": true,
          "description": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n\n    try:\n        call()\n    except ValueError:\n        pass\n    except UnicodeError:\n        pass\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n\n    try:\n        call()\n    except UnicodeError:\n        pass\n    except ValueError:\n        pass\n"
        },
        {
          "shortName": "PyDataclassInspection",
          "displayName": "Invalid definition and usage of Data Classes",
          "enabled": true,
          "description": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n\n    import dataclasses\n\n\n    @dataclasses.dataclass\n    class FullName:\n        first: str\n        middle: str = \"\"\n        last: str\n"
        },
        {
          "shortName": "PyprojectInspection",
          "displayName": "Depencencies in pyproject.toml",
          "enabled": true,
          "description": "Reports unsatisfied dependencies, declared \\[project.dependencies\\] table in pyproject.toml.\n\n\nShows a quick-fix to install missing packages."
        },
        {
          "shortName": "PyClassicStyleClassInspection",
          "displayName": "Classic style class usage",
          "enabled": false,
          "description": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n\n    class A:\n        pass\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n\n    class A(object):\n        def __init__(self):\n            pass\n"
        },
        {
          "shortName": "PyPropertyDefinitionInspection",
          "displayName": "Incorrect property definition",
          "enabled": true,
          "description": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n\n    class C:\n        @property\n        def abc(self):  # Getter should return or yield something\n            pass\n\n        @abc.setter\n        def foo(self, value):  # Names of function and decorator don't match\n            pass\n\n        @abc.setter\n        def abc(self, v1, v2):  # Setter signature should be (self, value)\n            pass\n\n        @abc.deleter\n        def abc(self, v1):  # Delete signature should be (self)\n            pass\n\nA quick-fix offers to update parameters."
        },
        {
          "shortName": "PyIncorrectDocstringInspection",
          "displayName": "Incorrect docstring",
          "enabled": true,
          "description": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n\n        def add(a, c):\n        \"\"\"\n        @param a:\n        @param b:\n        @return:\n        \"\"\"\n        pass\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n\n    def mult(a, c):\n        \"\"\"\n        @return:\n        \"\"\"\n        pass\n"
        },
        {
          "shortName": "PyListCreationInspection",
          "displayName": "Non-optimal list declaration",
          "enabled": true,
          "description": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n\n    l = [1]\n    l.append(2)\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    l = [1, 2]\n"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "ConstantConditionalExpressionJS",
          "displayName": "Constant conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
        },
        {
          "shortName": "IfStatementWithTooManyBranchesJS",
          "displayName": "'if' statement with too many branches",
          "enabled": false,
          "description": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
        },
        {
          "shortName": "UnnecessaryContinueJS",
          "displayName": "Unnecessary 'continue' statement",
          "enabled": false,
          "description": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
        },
        {
          "shortName": "JSObjectNullOrUndefined",
          "displayName": "Object is 'null' or 'undefined'",
          "enabled": false,
          "description": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatementJS",
          "displayName": "Unnecessary label on 'break' statement",
          "enabled": false,
          "description": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
        },
        {
          "shortName": "PointlessBooleanExpressionJS",
          "displayName": "Pointless statement or boolean expression",
          "enabled": false,
          "description": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatementJS",
          "displayName": "Unnecessary label on 'continue' statement",
          "enabled": false,
          "description": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
        },
        {
          "shortName": "SuspiciousTypeOfGuard",
          "displayName": "Unsound type guard check",
          "enabled": false,
          "description": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\n<br />\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
        },
        {
          "shortName": "LoopStatementThatDoesntLoopJS",
          "displayName": "Loop statement that doesn't loop",
          "enabled": false,
          "description": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
        },
        {
          "shortName": "UnnecessaryReturnJS",
          "displayName": "Unnecessary 'return' statement",
          "enabled": false,
          "description": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranchesJS",
          "displayName": "Conditional expression with identical branches",
          "enabled": false,
          "description": "Reports a ternary conditional expression with identical `then` and `else` branches."
        },
        {
          "shortName": "TailRecursionJS",
          "displayName": "Tail recursion",
          "enabled": false,
          "description": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
        },
        {
          "shortName": "DuplicateConditionJS",
          "displayName": "Duplicate condition in 'if' statement",
          "enabled": false,
          "description": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
        },
        {
          "shortName": "TrivialIfJS",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
        },
        {
          "shortName": "UnnecessaryLabelJS",
          "displayName": "Unnecessary label",
          "enabled": false,
          "description": "Reports an unused label."
        },
        {
          "shortName": "IfStatementWithIdenticalBranchesJS",
          "displayName": "'if' statement with identical branches",
          "enabled": false,
          "description": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
        },
        {
          "shortName": "TrivialConditionalJS",
          "displayName": "Redundant conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
        },
        {
          "shortName": "UnreachableCodeJS",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "Reports code that can never be executed, which almost certainly indicates an error"
        },
        {
          "shortName": "ForLoopReplaceableByWhileJS",
          "displayName": "'for' loop may be replaced by 'while' loop",
          "enabled": false,
          "description": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
        }
      ]
    },
    {
      "name": "Google App Engine (Python)",
      "inspections": [
        {
          "shortName": "Query_index_required",
          "displayName": "Query does not have the required index",
          "enabled": true,
          "description": "Reports GQL queries for which an index is not defined in `index.yaml`.\nSuch queries will fail on the production server.\nThe quick-fix allows you to add the necessary index definitions."
        },
        {
          "shortName": "AppEngineThreadsafeCGIHandlerInspection",
          "displayName": "Threadsafe cannot be enabled with the CGI handler",
          "enabled": true,
          "description": "Reports cases when threadsafe is not enabled with the CGI handler."
        },
        {
          "shortName": "Query_bound_parameters",
          "displayName": "Query does not have required bound parameters",
          "enabled": true,
          "description": "Reports GQL queries with bound parameters that don't have the necessary\nparameters passed to the query method call."
        },
        {
          "shortName": "Query_restricted",
          "displayName": "Query does not comply with the query restrictions",
          "enabled": true,
          "description": "Reports GQL queries that do not comply with the restrictions for queries allowed\non the Google App Engine server.\nSee the [App Engine documentation](http://code.google.com/appengine/docs/python/datastore/queriesandindexes.html#Restrictions_on_Queries) for more information."
        },
        {
          "shortName": "Restricted_Python_calls",
          "displayName": "Feature is not supported in the App Engine sandbox",
          "enabled": true,
          "description": "Reports usages of Python features that are restricted by the Google App\nEngine sandbox and will cause a failure on the production server."
        },
        {
          "shortName": "AppEngineThreadsafeInspection",
          "displayName": "Threadsafe is not available or set inappropriately",
          "enabled": true,
          "description": "Reports cases when threadsafe is not present or it is not set to either `yes` or `no`."
        }
      ]
    },
    {
      "name": "PostCSS",
      "inspections": [
        {
          "shortName": "PostCssCustomSelector",
          "displayName": "Invalid custom selector",
          "enabled": false,
          "description": "Reports a syntax error in [PostCSS Custom Selector](https://github.com/postcss/postcss-custom-selectors).\n\nExample:\n\n\n    @custom-selector :--heading h1, h2, h3;\n"
        },
        {
          "shortName": "PostCssUnresolvedModuleValueReference",
          "displayName": "Unresolved CSS module value",
          "enabled": false,
          "description": "Reports an unresolved reference to a [CSS Module Value](https://github.com/css-modules/postcss-modules-values) (`@value` declaration).\n\nExample:\n\n\n    @value foo from unknown;\n"
        },
        {
          "shortName": "PostCssNesting",
          "displayName": "Invalid nested rule",
          "enabled": false,
          "description": "Reports a nested style rule whose syntax doesn't comply with the [PostCSS Nested](https://github.com/postcss/postcss-nested) or the [PostCSS Nesting](https://github.com/csstools/postcss-nesting) specification.\n\nExample:\n\n\n    .phone {\n      &_title {}\n    }\n"
        },
        {
          "shortName": "PostCssCustomMedia",
          "displayName": "Invalid custom media",
          "enabled": false,
          "description": "Reports a syntax error in a [PostCSS Custom Media](https://github.com/postcss/postcss-custom-media) query.\n\nExample:\n\n\n    @custom-media --small-viewport (max-width: 30em);\n"
        },
        {
          "shortName": "PostCssMediaRange",
          "displayName": "Invalid media query range",
          "enabled": false,
          "description": "Checks [range context](https://github.com/postcss/postcss-media-minmax) syntax, which may alternatively be used for media features with a 'range' type.\n\nExample:\n\n\n    @media screen and (500px <= width <= 1200px) {}\n"
        }
      ]
    },
    {
      "name": "Sass/SCSS",
      "inspections": [
        {
          "shortName": "SassScssUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n"
        },
        {
          "shortName": "SassScssResolvedByNameOnly",
          "displayName": "Missing import",
          "enabled": false,
          "description": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedPlaceholderSelector",
          "displayName": "Unresolved placeholder selector",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n"
        }
      ]
    },
    {
      "name": "Shell script",
      "inspections": [
        {
          "shortName": "ShellCheck",
          "displayName": "ShellCheck",
          "enabled": false,
          "description": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
        }
      ]
    },
    {
      "name": "Unit testing",
      "inspections": [
        {
          "shortName": "JSTestFailedLine",
          "displayName": "Highlight failure line in test code",
          "enabled": false,
          "description": "Reports a failed method call or an assertion in a test."
        },
        {
          "shortName": "KarmaConfigFile",
          "displayName": "Invalid Karma configuration file",
          "enabled": false,
          "description": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`."
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "enabled": false,
          "description": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "enabled": false,
          "description": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "enabled": false,
          "description": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "enabled": false,
          "description": "Reports a duplicate key in an object literal."
        },
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "enabled": false,
          "description": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "enabled": false,
          "description": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtDeprecationInspection",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSDeprecationInspection",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "Reports unresolved references in MongoDB and JavaScript code."
        },
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "NonBlockStatementBodyJS",
          "displayName": "Statement body without braces",
          "enabled": false,
          "description": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
        },
        {
          "shortName": "JSDeclarationsAtScopeStart",
          "displayName": "'var' declared not at the beginning of a function",
          "enabled": false,
          "description": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
        },
        {
          "shortName": "ChainedEqualityJS",
          "displayName": "Chained equality",
          "enabled": false,
          "description": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
        },
        {
          "shortName": "JSArrowFunctionBracesCanBeRemoved",
          "displayName": "Redundant braces around arrow function body",
          "enabled": false,
          "description": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n        let incrementer = (x) => {return x + 1};\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n        let incrementer = (x) => x + 1;\n"
        },
        {
          "shortName": "JSUndefinedPropertyAssignment",
          "displayName": "Undefined property assignment",
          "enabled": false,
          "description": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
        },
        {
          "shortName": "JSRemoveUnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "enabled": false,
          "description": "Reports redundant parentheses.\n\nIn expressions:\n\n    var x = ((1) + 2) + 3\n\nIn arrow function argument lists:\n\n    var incrementer = (x) => x + 1\n\nIn TypeScript and Flow type declarations:\n\n    type Card = (Suit & Rank) | (Suit & Number)\n"
        },
        {
          "shortName": "ChainedFunctionCallJS",
          "displayName": "Chained function call",
          "enabled": false,
          "description": "Reports a function call whose target is another function call, for example, `foo().bar()`"
        },
        {
          "shortName": "NestedFunctionCallJS",
          "displayName": "Nested function call",
          "enabled": false,
          "description": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
        },
        {
          "shortName": "ConstantOnLHSOfComparisonJS",
          "displayName": "Constant on left side of comparison",
          "enabled": false,
          "description": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
        },
        {
          "shortName": "ConstantOnRHSOfComparisonJS",
          "displayName": "Constant on right side of comparison",
          "enabled": false,
          "description": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
        },
        {
          "shortName": "UnterminatedStatementJS",
          "displayName": "Unterminated statement",
          "enabled": false,
          "description": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
        },
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "enabled": false,
          "description": "Reports a missing semicolon at the end of a declaration."
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "enabled": false,
          "description": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "JSValidateJSDoc",
          "displayName": "Syntax errors and unresolved references in JSDoc",
          "enabled": false,
          "description": "Reports a syntax discrepancy in a documentation comment."
        },
        {
          "shortName": "JSClosureCompilerSyntax",
          "displayName": "Incorrect usage of JSDoc tags",
          "enabled": false,
          "description": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
        },
        {
          "shortName": "JSMethodCanBeStatic",
          "displayName": "Method can be made 'static'",
          "enabled": false,
          "description": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
        },
        {
          "shortName": "JSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "enabled": false,
          "description": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
        },
        {
          "shortName": "ES6ShorthandObjectProperty",
          "displayName": "Property can be replaced with shorthand",
          "enabled": false,
          "description": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
        },
        {
          "shortName": "JSUndeclaredVariable",
          "displayName": "Implicitly declared global JavaScript variable",
          "enabled": false,
          "description": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
        },
        {
          "shortName": "JSPrimitiveTypeWrapperUsage",
          "displayName": "Primitive type object wrapper used",
          "enabled": false,
          "description": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
        },
        {
          "shortName": "JSLastCommaInArrayLiteral",
          "displayName": "Unneeded last comma in array literal",
          "enabled": false,
          "description": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
        },
        {
          "shortName": "JSReferencingMutableVariableFromClosure",
          "displayName": "Referencing mutable variable from closure",
          "enabled": false,
          "description": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
        },
        {
          "shortName": "JSAccessibilityCheck",
          "displayName": "Inaccessible @private and @protected members referenced",
          "enabled": false,
          "description": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
        },
        {
          "shortName": "JSXSyntaxUsed",
          "displayName": "JSX syntax used",
          "enabled": false,
          "description": "Reports a usage of a JSX tag in JavaScript code."
        },
        {
          "shortName": "JSJoinVariableDeclarationAndAssignment",
          "displayName": "Variable declaration can be merged with the first assignment to the variable",
          "enabled": false,
          "description": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
        },
        {
          "shortName": "JSDuplicatedDeclaration",
          "displayName": "Duplicate declaration",
          "enabled": false,
          "description": "Reports multiple declarations in a scope."
        },
        {
          "shortName": "JSMismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "enabled": false,
          "description": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
        },
        {
          "shortName": "JSUnresolvedLibraryURL",
          "displayName": "Missed locally stored library for HTTP link",
          "enabled": false,
          "description": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
        },
        {
          "shortName": "ES6PreferShortImport",
          "displayName": "Import can be shortened",
          "enabled": false,
          "description": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
        },
        {
          "shortName": "JSFileReferences",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
        },
        {
          "shortName": "ES6ClassMemberInitializationOrder",
          "displayName": "Use of possibly unassigned property in a static initializer",
          "enabled": false,
          "description": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
        },
        {
          "shortName": "ES6DestructuringVariablesMerge",
          "displayName": "Destructuring properties with the same key",
          "enabled": false,
          "description": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
        },
        {
          "shortName": "JSAnnotator",
          "displayName": "ECMAScript specification is not followed",
          "enabled": false,
          "description": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
        },
        {
          "shortName": "JSUnfilteredForInLoop",
          "displayName": "Unfiltered for..in loop",
          "enabled": false,
          "description": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
        },
        {
          "shortName": "JSLastCommaInObjectLiteral",
          "displayName": "Unneeded last comma in object literal",
          "enabled": false,
          "description": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
        },
        {
          "shortName": "JSDeprecatedSymbols",
          "displayName": "Deprecated symbol used",
          "enabled": false,
          "description": "Reports a usage of a deprecated function variable."
        },
        {
          "shortName": "JSCommentMatchesSignature",
          "displayName": "Mismatched JSDoc and function signature",
          "enabled": false,
          "description": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
        },
        {
          "shortName": "JSUnresolvedExtXType",
          "displayName": "Unresolved Ext JS xtype",
          "enabled": false,
          "description": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
        },
        {
          "shortName": "ES6RedundantNestingInTemplateLiteral",
          "displayName": "Redundant nesting in template literal",
          "enabled": false,
          "description": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
        },
        {
          "shortName": "JSCheckFunctionSignatures",
          "displayName": "Signature mismatch",
          "enabled": false,
          "description": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "enabled": false,
          "description": "Reports an unneeded semicolon."
        },
        {
          "shortName": "JSUnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports an unresolved reference in JavaScript code. In TypeScript code, a problem is reported if the part of the reference before the dot is of the type `any`."
        },
        {
          "shortName": "JSNonStrictModeUsed",
          "displayName": "Non-strict mode used",
          "enabled": false,
          "description": "Reports a JavaScript file that is not in the `strict` mode."
        },
        {
          "shortName": "JSJQueryEfficiency",
          "displayName": "JQuery selector can be optimized",
          "enabled": false,
          "description": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
        },
        {
          "shortName": "JSValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
        },
        {
          "shortName": "WebpackConfigHighlighting",
          "displayName": "Webpack config compliance with JSON Schema",
          "enabled": false,
          "description": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object."
        },
        {
          "shortName": "DuplicatedCode",
          "displayName": "Duplicated code fragment",
          "enabled": true,
          "description": "Reports duplicated blocks of code from the selected scope: the same file or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs."
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "enabled": false,
          "description": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "enabled": false,
          "description": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n"
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "enabled": false,
          "description": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "enabled": false,
          "description": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
        },
        {
          "shortName": "IncorrectFormatting",
          "displayName": "Incorrect formatting",
          "enabled": false,
          "description": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
        },
        {
          "shortName": "ReassignedToPlainText",
          "displayName": "Reassigned to plain text",
          "enabled": false,
          "description": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "enabled": false,
          "description": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details."
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "enabled": false,
          "description": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "enabled": false,
          "description": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "enabled": true,
          "description": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n"
        }
      ]
    },
    {
      "name": "MySQL",
      "inspections": [
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "enabled": false,
          "description": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
        },
        {
          "shortName": "MysqlSpaceAfterFunctionNameInspection",
          "displayName": "Whitespace between the function name and the open parenthesis",
          "enabled": false,
          "description": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "Unsupported syntax in pre-8.0 versions",
          "enabled": false,
          "description": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate property",
          "enabled": false,
          "description": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
        },
        {
          "shortName": "UseEllipsisInPropertyInspection",
          "displayName": "Three dot characters instead of the ellipsis",
          "enabled": false,
          "description": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties file or resource bundle is alphabetically unsorted",
          "enabled": false,
          "description": "Reports alphabetically unsorted resource bundles or .properties files."
        },
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing spaces in property",
          "enabled": false,
          "description": "Reports properties whose keys or values end with a whitespace."
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused property",
          "enabled": false,
          "description": "Reports properties that are not referenced outside of the .properties file they are contained in."
        },
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn't match code style settings",
          "enabled": false,
          "description": "Reports properties in which key or value delimiters do not match code style settings."
        }
      ]
    },
    {
      "name": "Potentially undesirable code constructs",
      "inspections": [
        {
          "shortName": "BreakStatementJS",
          "displayName": "'break' statement",
          "enabled": false,
          "description": "Reports a `break` statements. Ignores `break` statements that end case blocks."
        },
        {
          "shortName": "DebuggerStatementJS",
          "displayName": "'debugger' statement",
          "enabled": false,
          "description": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
        },
        {
          "shortName": "BreakStatementWithLabelJS",
          "displayName": "'break' statement with label",
          "enabled": false,
          "description": "Reports a labeled `break` statement."
        },
        {
          "shortName": "ContinueStatementWithLabelJS",
          "displayName": "'continue' statement with label",
          "enabled": false,
          "description": "Reports a labeled `continue` statement."
        },
        {
          "shortName": "ContinueStatementJS",
          "displayName": "'continue' statement",
          "enabled": false,
          "description": "Reports a `continue` statement."
        },
        {
          "shortName": "ConditionalExpressionJS",
          "displayName": "Conditional expression",
          "enabled": false,
          "description": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
        },
        {
          "shortName": "LabeledStatementJS",
          "displayName": "Labeled statement",
          "enabled": false,
          "description": "Reports a labeled statement."
        },
        {
          "shortName": "WithStatementJS",
          "displayName": "'with' statement",
          "enabled": false,
          "description": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
        },
        {
          "shortName": "AnonymousFunctionJS",
          "displayName": "Anonymous function",
          "enabled": false,
          "description": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
        },
        {
          "shortName": "CommaExpressionJS",
          "displayName": "Comma expression",
          "enabled": false,
          "description": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
        },
        {
          "shortName": "VoidExpressionJS",
          "displayName": "'void' expression",
          "enabled": false,
          "description": "Reports a `void` expression."
        }
      ]
    },
    {
      "name": "Flow type checker",
      "inspections": [
        {
          "shortName": "FlowJSConfig",
          "displayName": "Missing .flowconfig",
          "enabled": false,
          "description": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
        },
        {
          "shortName": "FlowJSError",
          "displayName": "Flow type checker",
          "enabled": false,
          "description": "Reports errors from [Flow](https://flowtype.org/)."
        },
        {
          "shortName": "FlowJSFlagCommentPlacement",
          "displayName": "Misplaced @flow flag",
          "enabled": false,
          "description": "Reports a `@flow` flag comment that is not located at the top of a file."
        },
        {
          "shortName": "FlowJSCoverage",
          "displayName": "Code is not covered by Flow",
          "enabled": false,
          "description": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in [Settings \\| Languages \\& Frameworks \\| JavaScript](settings://Settings.JavaScript)."
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "JSPotentiallyInvalidUsageOfClassThis",
          "displayName": "Potentially invalid reference to 'this' of a class from closure",
          "enabled": false,
          "description": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
        },
        {
          "shortName": "JSPotentiallyInvalidConstructorUsage",
          "displayName": "Potentially invalid constructor usage",
          "enabled": false,
          "description": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
        },
        {
          "shortName": "DivideByZeroJS",
          "displayName": "Division by zero",
          "enabled": false,
          "description": "Reports division by zero or a remainder by zero."
        },
        {
          "shortName": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
          "displayName": "Possibly incorrect target of indexed property access",
          "enabled": false,
          "description": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
        },
        {
          "shortName": "ObjectAllocationIgnoredJS",
          "displayName": "Result of object allocation ignored",
          "enabled": false,
          "description": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
        },
        {
          "shortName": "InfiniteRecursionJS",
          "displayName": "Infinite recursion",
          "enabled": false,
          "description": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
        },
        {
          "shortName": "JSTypeOfValues",
          "displayName": "'typeof' comparison with non-standard value",
          "enabled": false,
          "description": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfThis",
          "displayName": "Potentially invalid reference to 'this' from closure",
          "enabled": false,
          "description": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
        },
        {
          "shortName": "InfiniteLoopJS",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
        },
        {
          "shortName": "JSIncompatibleTypesComparison",
          "displayName": "Comparison of expressions having incompatible types",
          "enabled": false,
          "description": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
        },
        {
          "shortName": "JSSuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "enabled": false,
          "description": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nHere the inspection guesses that `x` and `y` are mixed up.\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
        },
        {
          "shortName": "ForLoopThatDoesntUseLoopVariableJS",
          "displayName": "'for' loop where update or condition does not use loop variable",
          "enabled": false,
          "description": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
        },
        {
          "shortName": "ES6BindWithArrowFunction",
          "displayName": "Suspicious usage of 'bind' with arrow function",
          "enabled": false,
          "description": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
        },
        {
          "shortName": "JSComparisonWithNaN",
          "displayName": "Comparison with NaN",
          "enabled": false,
          "description": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
        },
        {
          "shortName": "JSConstructorReturnsPrimitive",
          "displayName": "Constructor returns primitive value",
          "enabled": false,
          "description": "Reports a constructor function that returns a primitive value. When called with `new`, this value will be lost and an object will be returned instead. To avoid warnings, use the `@return` tag to specify the return of the function."
        },
        {
          "shortName": "JSConsecutiveCommasInArrayLiteral",
          "displayName": "Consecutive commas in array literal",
          "enabled": false,
          "description": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
        },
        {
          "shortName": "JSSuspiciousEqPlus",
          "displayName": "Suspicious '=+' assignment",
          "enabled": false,
          "description": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
        },
        {
          "shortName": "JSVoidFunctionReturnValueUsed",
          "displayName": "Void function return value used",
          "enabled": false,
          "description": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\n<br />\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
        },
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma in selector list",
          "enabled": false,
          "description": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
        },
        {
          "shortName": "CssNonIntegerLengthInPixels",
          "displayName": "Non-integer length in pixels",
          "enabled": false,
          "description": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font family name",
          "enabled": false,
          "description": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Incorrect boolean attribute",
          "enabled": false,
          "description": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "Unresolved file in a link",
          "enabled": false,
          "description": "Reports an unresolved file in a link."
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of 'script' tag",
          "enabled": false,
          "description": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown attribute",
          "enabled": false,
          "description": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "enabled": false,
          "description": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag",
          "enabled": false,
          "description": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Unresolved fragment in a link",
          "enabled": false,
          "description": "Reports an unresolved last part of an URL after the `#` sign."
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown tag",
          "enabled": false,
          "description": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "enabled": false,
          "description": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlWrongAttributeValue",
          "displayName": "Wrong attribute value",
          "enabled": false,
          "description": "Reports an incorrect HTML attribute value."
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "enabled": false,
          "description": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Obsolete tag",
          "enabled": false,
          "description": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Mismatched image size",
          "enabled": false,
          "description": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Unresolved web link",
          "enabled": false,
          "description": "Reports an unresolved web link. Works by making network requests in the background."
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Obsolete attribute",
          "enabled": false,
          "description": "Reports an obsolete HTML5 attribute."
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational tag",
          "enabled": false,
          "description": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
        }
      ]
    },
    {
      "name": "Unused symbols",
      "inspections": [
        {
          "shortName": "JSUnusedAssignment",
          "displayName": "Unused assignment",
          "enabled": false,
          "description": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
        },
        {
          "shortName": "JSUnusedGlobalSymbols",
          "displayName": "Unused global symbol",
          "enabled": false,
          "description": "Reports an unused globally accessible public function, variable, class, or property."
        },
        {
          "shortName": "JSUnusedLocalSymbols",
          "displayName": "Unused local symbol",
          "enabled": false,
          "description": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "ReuseOfLocalVariableJS",
          "displayName": "Reuse of local variable",
          "enabled": false,
          "description": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
        },
        {
          "shortName": "UnnecessaryLocalVariableJS",
          "displayName": "Redundant local variable",
          "enabled": false,
          "description": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
        }
      ]
    },
    {
      "name": "Django",
      "inspections": [
        {
          "shortName": "EndBlockNamesInspection",
          "displayName": "Django endblock name doesn't match the block name",
          "enabled": false,
          "description": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n\n      {% block my_block %}\n      {% endblock not_correct %}\n"
        },
        {
          "shortName": "DjangoBrokenLineCommentInspection",
          "displayName": "Broken line comment",
          "enabled": false,
          "description": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n\n    comment #}\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
        },
        {
          "shortName": "DjangoUnresolvedFilterInspection",
          "displayName": "Unresolved filter",
          "enabled": false,
          "description": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n\n      {{ my_value|cool_filter:\"arg\" }}\n"
        },
        {
          "shortName": "DjangoUnresolvedTagInspection",
          "displayName": "Unresolved tag",
          "enabled": false,
          "description": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n\n    <h1>{{ question.question_text }}</h1>\n    <start>\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
        },
        {
          "shortName": "DjangoOrmInspection",
          "displayName": "Django ORM error",
          "enabled": false,
          "description": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n\n    class Choice:\n        question = ForeignKey(Question, null=False)\n\n\n    choice_set = Question.objects.get(id=1).choice_set.remove()\n\nThe `remove` function can not be called if the foreign key has `null=False`."
        },
        {
          "shortName": "DjangoUnresolvedTemplateReferenceInspection",
          "displayName": "Unresolved template reference",
          "enabled": false,
          "description": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n\n    {% extends \"../DjangoApp/templatetags/base.html\"%}\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
        },
        {
          "shortName": "DjangoIncompatibleInspection",
          "displayName": "Incompatible code in Django templates",
          "enabled": false,
          "description": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n\n    {% if my_var is True %}\n    {% endif %}\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
        },
        {
          "shortName": "DjangoCloseTagInspection",
          "displayName": "Mismatched opening and closing tags",
          "enabled": false,
          "description": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n\n    {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n\nThe IDE reports an error on the `strong` tag not being closed."
        },
        {
          "shortName": "DjangoUnresolvedLoadInspection",
          "displayName": "Unresolved library inspection",
          "enabled": false,
          "description": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n\n      {% load something_nonexistent %}\n"
        },
        {
          "shortName": "DjangoUnresolvedUrlInspection",
          "displayName": "Django {% url %} tag arguments are unresolved",
          "enabled": false,
          "description": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n\n    {% url 'url_name' %}\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
        },
        {
          "shortName": "DjangoUnresolvedStaticReferenceInspection",
          "displayName": "Unresolved static reference",
          "enabled": false,
          "description": "Reports unresolved references to static resources.\n\n**Example:**\n\n\n    {% load staticfiles %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
        },
        {
          "shortName": "DjangoRelationInspection",
          "displayName": "Incorrect comparison expression in Django templates",
          "enabled": false,
          "description": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n\n    {% if my_var==1 %}\n    {% endif %}\n"
        },
        {
          "shortName": "ExtendsTagPositionInspection",
          "displayName": "Misplaced {% extends %} tag",
          "enabled": false,
          "description": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n\n    {% load my_custom_tags %}\n    {% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
        },
        {
          "shortName": "DuplicatedBlockNamesInspection",
          "displayName": "Duplicated block names",
          "enabled": false,
          "description": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <link rel=\"stylesheet\" href=\"style.css\">\n        <title>{% block title %}My amazing site{% endblock %}</title>\n    </head>\n\n    <body>\n        <div id=\"sidebar\">\n            {% block title %}\n            <ul>\n                <li><a href=\"/\">Home</a></li>\n                <li><a href=\"/blog/\">Blog</a></li>\n            </ul>\n            {% endblock %}\n        </div>\n\n        <div id=\"content\">\n            {% block content %}{% endblock %}\n        </div>\n    </body>\n    </html>\n"
        },
        {
          "shortName": "DjangoUrlArgumentsInspection",
          "displayName": "Incorrect arguments in the ' {% url %}' tag",
          "enabled": false,
          "description": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n\n    url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n\nIn the template file\n\n\n    {% url 'polls:detail' %}\n"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRangeJS",
          "displayName": "Shift operation by possibly wrong constant",
          "enabled": false,
          "description": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
        },
        {
          "shortName": "IncompatibleMaskJS",
          "displayName": "Incompatible bitwise mask operation",
          "enabled": false,
          "description": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n\n    // Incompatible mask: as the last byte in mask is zero,\n    // something like 0x1200 would be possible, but not 0x1234\n    if ((mask & 0xFF00) == 0x1234) {...}\n"
        },
        {
          "shortName": "PointlessBitwiseExpressionJS",
          "displayName": "Bitwise expression can be simplified",
          "enabled": false,
          "description": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
        },
        {
          "shortName": "JSBitwiseOperatorUsage",
          "displayName": "Bitwise operator usage",
          "enabled": false,
          "description": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
        }
      ]
    },
    {
      "name": "ES2015 migration aids",
      "inspections": [
        {
          "shortName": "ES6ConvertLetToConst",
          "displayName": "'let' is used instead of 'const'",
          "enabled": false,
          "description": "Reports a `let` declaration that can be made `const`.  "
        },
        {
          "shortName": "ES6ConvertIndexedForToForOf",
          "displayName": "Indexed 'for' is used instead of 'for..of'",
          "enabled": false,
          "description": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
        },
        {
          "shortName": "ES6ConvertVarToLetConst",
          "displayName": "'var' is used instead of 'let' or 'const'",
          "enabled": false,
          "description": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
        },
        {
          "shortName": "ES6ConvertRequireIntoImport",
          "displayName": "'require()' is used instead of 'import'",
          "enabled": false,
          "description": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
        },
        {
          "shortName": "ES6ConvertModuleExportToExport",
          "displayName": "'module.exports' is used instead of 'export'",
          "enabled": false,
          "description": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
        },
        {
          "shortName": "JSStringConcatenationToES6Template",
          "displayName": "String concatenation is used instead of template literal",
          "enabled": false,
          "description": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
        },
        {
          "shortName": "JSFunctionExpressionToArrowFunction",
          "displayName": "Function expression is used instead of arrow function",
          "enabled": false,
          "description": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
        },
        {
          "shortName": "ES6ConvertToForOf",
          "displayName": "'for..in' is used instead of 'for..of'",
          "enabled": false,
          "description": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "enabled": false,
          "description": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "enabled": false,
          "description": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
        },
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "enabled": false,
          "description": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
        },
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "enabled": false,
          "description": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "enabled": false,
          "description": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "enabled": false,
          "description": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
        }
      ]
    },
    {
      "name": "React",
      "inspections": [
        {
          "shortName": "JSXDomNesting",
          "displayName": "Invalid DOM element nesting",
          "enabled": false,
          "description": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
        }
      ]
    },
    {
      "name": "TypeScript",
      "inspections": [
        {
          "shortName": "TypeScriptValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "Reports a parameter, return value, or assigned expression of incorrect type."
        },
        {
          "shortName": "TypeScriptMissingConfigOption",
          "displayName": "Missing tsconfig.json option ",
          "enabled": false,
          "description": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
        },
        {
          "shortName": "TypeScriptSmartCast",
          "displayName": "Narrowed type",
          "enabled": false,
          "description": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
        },
        {
          "shortName": "TypeScriptCheckImport",
          "displayName": "Unresolved imported name",
          "enabled": false,
          "description": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
        },
        {
          "shortName": "TypeScriptLibrary",
          "displayName": "Missing global library",
          "enabled": false,
          "description": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
        },
        {
          "shortName": "TypeScriptMissingAugmentationImport",
          "displayName": "Missing augmentation import",
          "enabled": false,
          "description": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion.TS",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
        },
        {
          "shortName": "TypeScriptValidateGenericTypes",
          "displayName": "Incorrect generic type argument",
          "enabled": false,
          "description": "Reports an invalid type argument in a function, interface, or class declaration."
        },
        {
          "shortName": "TypeScriptValidateJSTypes",
          "displayName": "Type mismatch in 'any' type",
          "enabled": false,
          "description": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the `any` type.\n\n```\ndeclare var test: any;\ntest.hasOwnProperty(true); //reports 'true'\n```"
        },
        {
          "shortName": "TypeScriptJSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "enabled": false,
          "description": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
        },
        {
          "shortName": "TypeScriptFieldCanBeMadeReadonly",
          "displayName": "Field can be readonly",
          "enabled": false,
          "description": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
        },
        {
          "shortName": "TypeScriptRedundantGenericType",
          "displayName": "Redundant type arguments",
          "enabled": false,
          "description": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n\n    type Foo<T=number> = T;\n    let z: Foo<number>;\n"
        },
        {
          "shortName": "TypeScriptUMDGlobal",
          "displayName": "Referenced UMD global variable",
          "enabled": false,
          "description": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
        },
        {
          "shortName": "TypeScriptConfig",
          "displayName": "Inconsistent tsconfig.json properties",
          "enabled": false,
          "description": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
        },
        {
          "shortName": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
          "displayName": "Abstract class constructor can be made protected",
          "enabled": false,
          "description": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
        },
        {
          "shortName": "TypeScriptSuspiciousConstructorParameterAssignment",
          "displayName": "Assigned constructor field parameter",
          "enabled": false,
          "description": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n\n    class Foo {\n      constructor(private p: number) {\n        p = 1; //must be this.p = 1;\n      }\n    }\n"
        },
        {
          "shortName": "TypeScriptUnresolvedReference",
          "displayName": "Unresolved TypeScript reference",
          "enabled": false,
          "description": "Reports an unresolved reference in TypeScript code."
        },
        {
          "shortName": "TypeScriptExplicitMemberType",
          "displayName": "Explicit types",
          "enabled": false,
          "description": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n        var pi: number = 3.14\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
        },
        {
          "shortName": "TypeScriptDuplicateUnionOrIntersectionType",
          "displayName": "Duplicate union or intersection type component",
          "enabled": false,
          "description": "Reports a duplicate type inside a union or intersection."
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "BadExpressionStatementJS",
          "displayName": "Expression statement which is not assignment or call",
          "enabled": false,
          "description": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
        },
        {
          "shortName": "JSConstantReassignment",
          "displayName": "Attempt to assign to const or readonly variable",
          "enabled": false,
          "description": "Reports reassigning a value to a constant or a readonly variable."
        },
        {
          "shortName": "JSOctalInteger",
          "displayName": "Octal integer",
          "enabled": false,
          "description": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
        },
        {
          "shortName": "FunctionWithInconsistentReturnsJS",
          "displayName": "Function with inconsistent returns",
          "enabled": false,
          "description": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
        },
        {
          "shortName": "ReservedWordUsedAsNameJS",
          "displayName": "Reserved word used as name",
          "enabled": false,
          "description": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
        },
        {
          "shortName": "ThisExpressionReferencesGlobalObjectJS",
          "displayName": "'this' expression which references the global object",
          "enabled": false,
          "description": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
        },
        {
          "shortName": "StringLiteralBreaksHTMLJS",
          "displayName": "String literal which breaks HTML parsing",
          "enabled": false,
          "description": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "ConfusingFloatingPointLiteralJS",
          "displayName": "Confusing floating point literal",
          "enabled": false,
          "description": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
        },
        {
          "shortName": "PointlessArithmeticExpressionJS",
          "displayName": "Pointless arithmetic expression",
          "enabled": false,
          "description": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
        },
        {
          "shortName": "DynamicallyGeneratedCodeJS",
          "displayName": "Execution of dynamically generated code",
          "enabled": false,
          "description": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
        },
        {
          "shortName": "NegatedConditionalExpressionJS",
          "displayName": "Negated conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
        },
        {
          "shortName": "MagicNumberJS",
          "displayName": "Magic number",
          "enabled": false,
          "description": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
        },
        {
          "shortName": "BlockStatementJS",
          "displayName": "Unnecessary block statement",
          "enabled": false,
          "description": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
        },
        {
          "shortName": "NestedConditionalExpressionJS",
          "displayName": "Nested conditional expression",
          "enabled": false,
          "description": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
        },
        {
          "shortName": "NestedFunctionJS",
          "displayName": "Nested function",
          "enabled": false,
          "description": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
        },
        {
          "shortName": "IncrementDecrementResultUsedJS",
          "displayName": "Result of increment or decrement used",
          "enabled": false,
          "description": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
        },
        {
          "shortName": "NegatedIfStatementJS",
          "displayName": "Negated 'if' statement",
          "enabled": false,
          "description": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
        },
        {
          "shortName": "ConfusingPlusesOrMinusesJS",
          "displayName": "Confusing sequence of '+' or '-'",
          "enabled": false,
          "description": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
        },
        {
          "shortName": "OverlyComplexBooleanExpressionJS",
          "displayName": "Overly complex boolean expression",
          "enabled": false,
          "description": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
        },
        {
          "shortName": "OverlyComplexArithmeticExpressionJS",
          "displayName": "Overly complex arithmetic expression",
          "enabled": false,
          "description": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
        },
        {
          "shortName": "CallerJS",
          "displayName": "Use of 'caller' property",
          "enabled": false,
          "description": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
        },
        {
          "shortName": "EmptyStatementBodyJS",
          "displayName": "Statement with empty body",
          "enabled": false,
          "description": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Property is incompatible with selected browsers",
          "enabled": false,
          "description": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "Color could be replaced with #-hex",
          "enabled": false,
          "description": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
        },
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "Color could be replaced with rgb()",
          "enabled": false,
          "description": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
        },
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused selector",
          "enabled": false,
          "description": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
        },
        {
          "shortName": "CssDeprecatedValue",
          "displayName": "Deprecated value",
          "enabled": false,
          "description": "Reports a deprecated CSS value. Suggests replacing the deprecated value with valid equivalent."
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property",
          "enabled": false,
          "description": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid type selector",
          "enabled": false,
          "description": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
        },
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid function",
          "enabled": false,
          "description": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports an incorrect CSS property value."
        },
        {
          "shortName": "CssUnknownUnit",
          "displayName": "Unknown unit",
          "enabled": false,
          "description": "Reports an unknown unit"
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid media feature",
          "enabled": false,
          "description": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced @import",
          "enabled": false,
          "description": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown at-rule",
          "enabled": false,
          "description": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved custom property",
          "enabled": false,
          "description": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative property value",
          "enabled": false,
          "description": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
        },
        {
          "shortName": "CssUnresolvedClassInComposesRule",
          "displayName": "Unresolved class in 'composes' rule",
          "enabled": false,
          "description": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Misplaced or incorrect @charset",
          "enabled": false,
          "description": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid pseudo-selector",
          "enabled": false,
          "description": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
        },
        {
          "shortName": "CssInvalidNestedSelector",
          "displayName": "Invalid nested selector",
          "enabled": false,
          "description": "Reports a nested selector starting with an identifier or a functional notation."
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "enabled": false,
          "description": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "enabled": false,
          "description": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "enabled": false,
          "description": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "enabled": false,
          "description": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "enabled": false,
          "description": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "enabled": false,
          "description": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "enabled": false,
          "description": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "enabled": false,
          "description": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe 'join' clause in 'delete' statement",
          "enabled": false,
          "description": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "enabled": false,
          "description": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "enabled": false,
          "description": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "enabled": false,
          "description": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "enabled": false,
          "description": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "enabled": false,
          "description": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "enabled": false,
          "description": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
        },
        {
          "shortName": "SqlCallNotationInspection",
          "displayName": "Using of named and positional arguments",
          "enabled": false,
          "description": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "enabled": false,
          "description": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
        },
        {
          "shortName": "SqlShadowingAliasInspection",
          "displayName": "Column is shadowed by alias",
          "enabled": false,
          "description": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "enabled": false,
          "description": "Reports type-related errors."
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "enabled": false,
          "description": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'Ð°Ð±Ð²Ð³Ð´' AS c;\n    SELECT N'Ð°Ð±Ð²Ð³Ð´' AS d;\n\nThe `SELECT 'Ð°Ð±Ð²Ð³Ð´' AS c;` does not have the `N` prefix, the `'Ð°Ð±Ð²Ð³Ð´'` part will be highlighted."
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "enabled": false,
          "description": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "enabled": false,
          "description": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "enabled": false,
          "description": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "enabled": false,
          "description": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "enabled": false,
          "description": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
        },
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "enabled": false,
          "description": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "enabled": false,
          "description": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
        },
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "enabled": false,
          "description": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "enabled": false,
          "description": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "enabled": false,
          "description": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "enabled": false,
          "description": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
        },
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "enabled": false,
          "description": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "enabled": false,
          "description": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "enabled": false,
          "description": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "enabled": false,
          "description": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "enabled": false,
          "description": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "enabled": false,
          "description": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "enabled": false,
          "description": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "enabled": false,
          "description": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
        },
        {
          "shortName": "SqlDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "enabled": false,
          "description": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "enabled": false,
          "description": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
        },
        {
          "shortName": "SqlConstantExpressionInspection",
          "displayName": "Constant expression",
          "enabled": false,
          "description": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "enabled": false,
          "description": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "enabled": false,
          "description": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "enabled": false,
          "description": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "enabled": false,
          "description": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "enabled": false,
          "description": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "enabled": false,
          "description": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "enabled": false,
          "description": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
        }
      ]
    },
    {
      "name": "Try statement issues",
      "inspections": [
        {
          "shortName": "ContinueOrBreakFromFinallyBlockJS",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "enabled": false,
          "description": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
        },
        {
          "shortName": "UnusedCatchParameterJS",
          "displayName": "Unused 'catch' parameter",
          "enabled": false,
          "description": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
        },
        {
          "shortName": "EmptyCatchBlockJS",
          "displayName": "Empty 'catch' block",
          "enabled": false,
          "description": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
        },
        {
          "shortName": "ExceptionCaughtLocallyJS",
          "displayName": "Exception used for local control-flow",
          "enabled": false,
          "description": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
        },
        {
          "shortName": "ThrowFromFinallyBlockJS",
          "displayName": "'throw' inside 'finally' block",
          "enabled": false,
          "description": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
        },
        {
          "shortName": "EmptyTryBlockJS",
          "displayName": "Empty 'try' block",
          "enabled": false,
          "description": "Reports an empty `try` block, which usually indicates an error."
        },
        {
          "shortName": "EmptyFinallyBlockJS",
          "displayName": "Empty 'finally' block",
          "enabled": false,
          "description": "Reports an empty `finally` block, which usually indicates an error."
        },
        {
          "shortName": "ReturnFromFinallyBlockJS",
          "displayName": "'return' inside 'finally' block",
          "enabled": false,
          "description": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
        }
      ]
    },
    {
      "name": "Function metrics",
      "inspections": [
        {
          "shortName": "StatementsPerFunctionJS",
          "displayName": "Overly long function",
          "enabled": false,
          "description": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
        },
        {
          "shortName": "FunctionWithMultipleLoopsJS",
          "displayName": "Function with multiple loops",
          "enabled": false,
          "description": "Reports a function with multiple loop statements."
        },
        {
          "shortName": "CyclomaticComplexityJS",
          "displayName": "Overly complex function",
          "enabled": false,
          "description": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
        },
        {
          "shortName": "ParametersPerFunctionJS",
          "displayName": "Function with too many parameters",
          "enabled": false,
          "description": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
        },
        {
          "shortName": "FunctionWithMultipleReturnPointsJS",
          "displayName": "Function with multiple return points",
          "enabled": false,
          "description": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
        },
        {
          "shortName": "ThreeNegationsPerFunctionJS",
          "displayName": "Function with more than three negations",
          "enabled": false,
          "description": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
        },
        {
          "shortName": "NestingDepthJS",
          "displayName": "Overly nested function",
          "enabled": false,
          "description": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
        }
      ]
    },
    {
      "name": "Structural search",
      "inspections": [
        {
          "shortName": "SSBasedInspection",
          "displayName": "Structural search inspection",
          "enabled": false,
          "description": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
        }
      ]
    },
    {
      "name": "Dependency analysis",
      "inspections": [
        {
          "shortName": "CheckThirdPartySoftwareList",
          "displayName": "Check third party software list",
          "enabled": false,
          "description": "Check project for possible problems: user's third party software list does not match the collected project metadata"
        },
        {
          "shortName": "CheckDependencyLicenses",
          "displayName": "Check dependency licenses",
          "enabled": true,
          "description": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues"
        },
        {
          "shortName": "CheckModuleLicenses",
          "displayName": "Check module licenses",
          "enabled": false,
          "description": "Check module licenses for possible problems: missing licenses or other compliance issues"
        }
      ]
    },
    {
      "name": "YAML",
      "inspections": [
        {
          "shortName": "YAMLSchemaValidation",
          "displayName": "Validation by JSON Schema",
          "enabled": false,
          "description": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
        },
        {
          "shortName": "YAMLIncompatibleTypes",
          "displayName": "Suspicious type mismatch",
          "enabled": false,
          "description": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n"
        },
        {
          "shortName": "YAMLUnresolvedAlias",
          "displayName": "Unresolved alias",
          "enabled": false,
          "description": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
        },
        {
          "shortName": "YAMLSchemaDeprecation",
          "displayName": "Deprecated YAML key",
          "enabled": false,
          "description": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
        },
        {
          "shortName": "YAMLRecursiveAlias",
          "displayName": "Recursive alias",
          "enabled": false,
          "description": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
        },
        {
          "shortName": "YAMLDuplicatedKeys",
          "displayName": "Duplicated YAML keys",
          "enabled": false,
          "description": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
        },
        {
          "shortName": "YAMLUnusedAnchor",
          "displayName": "Unused anchor",
          "enabled": false,
          "description": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "enabled": false,
          "description": "Reports a root tag name different from the name specified in the `<doctype>` tag."
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "Empty element content",
          "enabled": false,
          "description": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
        },
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "Failed external validation",
          "enabled": false,
          "description": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "enabled": false,
          "description": "Reports XML validation problems in the results of a batch code inspection."
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate 'id' attribute",
          "enabled": false,
          "description": "Reports a duplicate `id` attribute in XML."
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved 'id' reference",
          "enabled": false,
          "description": "Reports an unresolved `id` reference in XML."
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound namespace prefix",
          "enabled": false,
          "description": "Reports an unbound namespace prefix in XML."
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused schema declaration",
          "enabled": false,
          "description": "Reports an unused namespace declaration or location hint in XML."
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference in XML."
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant attribute with default value",
          "enabled": false,
          "description": "Reports a redundant assignment of the default value to an XML attribute."
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "enabled": false,
          "description": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToForLoopParameterJS",
          "displayName": "Assignment to 'for' loop parameter",
          "enabled": false,
          "description": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
        },
        {
          "shortName": "SillyAssignmentJS",
          "displayName": "Variable is assigned to itself",
          "enabled": false,
          "description": "Reports an assignment in the form `x = x`."
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignmentJS",
          "displayName": "Assignment could be replaced with operator assignment",
          "enabled": false,
          "description": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
        },
        {
          "shortName": "NestedAssignmentJS",
          "displayName": "Nested assignment",
          "enabled": false,
          "description": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
        },
        {
          "shortName": "AssignmentResultUsedJS",
          "displayName": "Result of assignment used",
          "enabled": false,
          "description": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
        },
        {
          "shortName": "AssignmentToFunctionParameterJS",
          "displayName": "Assignment to function parameter",
          "enabled": false,
          "description": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
        },
        {
          "shortName": "JSAssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "enabled": false,
          "description": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
        }
      ]
    },
    {
      "name": "Security",
      "inspections": [
        {
          "shortName": "VulnerableLibrariesGlobal",
          "displayName": "Vulnerable imported dependency",
          "enabled": false,
          "description": "Reports vulnerabilities in Gradle and Maven dependencies imported into your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
        },
        {
          "shortName": "VulnerableLibrariesLocal",
          "displayName": "Vulnerable declared dependency",
          "enabled": true,
          "description": "Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
        }
      ]
    },
    {
      "name": "Less",
      "inspections": [
        {
          "shortName": "LessUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n"
        },
        {
          "shortName": "LessUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n"
        },
        {
          "shortName": "LessResolvedByNameOnly",
          "displayName": "Missing import",
          "enabled": false,
          "description": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n"
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpSuspiciousBackref",
          "displayName": "Suspicious back reference",
          "enabled": true,
          "description": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "enabled": true,
          "description": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "enabled": true,
          "description": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
        },
        {
          "shortName": "CustomRegExpInspection",
          "displayName": "Custom RegExp inspection",
          "enabled": true,
          "description": "Custom Regex Inspection"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "enabled": true,
          "description": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
        },
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "enabled": false,
          "description": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "enabled": true,
          "description": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
        },
        {
          "shortName": "RegExpRedundantClassElement",
          "displayName": "Redundant '\\d', '[:digit:]', or '\\D' class elements",
          "enabled": true,
          "description": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
        },
        {
          "shortName": "RegExpSimplifiable",
          "displayName": "Regular expression can be simplified",
          "enabled": true,
          "description": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "enabled": true,
          "description": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpUnnecessaryNonCapturingGroup",
          "displayName": "Unnecessary non-capturing group",
          "enabled": true,
          "description": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "enabled": true,
          "description": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "enabled": false,
          "description": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "enabled": false,
          "description": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "enabled": true,
          "description": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "enabled": true,
          "description": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
        }
      ]
    },
    {
      "name": "Vue",
      "inspections": [
        {
          "shortName": "VueDataFunction",
          "displayName": "Data function",
          "enabled": false,
          "description": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data."
        },
        {
          "shortName": "VueUnrecognizedSlot",
          "displayName": "Unrecognized slot",
          "enabled": false,
          "description": "Reports an unrecognized Vue slot."
        },
        {
          "shortName": "VueMissingComponentImportInspection",
          "displayName": "Missing component import",
          "enabled": false,
          "description": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import."
        },
        {
          "shortName": "VueUnrecognizedDirective",
          "displayName": "Unrecognized directive",
          "enabled": false,
          "description": "Reports an unrecognized Vue directive."
        },
        {
          "shortName": "VueDuplicateTag",
          "displayName": "Duplicate template/script tag",
          "enabled": false,
          "description": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time."
        },
        {
          "shortName": "VueDeprecatedSymbol",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated Vue symbol."
        }
      ]
    },
    {
      "name": "Node.js",
      "inspections": [
        {
          "shortName": "NodeCoreCodingAssistance",
          "displayName": "Unresolved Node.js APIs",
          "enabled": false,
          "description": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
        }
      ]
    },
    {
      "name": "Ini files",
      "inspections": [
        {
          "shortName": "DuplicateKeyInSection",
          "displayName": "Duplicate directive in section",
          "enabled": false,
          "description": "Reports duplicate properties in the `ini` file section."
        },
        {
          "shortName": "DuplicateSectionInFile",
          "displayName": "Duplicate section in file",
          "enabled": false,
          "description": "Reports duplicate sections in the `ini` file."
        }
      ]
    },
    {
      "name": "Imports and dependencies",
      "inspections": [
        {
          "shortName": "JSUrlImportUsage",
          "displayName": "URL import is used",
          "enabled": false,
          "description": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
        },
        {
          "shortName": "NpmUsedModulesInstalled",
          "displayName": "Missing module dependency",
          "enabled": false,
          "description": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
        },
        {
          "shortName": "PackageJsonMismatchedDependency",
          "displayName": "Mismatched dependencies in package.json",
          "enabled": false,
          "description": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
        },
        {
          "shortName": "JSXNamespaceValidation",
          "displayName": "Missing JSX namespace",
          "enabled": false,
          "description": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
        },
        {
          "shortName": "UpdateDependencyToLatestVersion",
          "displayName": "Update package.json dependencies to latest versions",
          "enabled": false,
          "description": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
        },
        {
          "shortName": "ES6UnusedImports",
          "displayName": "Unused import",
          "enabled": false,
          "description": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
        },
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "enabled": false,
          "description": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "FunctionNamingConventionJS",
          "displayName": "Function naming convention",
          "enabled": false,
          "description": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
        },
        {
          "shortName": "JSClassNamingConvention",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
        },
        {
          "shortName": "JSNonASCIINames",
          "displayName": "Identifiers with non-ASCII symbols",
          "enabled": false,
          "description": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
        },
        {
          "shortName": "ParameterNamingConventionJS",
          "displayName": "Function parameter naming convention",
          "enabled": false,
          "description": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
        },
        {
          "shortName": "LocalVariableNamingConventionJS",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
        }
      ]
    },
    {
      "name": "Switch statement issues",
      "inspections": [
        {
          "shortName": "JSRedundantSwitchStatement",
          "displayName": "'switch' statement is redundant and can be replaced",
          "enabled": false,
          "description": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
        },
        {
          "shortName": "TextLabelInSwitchStatementJS",
          "displayName": "Text label in 'switch' statement",
          "enabled": false,
          "description": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
        },
        {
          "shortName": "JSMissingSwitchDefault",
          "displayName": "'switch' statement has no 'default' branch",
          "enabled": false,
          "description": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
        },
        {
          "shortName": "DefaultNotLastCaseInSwitchJS",
          "displayName": "'default' not last case in 'switch'",
          "enabled": false,
          "description": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
        },
        {
          "shortName": "NestedSwitchStatementJS",
          "displayName": "Nested 'switch' statement",
          "enabled": false,
          "description": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
        },
        {
          "shortName": "FallThroughInSwitchStatementJS",
          "displayName": "Fallthrough in 'switch' statement",
          "enabled": false,
          "description": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
        },
        {
          "shortName": "JSDuplicateCaseLabel",
          "displayName": "Duplicate 'case' label",
          "enabled": false,
          "description": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
        },
        {
          "shortName": "JSUnreachableSwitchBranches",
          "displayName": "Unreachable 'case' branch of a 'switch' statement",
          "enabled": false,
          "description": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
        },
        {
          "shortName": "JSMissingSwitchBranches",
          "displayName": "'switch' statement has missing branches",
          "enabled": false,
          "description": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
        },
        {
          "shortName": "JSSwitchVariableDeclarationIssue",
          "displayName": "Variable is declared and being used in different 'case' clauses",
          "enabled": false,
          "description": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
        }
      ]
    },
    {
      "name": "DOM issues",
      "inspections": [
        {
          "shortName": "DocumentWriteJS",
          "displayName": "Call to 'document.write()'",
          "enabled": false,
          "description": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
        },
        {
          "shortName": "XHTMLIncompatabilitiesJS",
          "displayName": "Incompatible XHTML usages",
          "enabled": false,
          "description": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
        },
        {
          "shortName": "PlatformDetectionJS",
          "displayName": "Inaccurate platform detection",
          "enabled": false,
          "description": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
        },
        {
          "shortName": "InnerHTMLJS",
          "displayName": "Use of 'innerHTML' property",
          "enabled": false,
          "description": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
        }
      ]
    },
    {
      "name": "Async code and promises",
      "inspections": [
        {
          "shortName": "ES6PossiblyAsyncFunction",
          "displayName": "'await' in non-async function",
          "enabled": false,
          "description": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
        },
        {
          "shortName": "ES6TopLevelAwaitExpression",
          "displayName": "Top-level 'await' expression",
          "enabled": false,
          "description": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
        },
        {
          "shortName": "ES6MissingAwait",
          "displayName": "Missing await for an async function call",
          "enabled": false,
          "description": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\n<br />\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
        },
        {
          "shortName": "JSIgnoredPromiseFromCall",
          "displayName": "Result of method call returning a promise is ignored",
          "enabled": false,
          "description": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
        },
        {
          "shortName": "ES6RedundantAwait",
          "displayName": "Redundant 'await' expression",
          "enabled": false,
          "description": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "JSHint",
          "displayName": "JSHint",
          "enabled": false,
          "description": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
        },
        {
          "shortName": "Eslint",
          "displayName": "ESLint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
        },
        {
          "shortName": "StandardJS",
          "displayName": "Standard code style",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
        },
        {
          "shortName": "Stylelint",
          "displayName": "Stylelint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule."
        }
      ]
    },
    {
      "name": "Code Coverage",
      "inspections": [
        {
          "shortName": "JsCoverageInspection",
          "displayName": "Check JavaScript and TypeScript source code coverage",
          "enabled": false,
          "description": "Reports methods, classes and files whose coverage is below a certain threshold."
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "enabled": false,
          "description": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
        },
        {
          "shortName": "LanguageDetectionInspection",
          "displayName": "Natural language detection",
          "enabled": false,
          "description": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
        },
        {
          "shortName": "GrazieInspection",
          "displayName": "Grammar",
          "enabled": false,
          "description": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
        }
      ]
    },
    {
      "name": "Jupyter",
      "inspections": [
        {
          "shortName": "JupyterPackageInspection",
          "displayName": "The 'jupyter' package is not installed",
          "enabled": false,
          "description": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
        }
      ]
    },
    {
      "name": "PostgreSQL",
      "inspections": [
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "enabled": false,
          "description": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
        }
      ]
    },
    {
      "name": "SQL server",
      "inspections": [
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Builtin functions",
          "enabled": false,
          "description": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "ORDER BY in queries",
          "enabled": false,
          "description": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
        }
      ]
    },
    {
      "name": "Qodana",
      "inspections": [
        {
          "shortName": "QodanaSanity",
          "displayName": "Sanity",
          "enabled": false,
          "description": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc..."
        }
      ]
    },
    {
      "name": "Pyramid",
      "inspections": [
        {
          "shortName": "PyramidSetupInspection",
          "displayName": "Project is not installed for development",
          "enabled": false,
          "description": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
        }
      ]
    },
    {
      "name": "Oracle",
      "inspections": [
        {
          "shortName": "OraOverloadInspection",
          "displayName": "Overloading errors",
          "enabled": false,
          "description": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
        },
        {
          "shortName": "OraMissingBodyInspection",
          "displayName": "Missing body for package/object type specification",
          "enabled": false,
          "description": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
        },
        {
          "shortName": "OraUnmatchedForwardDeclarationInspection",
          "displayName": "Forward declaration without definition",
          "enabled": false,
          "description": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "enabled": false,
          "description": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**Ð¡**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
        },
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "enabled": false,
          "description": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "enabled": false,
          "description": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n"
        }
      ]
    }
  ]
}