{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googlemock'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 46,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 44,
        "length": 10,
        "offset": 26,
        "surroundingCode": "import re\nimport sys\nfrom googlemock.test import gmock_test_utils\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "1642a49b9466a5353355ec3bffb5d17a243595346d55bddd35795ff721a06a93"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gmock_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 46,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 44,
        "length": 16,
        "offset": 49,
        "surroundingCode": "import re\nimport sys\nfrom googlemock.test import gmock_test_utils\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "f5127e596049881c6b9200eb92d1b0258b4d9f41cca2dbcf86d0a9a51ce9bb22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Cannot find reference '_exit' in '__init__.pyi'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 188,
      "offset": 8,
      "length": 5,
      "code": {
        "startLine": 186,
        "length": 5,
        "offset": 109,
        "surroundingCode": "    # Suppress the error \"googletest was imported but a call to its main()\n    # was never detected.\"\n    os._exit(0)\n  else:\n    gmock_test_utils.Main()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "b18f7c551f89588f8c3a3b4889cc957f6b63653b9b6937ab12081db6dab5a330"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googlemock'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 34,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 32,
        "length": 10,
        "offset": 73,
        "surroundingCode": "\"\"\"Tests that leaked mock objects can be caught be Google Mock.\"\"\"\n\nfrom googlemock.test import gmock_test_utils\n\nPROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_leak_test_')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "76edbf756be8c492561d8bc73b19dcd7e88c607d4168576ee1edaa96dbae447c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gmock_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 34,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 32,
        "length": 16,
        "offset": 96,
        "surroundingCode": "\"\"\"Tests that leaked mock objects can be caught be Google Mock.\"\"\"\n\nfrom googlemock.test import gmock_test_utils\n\nPROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_leak_test_')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "fa895872285d8f5af9f982eb28e373f0dd5f713ba502fd212f20568e827b35c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 35,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 33,
        "length": 10,
        "offset": 30,
        "surroundingCode": "\n# pylint: disable=C6204\nfrom googletest.test import gtest_test_utils\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "7dbb8a9e0d048e126fecc360c782cc6a252b91a7a4a17c9500b0a36fdf91f14a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 35,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 33,
        "length": 16,
        "offset": 53,
        "surroundingCode": "\n# pylint: disable=C6204\nfrom googletest.test import gtest_test_utils\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "3cf649a340a9b1b136bb3665988a0a4ce7e766745fb03beb57e60a05a08eb476"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 35,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 33,
        "length": 10,
        "offset": 27,
        "surroundingCode": "import json\nimport os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "d40cb542533e81c989af2503a74dfbf3916b89e0508fd17c9c2947d5317707b7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_json_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 35,
      "offset": 29,
      "length": 21,
      "code": {
        "startLine": 33,
        "length": 21,
        "offset": 50,
        "surroundingCode": "import json\nimport os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "b23cb2fb188f76dc91c64b059a8013b83fdd4155bf7fc68f1046cde1401140d4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 36,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 34,
        "length": 10,
        "offset": 65,
        "surroundingCode": "import os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_OUTPUT_SUBDIR = 'json_outfiles'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "38c14e9e9ab2be47988eb57f0abe4ca6769fa51a4d08acbc69fadccdf5541d1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 36,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 34,
        "length": 16,
        "offset": 88,
        "surroundingCode": "import os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_OUTPUT_SUBDIR = 'json_outfiles'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "5f15fea528a986de3c2b886f8a9d9bbf2a6538708423fd88379d8d815ae5d877"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 43,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 41,
        "length": 10,
        "offset": 26,
        "surroundingCode": "import re\nimport sys\nfrom googletest.test import gtest_test_utils\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "f5d5bae5475cd3de3cb08d3e3c21430ee97cde3f581f4a941b13a1f8ba8ac763"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 43,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 41,
        "length": 16,
        "offset": 49,
        "surroundingCode": "import re\nimport sys\nfrom googletest.test import gtest_test_utils\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "b1afcbb39a399bc10d5d790b09e459d0be2c633eb589ceb781bc5581f5e06a0f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 40,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 38,
        "length": 10,
        "offset": 17,
        "surroundingCode": "import sys\n\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "93ece206fbf2a5b75ca5145ee597aa17630bddb5ad70ea81adedec4366283bbf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_json_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 40,
      "offset": 29,
      "length": 21,
      "code": {
        "startLine": 38,
        "length": 21,
        "offset": 40,
        "surroundingCode": "import sys\n\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "1517d2edbcd233e2a17996485931dbceb4de465cc2f15a278f9b3e3192a63719"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 41,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 39,
        "length": 10,
        "offset": 56,
        "surroundingCode": "\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_FILTER_FLAG = '--gtest_filter'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "29f2c8372de132906c6f1d192b79567f6ed19d58ffcaae2cde45ce7ffcb07274"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 41,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 39,
        "length": 16,
        "offset": 79,
        "surroundingCode": "\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_FILTER_FLAG = '--gtest_filter'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "e8a1e0ea3c83fca2fc1fb8afc07a629c4c4ff89d32e5f9454cf94df1cc26872e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unused import statement 'Node'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 35,
      "offset": 30,
      "length": 4,
      "code": {
        "startLine": 33,
        "length": 4,
        "offset": 40,
        "surroundingCode": "\nimport os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "cbd8c1cc1dbd77002a1c4c4ecb2b169ca199388c69049083afd0e6ed31d8d16d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 36,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 34,
        "length": 10,
        "offset": 49,
        "surroundingCode": "import os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "6a1e823f819007bc4f594747afb458433a37aa98251b74841afa87b5842322ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 36,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 34,
        "length": 16,
        "offset": 72,
        "surroundingCode": "import os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "9944b9a1ffcd8278337d3c0b0d96397bd4cab18f0eeb7780d82283c2575249d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 37,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 35,
        "length": 10,
        "offset": 84,
        "surroundingCode": "from xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\nGTEST_OUTPUT_SUBDIR = \"xml_outfiles\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "9c8473c1dbcbea4e58a8c20e6627ad6a26af13ac25dcf006cc857d263aa10678"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'googletest'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 43,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 41,
        "length": 10,
        "offset": 25,
        "surroundingCode": "import os\nimport re\nfrom googletest.test import gtest_test_utils\n\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "cc8750a06683b89114ebce5c8bd54c8732b7f62feb199d7b3834e81cf5438183"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'gtest_test_utils'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 43,
      "offset": 29,
      "length": 16,
      "code": {
        "startLine": 41,
        "length": 16,
        "offset": 48,
        "surroundingCode": "import os\nimport re\nfrom googletest.test import gtest_test_utils\n\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "8d064ef142442aae0e91e1ae27c1cd9379c2c898f28b984759c0ef2e61efa681"
}]}