{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'original_env' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 238,
      "offset": 20,
      "length": 12,
      "code": {
        "startLine": 236,
        "length": 12,
        "offset": 50,
        "surroundingCode": "  finally:\n    environ.clear()\n    environ.update(original_env)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection",
    "baselineState": "new"
  },
  "hash": "20775858f431ce0138aed985adfcb3a9bce6bfde1bb1392f759a409931f9c33d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'output' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 685,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 683,
        "length": 6,
        "offset": 88,
        "surroundingCode": "      # opposed to running them.\n      self.assertTrue(\n          '[==========]' not in output,\n          (\n              'Unexpected output during test enumeration.\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection",
    "baselineState": "new"
  },
  "hash": "f4d46f010b1b165b0e0ff70a9b31f0834b82b33adc40092a03734610a14f9cb0"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index).",
  "sources": [
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 113,
      "offset": 5,
      "length": 517,
      "code": {
        "startLine": 113,
        "length": 517,
        "offset": 4,
        "surroundingCode": "    SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, env_var_value)\n\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG\n\n    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if expect_seg_fault:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
      }
    },
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 101,
      "offset": 5,
      "length": 494,
      "code": {
        "startLine": 101,
        "length": 494,
        "offset": 4,
        "surroundingCode": "    SetEnvVar(THROW_ON_FAILURE, env_var_value)\n\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE\n\n    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if should_fail:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "DuplicatedCode",
    "baselineState": "new"
  },
  "hash": "de5ad679ab08f60c3fe7bbdc13eed89876a671a03329c555af67b729fa74a11f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unbound local variables",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Local variable 'tests' might be referenced before assignment",
  "detailsInfo": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 103,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 101,
        "length": 5,
        "offset": 65,
        "surroundingCode": "      test_iterations.append(tests)\n    elif line.strip():\n      tests.append(line.strip())  # 'TestCaseName.TestName'\n\n  return test_iterations"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnboundLocalVariableInspection",
    "baselineState": "new"
  },
  "hash": "d837982052a851e440d0c97e49d52b3bd1a5084efe6bcd28f8e4b6603aec81d6"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index).",
  "sources": [
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 136,
      "offset": 5,
      "length": 496,
      "code": {
        "startLine": 136,
        "length": 496,
        "offset": 4,
        "surroundingCode": "    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
      }
    },
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 152,
      "offset": 5,
      "length": 512,
      "code": {
        "startLine": 152,
        "length": 512,
        "offset": 4,
        "surroundingCode": "    \"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "DuplicatedCode",
    "baselineState": "new"
  },
  "hash": "0dfcce21ca17798d0eb369543220b77c0aa668fc0b12940fbe25835b6646fd1e"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ']' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "RegExp",
      "line": 70,
      "offset": 25,
      "length": 2,
      "code": {
        "startLine": 68,
        "length": 2,
        "offset": 137,
        "surroundingCode": "  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "d11ee055d234f170eda001c2891543d5556a16306bba8c7c0a9af35767e16f0c"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index).",
  "sources": [
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 69,
      "offset": 9,
      "length": 554,
      "code": {
        "startLine": 69,
        "length": 554,
        "offset": 8,
        "surroundingCode": "        {\n            'name': 'SuccessfulTest',\n            'tests': 1,\n            'failures': 0,\n            'disabled': 0,\n            'errors': 0,\n            'time': '*',\n            'timestamp': '*',\n            'testsuite': [{\n                'name': 'Succeeds',\n                'file': 'gtest_xml_output_unittest_.cc',\n                'line': 53,\n                'status': 'RUN',\n                'result': 'COMPLETED',\n                'time': '*',\n                'timestamp': '*',\n                'classname': 'SuccessfulTest',\n            }],\n        },"
      }
    },
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 554,
      "offset": 20,
      "length": 482,
      "code": {
        "startLine": 554,
        "length": 482,
        "offset": 19,
        "surroundingCode": "    'testsuites': [{\n        'name': 'SuccessfulTest',\n        'tests': 1,\n        'failures': 0,\n        'disabled': 0,\n        'errors': 0,\n        'time': '*',\n        'timestamp': '*',\n        'testsuite': [{\n            'name': 'Succeeds',\n            'file': 'gtest_xml_output_unittest_.cc',\n            'line': 53,\n            'status': 'RUN',\n            'result': 'COMPLETED',\n            'time': '*',\n            'timestamp': '*',\n            'classname': 'SuccessfulTest',\n        }],\n    }],"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "DuplicatedCode",
    "baselineState": "new"
  },
  "hash": "ed31752f3f9ba7327bb6964745d60b6d4e71312d32014281e66b46a1be55a339"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ':' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "RegExp",
      "line": 88,
      "offset": 31,
      "length": 2,
      "code": {
        "startLine": 86,
        "length": 2,
        "offset": 37,
        "surroundingCode": "  \"\"\"\n\n  return re.sub(r'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:', 'FILE:#:', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "12f68405544471d88ada96fcf74fd9c2a5ca290ebb4db39c8ff530619d77698f"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index).",
  "sources": [
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 661,
      "offset": 5,
      "length": 323,
      "code": {
        "startLine": 661,
        "length": 323,
        "offset": 4,
        "surroundingCode": "    date_time_from_json = datetime.datetime(\n        year=int(match.group(1)),\n        month=int(match.group(2)),\n        day=int(match.group(3)),\n        hour=int(match.group(4)),\n        minute=int(match.group(5)),\n        second=int(match.group(6)),\n    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_json)"
      }
    },
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 286,
      "offset": 5,
      "length": 321,
      "code": {
        "startLine": 286,
        "length": 321,
        "offset": 4,
        "surroundingCode": "    date_time_from_xml = datetime.datetime(\n        year=int(match.group(1)),\n        month=int(match.group(2)),\n        day=int(match.group(3)),\n        hour=int(match.group(4)),\n        minute=int(match.group(5)),\n        second=int(match.group(6)),\n    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_xml)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "DuplicatedCode",
    "baselineState": "new"
  },
  "hash": "fc4fbb489af28e319bd879e7a05dd3dc09c3fbc4d692a3b53fdb31eee0e1d5e6"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ':' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "RegExp",
      "line": 88,
      "offset": 45,
      "length": 2,
      "code": {
        "startLine": 86,
        "length": 2,
        "offset": 51,
        "surroundingCode": "  \"\"\"\n\n  return re.sub(r'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:', 'FILE:#:', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "2311c505016320e35121afde5e56d05ad2d59824117c699bd5b77c5354d7281e"
},{
  "tool": "Code Inspection",
  "category": "General",
  "type": "Duplicates",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Duplicated code",
  "detailsInfo": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index).",
  "sources": [
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 722,
      "offset": 5,
      "length": 517,
      "code": {
        "startLine": 722,
        "length": 517,
        "offset": 4,
        "surroundingCode": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),\n      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,\n          \"'%s' exited with code %s, which doesn't match \"\n          'the expected exit code %s.' % (command, p.exit_code, 1),\n      )"
      }
    },
    {
      "type": "Duplicates",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 345,
      "offset": 5,
      "length": 517,
      "code": {
        "startLine": 345,
        "length": 517,
        "offset": 4,
        "surroundingCode": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),\n      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,\n          \"'%s' exited with code %s, which doesn't match \"\n          'the expected exit code %s.' % (command, p.exit_code, 1),\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "DuplicatedCode",
    "baselineState": "new"
  },
  "hash": "899cc854f323ce10bb46413c30ad9d8290ba3e084c880ca3f679bd7c0882e56f"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape '-' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "RegExp",
      "line": 113,
      "offset": 35,
      "length": 2,
      "code": {
        "startLine": 111,
        "length": 2,
        "offset": 98,
        "surroundingCode": "\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n\n# Regex for parsing test names from Google Test's output."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "e5061eaff299c5f1a6607ba4bb1b148f9b4fa719f6ec3fe039043a26befe6286"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ']' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "RegExp",
      "line": 113,
      "offset": 38,
      "length": 2,
      "code": {
        "startLine": 111,
        "length": 2,
        "offset": 101,
        "surroundingCode": "\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n\n# Regex for parsing test names from Google Test's output."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "144949ffd93cedbeec4f8907562fe7bd8d442847b5d81e23ac2516dba9eeeb34"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ']' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "RegExp",
      "line": 116,
      "offset": 39,
      "length": 2,
      "code": {
        "startLine": 114,
        "length": 2,
        "offset": 97,
        "surroundingCode": "\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n\n# Regex for parsing disabled banner from Google Test's output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "3402c0c512d57cc9454d0531886b874901bc6c0a33fd09013078c573d686848e"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ']' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "RegExp",
      "line": 119,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 117,
        "length": 2,
        "offset": 117,
        "surroundingCode": "\n# Regex for parsing disabled banner from Google Test's output\nDISABLED_BANNER_REGEX = re.compile(r'^\\[\\s*DISABLED\\s*\\] (.*)')\n\n# The command line flag to tell Google Test to output the list of tests it"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "14b2f5f977d07419bc91b814bfd1b5980451dd3ca50337cf510a09e1f2311c2f"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ':' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 116,
      "offset": 53,
      "length": 2,
      "code": {
        "startLine": 114,
        "length": 2,
        "offset": 70,
        "surroundingCode": "\n  return re.sub(\n      r'.*[/\\\\]((googletest-output-test_|gtest).cc)(\\:\\d+|\\(\\d+\\))\\: ',\n      r'\\1:#: ',\n      test_output,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "dc9d87f6e6579acfeaa124300cd1875a1832476c53def3732b059a5c294d3d57"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ':' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 116,
      "offset": 67,
      "length": 2,
      "code": {
        "startLine": 114,
        "length": 2,
        "offset": 84,
        "surroundingCode": "\n  return re.sub(\n      r'.*[/\\\\]((googletest-output-test_|gtest).cc)(\\:\\d+|\\(\\d+\\))\\: ',\n      r'\\1:#: ',\n      test_output,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "941bfff2b924bfe8a8eed825432655b0c1301a5d234fd77d401443364ce8d8e7"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ']' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 200,
      "offset": 23,
      "length": 2,
      "code": {
        "startLine": 198,
        "length": 2,
        "offset": 47,
        "surroundingCode": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "bc102c27fc4e2556297b61f6e59e12e735faae608b75551dececbfc64fa28a32"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Redundant character escape",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "Redundant character escape ']' in RegExp",
  "detailsInfo": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 200,
      "offset": 63,
      "length": 2,
      "code": {
        "startLine": 198,
        "length": 2,
        "offset": 87,
        "surroundingCode": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRedundantEscape",
    "baselineState": "new"
  },
  "hash": "e6e0053317331daf31d1b3afa8a80814c2cbac1da153ba32e201665c57c1d99d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'AdjustForParameterizedTests' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 277,
      "offset": 7,
      "length": 27,
      "code": {
        "startLine": 275,
        "length": 27,
        "offset": 63,
        "surroundingCode": "    self.assertEqual(set(set_var), set(full_partition))\n\n  def AdjustForParameterizedTests(self, tests_to_run):\n    \"\"\"Adjust tests_to_run in case value parameterized tests are disabled.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "1f4a75c5399ed62e18eb697e66eb644393c451e141dabc8b63631762749d7a45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'setUp' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 382,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 380,
        "length": 5,
        "offset": 56,
        "surroundingCode": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def setUp(self):\n    \"\"\"Sets up test case.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "660126d4da0e10f574d620dfd004c98ab9604f3a46291a2fc7f1d67b0a0158d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'testExitCodeAndOutput' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 65,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 63,
        "length": 21,
        "offset": 64,
        "surroundingCode": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "e92d6afe0a41b1daf270b75819697b63bd52446b276df9b5ecce2794e5b48f34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'RemoveUnsupportedTests' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 286,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 284,
        "length": 22,
        "offset": 57,
        "surroundingCode": "class GTestOutputTest(gtest_test_utils.TestCase):\n\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "89c4dc300b388ed7787befe854ca83b5924610a42ceb8e2aa85153d8f41912a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'testEnvVarAffectsFlag' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 83,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 81,
        "length": 21,
        "offset": 57,
        "surroundingCode": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "1c09b82df0043df5b9f6ea31f968898de9114decca3a4cba287eb1dafe55d3dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'testXmlOutputFile' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 104,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 102,
        "length": 17,
        "offset": 55,
        "surroundingCode": "      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE affects the output flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "02913222ec197e8bd1bd0ea347a9e00e06d41398fdc49e515d134fa9692c2de1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'testXmlOutputFileOverride' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 111,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 109,
        "length": 25,
        "offset": 58,
        "surroundingCode": "    AssertEq('xml:tmp/bar.xml', GetFlag('output'))\n\n  def testXmlOutputFileOverride(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "c091c7cba603ede65af391c6527a0200e313eb30a67eade38e6ad16b3e707689"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'setUp' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 182,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 180,
        "length": 5,
        "offset": 37,
        "surroundingCode": "  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):\n    CalculateTestLists()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "0f1f03400f8dbc70562d2d514987944ce3777303ce844d8640e2fa17e11bee6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'testExitCodeAndOutput' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 58,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 56,
        "length": 21,
        "offset": 72,
        "surroundingCode": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "692de3a0070faf6ef6385a5613c47e3f73b09066046ddf8d0751a692b84eb744"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Method is not declared static",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Method 'testExitCodeAndOutput' may be 'static'",
  "detailsInfo": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 58,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 56,
        "length": 21,
        "offset": 72,
        "surroundingCode": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyMethodMayBeStaticInspection",
    "baselineState": "new"
  },
  "hash": "b030919d37d26daea634229b48a8308c728938df7c9b4297d8c81487f3b77e4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unused local symbols",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Local variable 'test' value is not used",
  "detailsInfo": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 206,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 204,
        "length": 4,
        "offset": 36,
        "surroundingCode": "  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnusedLocalInspection",
    "baselineState": "new"
  },
  "hash": "ec1b317c1827b9228f3efd8fa23016a17cf3cf41e99de48d8880841a6a66840d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing built-in names",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows built-in name 'set'",
  "detailsInfo": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 47,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 45,
        "length": 3,
        "offset": 32,
        "surroundingCode": "\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingBuiltinsInspection",
    "baselineState": "new"
  },
  "hash": "8c2e116a99036db32d3e211dc913415fd4b305962af0a46ff84b436a5d32a154"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 64,
      "offset": 33,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 34,
        "surroundingCode": "\n\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "9177e427ed0e5f2daca74108cd90df189359d56aaf0eeadfcc92a4e945ba2682"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 67,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 82,
        "surroundingCode": "  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "827686b96030c7319166f7c90da9d50739dc02fce1a902ecf0a5d269c431facc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 68,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 66,
        "length": 6,
        "offset": 54,
        "surroundingCode": "\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "e2140492a5b9f41627473b588df0b23724e8ac0c51c6a8dc4547423f458aa7eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 69,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 105,
        "surroundingCode": "  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "5e4485d51de284da68f2443c4ff0039d13f2e61bf5258ab92323adc0397b5bb6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 70,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 68,
        "length": 6,
        "offset": 115,
        "surroundingCode": "  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "1ce3f2376f43c5de558508e68e4d94a4ed54663bfec5b33ad20891978d653251"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 71,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 69,
        "length": 6,
        "offset": 123,
        "surroundingCode": "  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "f6a7e872aaffe378ea79a65c71767ac3989d97f433abaebad7e664f71ea1c853"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 75,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 73,
        "length": 6,
        "offset": 22,
        "surroundingCode": "\n\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "995cf7564cc74fc7057f4443ca9040f87124531cbfc3d8222f82d0699bb36b6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 91,
      "offset": 26,
      "length": 6,
      "code": {
        "startLine": 89,
        "length": 6,
        "offset": 27,
        "surroundingCode": "\n\ndef NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "6d074ab8bbfbf26288c282f2d078fa65560ffafebc6212899bf912e9d3d0d808"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 97,
      "offset": 27,
      "length": 6,
      "code": {
        "startLine": 95,
        "length": 6,
        "offset": 28,
        "surroundingCode": "\n\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "05143d685c2b611681ee95bcfd4c7f384b5d32774ceb40b41e675295840c751f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 103,
      "offset": 34,
      "length": 6,
      "code": {
        "startLine": 101,
        "length": 6,
        "offset": 35,
        "surroundingCode": "\n\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "f28e4fc24eca8ed4716199027f650535caa6f75056434fa81e3a5545a25f3a5a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 109,
      "offset": 19,
      "length": 6,
      "code": {
        "startLine": 107,
        "length": 6,
        "offset": 20,
        "surroundingCode": "\n\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "399eded603cf39e7721714ac7834ffa6d714f7c1100abfd2d5cfc4b93eceeecb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 118,
      "offset": 38,
      "length": 6,
      "code": {
        "startLine": 116,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "b03e3903509499bcbc78158b36fde899951123a90cbdc2888c696811f9d02696"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 129,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 127,
        "length": 6,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "9081accf3889cf167c370013d2f8087d281656b8df3a2e4d638436181adbc8df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 130,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 128,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "967f1519d2be4275691847584cb20a4722eda0c8bb3ebde11a0cff730e1e246f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 131,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 129,
        "length": 6,
        "offset": 85,
        "surroundingCode": "  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "37fe83347da4e55ac70e6a8b97d19b6b1396353cceb5c536b89f69e4b9479afb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 132,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 130,
        "length": 6,
        "offset": 89,
        "surroundingCode": "  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "62bc1ab0351ca4a753493b6977338119ed19f76ef3125a113591d4b4e56d18ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 133,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 131,
        "length": 6,
        "offset": 77,
        "surroundingCode": "  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "2d181c3c013c50d518dc56b4408ce74785473fbe0daa20a2d9900b6335aebf2c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 158,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 156,
        "length": 6,
        "offset": 30,
        "surroundingCode": "\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')\n    golden = golden_file.read().decode('utf-8')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "557b84fdf6d8eaf83917bcc360f7ef6459be34c88153d4b153c3a06e14eba865"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'golden_file' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 159,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 157,
        "length": 11,
        "offset": 105,
        "surroundingCode": "  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')\n    golden = golden_file.read().decode('utf-8')\n    golden_file.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "066e6c56c384fcce98f7d304d2f6a84114e574b7b2793a4c7ecd004a8f02fd1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 122,
      "offset": 29,
      "length": 6,
      "code": {
        "startLine": 120,
        "length": 6,
        "offset": 30,
        "surroundingCode": "\n\ndef RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "d656840f2d7f26312e8f357cac1b3bc321397ef46d3601f353bb9b09aabe280b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 131,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 129,
        "length": 6,
        "offset": 24,
        "surroundingCode": "\n\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "f42f6f2f79599853ddc3f85baaded6ec576ea626be9441d3f25491e759b1174b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 138,
      "offset": 16,
      "length": 6,
      "code": {
        "startLine": 136,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "074e0b6befc5484b2c64a03421ab6a5e408ca7a644fcbf215e255fd435666d6a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 172,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 170,
        "length": 6,
        "offset": 23,
        "surroundingCode": "\n\ndef RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "41fb4c6e0fd6cfe8f5413ab7140cdcae9ef9e50a14b6ef0b42639a07147934c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 175,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 173,
        "length": 6,
        "offset": 68,
        "surroundingCode": "  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "0dd45b458ab9bbb413df5ce7b7188dbba8f4dc83d484ba17e1571cbc52c289ed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 176,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 174,
        "length": 6,
        "offset": 83,
        "surroundingCode": "\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "c2a8ab7a8e0bd39c5ba3c4784d5095e419e19d58bf7c8f6b92a8adc8f8bbd715"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 177,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 175,
        "length": 6,
        "offset": 147,
        "surroundingCode": "  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "b1b712f834cc85b411d64eea6cd808bd352693e3e52ded21859e4d9dca3de6b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 180,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 178,
        "length": 6,
        "offset": 84,
        "surroundingCode": "      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])', r'? tests from \\1', output)\n  return re.sub(r'\\d+ tests?\\.', '? tests.', output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "35a8cac290fa67d3316e67b19a98dde7f1d7cd045d5b9ea4378c1a620a7f7eec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 208,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 206,
        "length": 6,
        "offset": 22,
        "surroundingCode": "\n\ndef NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "9181576807cd4f6d90b9824d71d0947f567d2d5d9a34290345b8fc4015ebd831"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 211,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 209,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "888b3c465c5de5e2a0262169f28a552258e0a2c4315e6c3bb18e3fa49daec715"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 212,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 210,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "b0723c440e2b3eda40c130b0cf13d3557673f7a1a9f335bfd9eb8e2308b39221"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 213,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 211,
        "length": 6,
        "offset": 73,
        "surroundingCode": "  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "a1d6d98d9719ebd6f8f816387d52571452ca393746401973654cd1413ceeb92e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 214,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 212,
        "length": 6,
        "offset": 80,
        "surroundingCode": "  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "63635c0ae43c117c1804671f8ff0ed0a39e1d81f3571b01d088e6b33a29152a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'output' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 307,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 305,
        "length": 6,
        "offset": 29,
        "surroundingCode": "\n  def testOutput(self):\n    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "a49e318b82cf1c11c0cdb54643a88b5811bddbde7c0a705ffaad5b496f556234"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Shadowing names from outer scopes",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Shadows name 'golden_file' from outer scope",
  "detailsInfo": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 309,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 307,
        "length": 11,
        "offset": 43,
        "surroundingCode": "    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')\n    # A mis-configured source control system can cause \\r appear in EOL\n    # sequences when we read the golden file irrespective of an operating"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyShadowingNamesInspection",
    "baselineState": "new"
  },
  "hash": "249767a14c10454bb5faad1b7f8b24d673c1e3855f3b2e8b10336d9c73938f18"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 58,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 56,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6596a62c9b8ac0f52cfbaaeaa51415d053fa0ce556ab9b225a1e7b604dcb19dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 64,
      "offset": 5,
      "length": 27,
      "code": {
        "startLine": 62,
        "length": 27,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b2f85390cf97ff3e20641a413e836a459a5f87e64d0c728ca82a398f0ee19148"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 75,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 73,
        "length": 15,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b4ac35a85f65d314da143c538e23c66998c502e1ee90eb50d8a4a696d7cb4f97"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 91,
      "offset": 5,
      "length": 20,
      "code": {
        "startLine": 89,
        "length": 20,
        "offset": 6,
        "surroundingCode": "\n\ndef NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ab166bf6f94d8ec6818ff8d78d456548061d5bd5a36d27b27de3ceecaf5751b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 97,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 95,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "01f36006d20d38a7b3a63ab3d6c22a644e954b1215baa4631833fb4f791371b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 103,
      "offset": 5,
      "length": 28,
      "code": {
        "startLine": 101,
        "length": 28,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0e274b0ec252a51390d1372a6c31b64a03431469f15bcb563cbc1b8fc72b8639"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 109,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 107,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ea31865b9d2ea156d0e717c0be2575f7ef0a5d3d53268468baebe162d938369a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 118,
      "offset": 5,
      "length": 32,
      "code": {
        "startLine": 116,
        "length": 32,
        "offset": 6,
        "surroundingCode": "\n\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bee2111ab0851dff288b68e812ccc9374d69c77fd0085089322f7c72a5f124ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 137,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 135,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef GetShellCommandOutput(cmd):\n  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e00aef0da572733bff96b12cb0424ff0c5469664aebc008cd69c001e9590ce92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 143,
      "offset": 5,
      "length": 39,
      "code": {
        "startLine": 141,
        "length": 39,
        "offset": 6,
        "surroundingCode": "\n\ndef GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "91004d9db9a2597d739a4a9804ab1feff139d7e37bfd1fb00d17f0d5857981f8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 157,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 155,
        "length": 10,
        "offset": 57,
        "surroundingCode": "class GMockOutputTest(gmock_test_utils.TestCase):\n\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "49d650b30943337dcc1ca3d3af611737a3d0f9f80452f43d56a31db6414be4d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 54,
      "offset": 7,
      "length": 30,
      "code": {
        "startLine": 52,
        "length": 30,
        "offset": 55,
        "surroundingCode": "class GMockLeakTest(gmock_test_utils.TestCase):\n\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e78405bfc7e38b07360215eb223ffb818dbcba40a2f7716d4f563c615dadb0a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 65,
      "offset": 7,
      "length": 38,
      "code": {
        "startLine": 63,
        "length": 38,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testDoesNotCatchLeakedMockWhenDisabled(self):\n    self.assertEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "299b4a1354fb116cd94fa6c6ef4072a604c3d735f40a8b294c6e3278ed60b9f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 80,
      "offset": 7,
      "length": 32,
      "code": {
        "startLine": 78,
        "length": 32,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesLeakedMockWhenEnabled(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7e3744acab77ffdeb171a573160608a6b1bc523124ff0609ae57e16c54535aac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 94,
      "offset": 7,
      "length": 52,
      "code": {
        "startLine": 92,
        "length": 52,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesLeakedMockWhenEnabledWithExplictFlagValue(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "dd5f6781c1d2f886e4d746ab2a90540938bf0f339713e093138d7452a96f0844"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 103,
      "offset": 7,
      "length": 30,
      "code": {
        "startLine": 101,
        "length": 30,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesMultipleLeakedMocks(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e2b5e830b41da2cd54d588c355cbc710c3b9689873b7c1573c0eec258247f41f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 38,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 36,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7e9a7dca8f2c317a8859c85362e93d5e205fd181e5cebe0b79d1dc39cfbdec9c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 44,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 42,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ee116de75f4ccbd3090f301b7188894e6bb01cd3265d2bc31ea06a267141eb1a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 60,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 58,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "45c1a2ccbaf649f2f10a75f46ed56c52ecbe293b64763a1bb13eb39489298ec4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 88,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 86,
        "length": 4,
        "offset": 6,
        "surroundingCode": "\n\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b7876b014a9efe74973a314fa974f22bb28acfab65459753145af8a2f5e751e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 119,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 117,
        "length": 5,
        "offset": 70,
        "surroundingCode": "  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "231a2639445d76b48a3f0327d8809a179fb836fd3f3904700fefa3e2d51fa69c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 128,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 126,
        "length": 8,
        "offset": 36,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a15d4647d3e8dd6e26a90c4472d5499b0c1ca02a6149cd57025f2c679594854b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 131,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 129,
        "length": 17,
        "offset": 36,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6008788468daf5dc857bef933bc400a041e7aef413d9311ecc106b9efd122212"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 145,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 143,
        "length": 12,
        "offset": 18,
        "surroundingCode": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d6686f22d4655fcb7deb28aca323b572124919cf9301fa65d4e3f1a0db3643cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 148,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 146,
        "length": 12,
        "offset": 62,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "be56990959b3055a4f7d3d1dc7cc106f09bf3090d0dd93caa7ad634d13eb7e62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 151,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 149,
        "length": 12,
        "offset": 62,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n\n  def _TestOutFile(self, test_name, expected):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, '--gtest_output=json:%s' % self.output_dir_]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1d6084bbb14cbfb439d91762f941c433728eb4a7016433cbf73d68860a73b72e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 99,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 97,
        "length": 11,
        "offset": 6,
        "surroundingCode": "\n\ndef RunWithFlag(flag):\n  \"\"\"Runs gtest_help_test_ with the given flag.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c89ede4470816f831579d7635080b187e7d4347fab980a0fb01e3dc0311ab80d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 119,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 117,
        "length": 12,
        "offset": 63,
        "surroundingCode": "  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n\n  def TestHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when help flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cfe85637c65f7469885b23af5ac37b00f7971587a007810a7ef464a01b0ea6b7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 149,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 147,
        "length": 25,
        "offset": 61,
        "surroundingCode": "      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)\n\n  def TestUnknownFlagWithAbseil(self, flag):\n    \"\"\"Verifies correct behavior when an unknown flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "90de9f159aba656c7410d0bab244e8902d8ecfa31d6fd35482476ed2a208286b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 162,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 160,
        "length": 15,
        "offset": 69,
        "surroundingCode": "    self.assertIn('ERROR: Unknown command line flag', output)\n\n  def TestNonHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "4fa88c848db7c3c96bafc0adb074e49095be84e9975cab13414b3c5ffc7e21f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 176,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 174,
        "length": 26,
        "offset": 63,
        "surroundingCode": "    self.assertFalse(HELP_REGEX.search(output), output)\n\n  def testPrintsHelpWithFullFlag(self):\n    self.TestHelpFlag('--help')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1d64cb83cc1bdbeb8d4da356601abd73f8c9f75b8a3fb57fd6047e74fbf0839c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 179,
      "offset": 7,
      "length": 28,
      "code": {
        "startLine": 177,
        "length": 28,
        "offset": 39,
        "surroundingCode": "    self.TestHelpFlag('--help')\n\n  def testRunsTestsWithoutHelpFlag(self):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "aca1d5e7c3bce5443789c4f76e755f135247ae986921f3a1ae72ee284cb22c82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 188,
      "offset": 7,
      "length": 34,
      "code": {
        "startLine": 186,
        "length": 34,
        "offset": 38,
        "surroundingCode": "    self.TestNonHelpFlag(None)\n\n  def testRunsTestsWithGtestInternalFlag(self):\n    \"\"\"Verifies correct behavior when internal testing flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6cc2af6cbb58995f5f79ef2817c33a10a11e669dc014c2033da81af447250add"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 629,
      "offset": 9,
      "length": 22,
      "code": {
        "startLine": 627,
        "length": 22,
        "offset": 36,
        "surroundingCode": "  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a65d98d68757a27aaad7795dfb1bba4caeb0c8c2bddd49ae7cd72bded9c43132"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 637,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 635,
        "length": 20,
        "offset": 77,
        "surroundingCode": "      self._TestJsonOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY, 1)\n\n  def testNoTestJsonOutput(self):\n    \"\"\"Verifies JSON output for a Google Test binary without actual tests.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a5c53f16fb45749890fabd37ae6e36af511b5c308ec591bc16dd4c670a07619b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 646,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 644,
        "length": 18,
        "offset": 79,
        "surroundingCode": "    self._TestJsonOutput('gtest_no_test_unittest', EXPECTED_NO_TEST, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the JSON output is valid.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e7949b188a66bac5e05516ad097b7aec8418b4be4fe0b4eac12d06ed42a3a10a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 677,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 675,
        "length": 21,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testDefaultOutputFile(self):\n    \"\"\"Verifies the default output file name.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "145711eee576b2ecaac5f108eab0b7b9c6dc8e79c396ebfb53179c3d80ce8d0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 704,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 702,
        "length": 24,
        "offset": 56,
        "surroundingCode": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedJsonOutput(self):\n    \"\"\"Verifies that no JSON output is generated.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1e579670e1be22cb64b803055173182dc2874c0dd3217b06aba059792554287c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 740,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 738,
        "length": 26,
        "offset": 58,
        "surroundingCode": "    self.assertTrue(not os.path.isfile(json_path))\n\n  def testFilteredTestJsonOutput(self):\n    \"\"\"Verifies JSON output when a filter is applied.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "4a926e03c9cae88ba7207976378930f94df30bd546bcbd9e25f749030669df7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 754,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 752,
        "length": 14,
        "offset": 13,
        "surroundingCode": "    )\n\n  def _GetJsonOutput(self, gtest_prog_name, extra_args, expected_exit_code):\n    \"\"\"Returns the JSON output generated by running the program gtest_prog_name.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "02de7e8ebfba1183adad1fa77c445c720bbfc053931a919aebb67fcda9d5f0fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 791,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 789,
        "length": 15,
        "offset": 25,
        "surroundingCode": "    return actual\n\n  def _TestJsonOutput(\n      self, gtest_prog_name, expected, expected_exit_code, extra_args=None\n  ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "53c6b5b3a562d8e6e135691edf76aa366a6d0e20e9741dedf73d81a479cefdbb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 84,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 82,
        "length": 5,
        "offset": 69,
        "surroundingCode": "  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ced7e38c597b16722ddd59c2f2fd0e27b04dceff3258b47a5246c4701b91fb5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 93,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 91,
        "length": 8,
        "offset": 36,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "65161bfc14cd91089fde2949bb2a8e96ac9acf49960ec3d54d18dc5d35b83bf2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 96,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 94,
        "length": 17,
        "offset": 36,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "fe976beebbce653f1835b8426c94b4465bf43a2b1f22881b62aef7447eafd637"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 110,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 108,
        "length": 12,
        "offset": 18,
        "surroundingCode": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c0017fe6c1a740f9bcc86e56dc577f70ce733b139dd1b4b0384422cfc7b154e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 113,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 111,
        "length": 12,
        "offset": 66,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9d21274d39a424c837ad510d174577df727e2dbbc14a1e98ddd4179eaae89032"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 116,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 114,
        "length": 12,
        "offset": 66,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n\n  def _TestOutFile(self, test_name, expected_xml):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, \"--gtest_output=xml:%s\" % self.output_dir_]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6a11c585d39fe271ad22cbd94d8ed55529470e0abd93aeb61b35767306bf1b20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 229,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 227,
        "length": 7,
        "offset": 89,
        "surroundingCode": "  \"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\"\n\n  def testXml(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9976e28833c7fd959f096d8639b02a73a40ae3774f7fec611d429c83e177db6f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 237,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 235,
        "length": 8,
        "offset": 49,
        "surroundingCode": "    self._TestOutput('xml', EXPECTED_XML)\n\n  def testJSON(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bec6b12ea6839e475a628cd007f474f2d50cfda913d4e4eee38ebce406589304"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 245,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 243,
        "length": 10,
        "offset": 51,
        "surroundingCode": "    self._TestOutput('json', EXPECTED_JSON)\n\n  def _GetOutput(self, out_format):\n    file_path = os.path.join(\n        gtest_test_utils.GetTempDir(), 'test_out.' + out_format"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9be76e4d7b0e0a38e73acd42c2e1338232c6f1d5e6b908cb552f5373a81eaec8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 270,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 268,
        "length": 11,
        "offset": 25,
        "surroundingCode": "    return result\n\n  def _TestOutput(self, test_format, expected_output):\n    actual = self._GetOutput(test_format)\n    actual_lines = actual.splitlines()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a8846fcfc9c4f9b7759bac011dedf8782ec6c290b019c2d9c7a7a0badda0c3dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "CamelCase variable imported as lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 47,
      "offset": 27,
      "length": 3,
      "code": {
        "startLine": 45,
        "length": 3,
        "offset": 32,
        "surroundingCode": "\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a9a6a36bb045d8afbfe095132a1a5a39fd513330646244b2d4078cd88b14beb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 183,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 181,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1f4baab879c479527ea1b56343b0281748f1a2e474b34657c50540f451a66379"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 192,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 190,
        "length": 18,
        "offset": 6,
        "surroundingCode": "\n\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "2971d26085dc78ec8329d055cc6eab3e9a35ceb4da7e085500daccc54ddc964b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 200,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 198,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef RunAndExtractTestList(args=None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9e44513fbbadb3b7d535a60197d09909b8e730845d1f73f12862e666b87a3514"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 219,
      "offset": 5,
      "length": 31,
      "code": {
        "startLine": 217,
        "length": 31,
        "offset": 6,
        "surroundingCode": "\n\ndef RunAndExtractDisabledBannerList(args=None):\n  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bb0cf941755cb800352b512e17c90e822637caf2d9435f4e4fc3ece97351f697"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 230,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 228,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "8b3bedcc9a3a06029cabf2bec27b4a50d5a6a60eb4e6105f7825b8c1bc701752"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 241,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 239,
        "length": 15,
        "offset": 6,
        "surroundingCode": "\n\ndef RunWithSharding(total_shards, shard_index, command):\n  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "fc3149590b5fe9cd2848c55e6202b3c2f0d36cd7b50565004db07c77e26355e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 259,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 257,
        "length": 14,
        "offset": 22,
        "surroundingCode": "  # Utilities.\n\n  def AssertSetEqual(self, lhs, rhs):\n    \"\"\"Asserts that two sets are equal.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0d5df245c9b50a64c2653318693ea1f9368041806d59b8b486b5b3942bcee933"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 268,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 266,
        "length": 22,
        "offset": 68,
        "surroundingCode": "      self.assertTrue(elem in lhs, '%s in %s' % (elem, lhs))\n\n  def AssertPartitionIsValid(self, set_var, list_of_sets):\n    \"\"\"Asserts that list_of_sets is a valid partition of set_var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6000d3fb5467ab6272f544632dddf96cade854db1939909322664a629a0507ca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 277,
      "offset": 7,
      "length": 27,
      "code": {
        "startLine": 275,
        "length": 27,
        "offset": 63,
        "surroundingCode": "    self.assertEqual(set(set_var), set(full_partition))\n\n  def AdjustForParameterizedTests(self, tests_to_run):\n    \"\"\"Adjust tests_to_run in case value parameterized tests are disabled.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7046281806fb0562ec9506591ce38e4e7c2d0983281dddd093b50ed546f98827"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 286,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 284,
        "length": 12,
        "offset": 33,
        "surroundingCode": "      return tests_to_run\n\n  def RunAndVerify(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for a given filter.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d4d325508e5e9dd29d66b05af1f53193ffe0c949418228efa146275cae7ce396"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 316,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 314,
        "length": 24,
        "offset": 56,
        "surroundingCode": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def RunAndVerifyWithSharding(\n      self,\n      gtest_filter,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ccd30438fb03ae8b8f8ad8b2863b1c583a4799793ee60e4fd3fd62a23118c498"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 361,
      "offset": 7,
      "length": 28,
      "code": {
        "startLine": 359,
        "length": 28,
        "offset": 55,
        "surroundingCode": "    # pylint: enable=g-explicit-bool-comparison\n\n  def RunAndVerifyAllowingDisabled(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for the given filter.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bb37ad03fce1588132672302dc7f21fb5168d78221eb79f02919423813462efd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 382,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 380,
        "length": 5,
        "offset": 56,
        "surroundingCode": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def setUp(self):\n    \"\"\"Sets up test case.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cf312a20389484f702bf835f73e9ae0d92db874fcfdea8f8fe2fe7778c201954"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 395,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 393,
        "length": 19,
        "offset": 15,
        "surroundingCode": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the filter.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bac3a6abebd46d9f8d1682d18c184dac84311f760acbafa3da88387436b838ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 400,
      "offset": 7,
      "length": 29,
      "code": {
        "startLine": 398,
        "length": 29,
        "offset": 49,
        "surroundingCode": "    self.RunAndVerify(None, ACTIVE_TESTS)\n\n  def testDefaultBehaviorWithShards(self):\n    \"\"\"Tests the behavior without the filter, with sharding enabled.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "064beb1fe7929646aa037f87b5f771dfaf4cfb45bde42908a6fdba9995156353"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 409,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 407,
        "length": 15,
        "offset": 84,
        "surroundingCode": "    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n\n  def testEmptyFilter(self):\n    \"\"\"Tests an empty filter.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5e51579ea7539587f5391c4c31fdde462fcd204d890d4be2dd78059551dcaf8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 416,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 414,
        "length": 13,
        "offset": 52,
        "surroundingCode": "    self.RunAndVerifyWithSharding('', 2, [])\n\n  def testBadFilter(self):\n    \"\"\"Tests a filter that matches nothing.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9abeae35f79d330cc687046f6f4bd37acf1df148002ed6029956e60ca60a63ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 422,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 420,
        "length": 12,
        "offset": 62,
        "surroundingCode": "    self.RunAndVerifyAllowingDisabled('BadFilter', [])\n\n  def testFullName(self):\n    \"\"\"Tests filtering by full name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "3a7eb82187090cda97f55921816a538049b66516bd54ddf8d9a7e30ff82555dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 429,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 427,
        "length": 20,
        "offset": 76,
        "surroundingCode": "    self.RunAndVerifyWithSharding('FooTest.Xyz', 5, ['FooTest.Xyz'])\n\n  def testUniversalFilters(self):\n    \"\"\"Tests filters that match everything.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "39569bfe0c22a0d149103ca3c2cf6dabccd325ca370c4f0c14e264c350739c08"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 438,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 436,
        "length": 20,
        "offset": 83,
        "surroundingCode": "    self.RunAndVerifyAllowingDisabled('*.*', ACTIVE_TESTS + DISABLED_TESTS)\n\n  def testFilterByTestCase(self):\n    \"\"\"Tests filtering by test case name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c2152ab15de3b96837fcd5166b0bf0213457c745c57c9f02de55e8967d0aced5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 443,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 441,
        "length": 9,
        "offset": 72,
        "surroundingCode": "    self.RunAndVerify('FooTest.*', ['FooTest.Abc', 'FooTest.Xyz'])\n\n    BAZ_TESTS = ['BazTest.TestOne', 'BazTest.TestA', 'BazTest.TestB']\n    self.RunAndVerify('BazTest.*', BAZ_TESTS)\n    self.RunAndVerifyAllowingDisabled("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "46852d70634fd2fa313faa4074f5000f775cda60c5fe4055ac582d890b72ab62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 449,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 447,
        "length": 16,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFilterByTest(self):\n    \"\"\"Tests filtering by test name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "2d9bf62b62e82272821f3a71dd84a4002114bbce918f837f0de294a4672748b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 454,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 452,
        "length": 23,
        "offset": 82,
        "surroundingCode": "    self.RunAndVerify('*.TestOne', ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testFilterDisabledTests(self):\n    \"\"\"Select only the disabled tests to run.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9dcd44b8e083ddd08e4789c1f94033aef337285e9e64aba120bfd7b601b0a343"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 486,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 484,
        "length": 26,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testWildcardInTestCaseName(self):\n    \"\"\"Tests using wildcard in the test case name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b4f937b2ab902c937a46196f585c60048095b89e6cc682a078b8db57998f9e8a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 503,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 501,
        "length": 22,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testWildcardInTestName(self):\n    \"\"\"Tests using wildcard in the test name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "72cec88f2005f61ead6cbf9e81e2853dd2cbd67a53f23421f61849c3476fff63"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 508,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 506,
        "length": 20,
        "offset": 72,
        "surroundingCode": "    self.RunAndVerify('*.*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testFilterWithoutDot(self):\n    \"\"\"Tests a filter that has no '.' in it.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cfb6eafcfab55b5af9ebc29c1a7794d4628b84f054ba4be7c62b93eb88884d0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 521,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 519,
        "length": 15,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testTwoPatterns(self):\n    \"\"\"Tests filters that consist of two patterns.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "f46c0b5d8bb3b62c51f3f25745ce984474b09d2d1261da66078ddaf7ff170a33"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 536,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 534,
        "length": 17,
        "offset": 71,
        "surroundingCode": "    self.RunAndVerify(':*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testThreePatterns(self):\n    \"\"\"Tests filters that consist of three patterns.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "dc37672f812501478d894cb1d0477f5aa640e946711cff1e13fbf3521efbcd44"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 570,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 568,
        "length": 19,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testNegativeFilters(self):\n    self.RunAndVerify(\n        '*-BazTest.TestOne',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e0d232d71ae91cee784b0b46e892ec340d41d1635882afdd3999f5f43d663031"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 643,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 641,
        "length": 23,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the filter flag overrides the filtering env. variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5d7783b641f0ecdc7409f8c0f1a61c3f77a932f076b4a7acbe50335ed617e3f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 653,
      "offset": 7,
      "length": 28,
      "code": {
        "startLine": 651,
        "length": 28,
        "offset": 82,
        "surroundingCode": "    self.AssertSetEqual(tests_run, ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testShardStatusFileIsCreated(self):\n    \"\"\"Tests that the shard file is created if specified in the environment.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a8fd8e5784cfd2c5996fdae47e9c4e2348b35b00c880b1160617c1cd8f0fbe99"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 668,
      "offset": 7,
      "length": 41,
      "code": {
        "startLine": 666,
        "length": 41,
        "offset": 42,
        "surroundingCode": "      os.remove(shard_status_file)\n\n  def testShardStatusFileIsCreatedWithListTests(self):\n    \"\"\"Tests that the shard file is created with the \"list_tests\" flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7b89986e49fc5babcb0eddbd3c55573006671be25487a839a124916c956d05ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 696,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 694,
        "length": 18,
        "offset": 42,
        "surroundingCode": "      os.remove(shard_status_file)\n\n  def testDisabledBanner(self):\n    \"\"\"Tests that the disabled banner prints only tests that match filter.\"\"\"\n    make_filter = lambda s: ['--%s=%s' % (FILTER_FLAG, s)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "fee797deabd669a719d34d8dbeb77a857fbf033b1f531c82489558d3854f9b74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 720,
      "offset": 9,
      "length": 31,
      "code": {
        "startLine": 718,
        "length": 31,
        "offset": 36,
        "surroundingCode": "  if SUPPORTS_DEATH_TESTS:\n\n    def testShardingWorksWithDeathTests(self):\n      \"\"\"Tests integration with death tests and sharding.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1ec675a67e3d9b7c45a20f23c7f93dd124d6c78893cfd11a005455280e5775a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 41,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c2ef1b9b6ad2f6a927cb7385597523a538cde1345d7c19b263817fa7af5b1f8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 46,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 44,
        "length": 8,
        "offset": 6,
        "surroundingCode": "\n\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "481089ead17a3110d550d8227b629f0032f0b5f339eeeae9cc7c204829e90d16"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 53,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 51,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "970a7fb95d1440b3e8dda14f262895d688c71b574ce6a88b1aadbd8b15c18f0f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 65,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 63,
        "length": 21,
        "offset": 64,
        "surroundingCode": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e5462e66e675a06cf7520a9a7aa83b1e617d24a4d09f39548f31ababb72de57a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 120,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 118,
        "length": 3,
        "offset": 6,
        "surroundingCode": "\n\ndef Run(args):\n  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "f1b44883d4103704bf121ec04c6630b635ed5674b88d5e7be4e7087571cd8d6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 134,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 132,
        "length": 12,
        "offset": 74,
        "surroundingCode": "  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Run googletest-list-tests-unittest_ and verify the output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bd422a88d25df8e65f187d239eb53237b0ecf06db9cfe708d6044e815bf2c450"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 186,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 184,
        "length": 19,
        "offset": 15,
        "surroundingCode": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d41c5b236cb73d26000c635edb851ba78f0f4c2931152ed7d9d0295ec0d552bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 191,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 189,
        "length": 8,
        "offset": 88,
        "surroundingCode": "    self.RunAndVerify(flag_value=None, expected_output_re=None, other_flag=None)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_list_tests flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1548f5ef0a5a220b267fc0bde4e06e6c04a7c471b8fddde31f221fe644fe3542"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 201,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 199,
        "length": 26,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testOverrideNonFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests overrides the non-filter flags.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0cce0447220d92f4ab9429ac45e84dbb4bf7397f0250c453c08ba1d83381a602"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 210,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 208,
        "length": 19,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testWithFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests takes into account the filter flags.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9cdf3ad7e5f7e16bd382f3630d14ab77822368a56e54eabc63f7edb4c23adec6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 96,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 94,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "4973d30893043c5bef784ffb586ec3065c88b27655841b9188b0fa9bcfdfda8a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 102,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 100,
        "length": 15,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "89d4099b3d275160ecaeb5293c89fbc8d24592935bf8f234c0e277b0eca6b852"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 122,
      "offset": 5,
      "length": 23,
      "code": {
        "startLine": 120,
        "length": 23,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "2362fb78c495ed827c27435f2476da95009f6ae7469cd69cdb67610e17e74949"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 131,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 129,
        "length": 17,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1c4f9f5d333ad343b4a29e2a14adba79a06e6070d4c5812c9f1c249dc53d53ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 138,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 136,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "50a5078778cad62612b261f0f6fecffc4508488097fd65c230245f6ef911e255"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 144,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 142,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "2f5f02ac285c445cd3f4facb11603815c8c356de1202dd26be4f375226f1ba95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 158,
      "offset": 5,
      "length": 26,
      "code": {
        "startLine": 156,
        "length": 26,
        "offset": 6,
        "surroundingCode": "\n\ndef NormalizeToCurrentPlatform(test_output):\n  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5ce19033b8b5702ffbbb6a3ee68f327df7ffde59dd72a462028d1340f700a497"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 172,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 170,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ec046c9e8b29367f1df5f2b2c4dd8eef84ee2b7db13f56eadb861590877170bc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 184,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 182,
        "length": 19,
        "offset": 6,
        "surroundingCode": "\n\ndef RemoveMatchingTests(test_output, pattern):\n  \"\"\"Removes output of specified tests from a Google Test program's output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0f01938cde400069215c8ab8831c370fbbdf632ef152141a679413f84019d06f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 208,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 206,
        "length": 15,
        "offset": 6,
        "surroundingCode": "\n\ndef NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a1000e2ac449d60448194143e20bfd0f3d16ff33e9256092945899bd68314829"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 218,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 216,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "89ff34c07e475f9bdf3c83ad47481a2f579b2bf2890cf79dc260ae13af60a16c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 239,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 237,
        "length": 16,
        "offset": 6,
        "surroundingCode": "\n\ndef GetCommandOutput(env_cmd):\n  \"\"\"Runs a command and returns output with all file location info stripped off.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "741af2c4d918a722b6237a1bb7654efe9f4e55566c02b2c4a254c9f255b17c48"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 259,
      "offset": 5,
      "length": 22,
      "code": {
        "startLine": 257,
        "length": 22,
        "offset": 6,
        "surroundingCode": "\n\ndef GetOutputOfAllCommands():\n  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "05062d3b3f975d51ce440cb41388e76e7144ad05343b2b385878b253678a1088"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 286,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 284,
        "length": 22,
        "offset": 57,
        "surroundingCode": "class GTestOutputTest(gtest_test_utils.TestCase):\n\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "71230961ef9fd41ab83084e12cc1302fdeb9b91e2ea6682c4754863d0bab6605"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 306,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 304,
        "length": 10,
        "offset": 30,
        "surroundingCode": "    return test_output\n\n  def testOutput(self):\n    output = GetOutputOfAllCommands()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0f67d6c68430a69372907298214d0491b53e40427239d8fcba1c5ab8a7b8422d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 46,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 44,
        "length": 8,
        "offset": 6,
        "surroundingCode": "\n\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "831ef475362a67d146dcdedf68f7d056ef3e16c7ceb55f4c1a9ab5cd1a5ae5dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 53,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 51,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "55e7fa7a662e54c8582355610bcd0d23d057f4d299ac90afc4a8dea144d87a88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 62,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 60,
        "length": 7,
        "offset": 6,
        "surroundingCode": "\n\ndef GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "281246a285f5712679ecfbb4baa48a0c50d82e9fe21cc456eb5fbc4023c2c026"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 71,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 69,
        "length": 8,
        "offset": 6,
        "surroundingCode": "\n\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "21aef52bde35249414865dcb2b8985ce120b1d8052102120657f94c122eab934"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 83,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 81,
        "length": 21,
        "offset": 57,
        "surroundingCode": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d04fa4f639be8c4178e185fa453bc4e4d15a8a5208c563b1b76efc3669cb35fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 104,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 102,
        "length": 17,
        "offset": 55,
        "surroundingCode": "      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE affects the output flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "57b0a0382721c756f1332e6e7446e07b5ef7e35990691f092253d8e8a5cac42c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 111,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 109,
        "length": 25,
        "offset": 58,
        "surroundingCode": "    AssertEq('xml:tmp/bar.xml', GetFlag('output'))\n\n  def testXmlOutputFileOverride(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e0b62b7e0a01af932ae3d1a2e5643189679fc585b3dcb039ccc5569497a8650f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 42,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 40,
        "length": 18,
        "offset": 6,
        "surroundingCode": "\n\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "f3bf5e5216913b8483cb1d3b893a8d5da2ca1855b332811d6d4ac26cb2489de9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 58,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 56,
        "length": 25,
        "offset": 55,
        "surroundingCode": "  \"\"\"Tests global test environment failures.\"\"\"\n\n  def testEnvironmentSetUpFails(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "432035563c7871ede27490b29b749340e8f8e5c22aca7acbf95091676aee1517"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 75,
      "offset": 7,
      "length": 44,
      "code": {
        "startLine": 73,
        "length": 44,
        "offset": 52,
        "surroundingCode": "    self.assertNotIn('Unexpected call', txt)\n\n  def testEnvironmentSetUpAndTornDownForEachRepeat(self):\n    \"\"\"Tests the behavior of test environments and gtest_repeat.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "43207ca3baa11032a7144c82a309ca33eee9a49b7e1541ca92461d52ef92f6a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 106,
      "offset": 7,
      "length": 35,
      "code": {
        "startLine": 104,
        "length": 35,
        "offset": 51,
        "surroundingCode": "    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "88670b866dc83a8911fae20ea11c7091c42350502c83b374ac5ddbf27ee6ff16"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_skip_check_output_test.py",
      "language": "Python",
      "line": 49,
      "offset": 7,
      "length": 29,
      "code": {
        "startLine": 47,
        "length": 29,
        "offset": 67,
        "surroundingCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "de72488b807f893e6e9fbea8d6a33d8e134e7fb01f0142c01dfa2e93ba969d95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 83,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 81,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "402c73654a4f08491aede978e25d07dc0a28c4bf21aa79bbaa2ec5ff40ccc631"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 92,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 90,
        "length": 18,
        "offset": 6,
        "surroundingCode": "\n\ndef RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "fa83c03a753823349d04ded4c5bd32abc96f056624c4843a7d7e43d81aa06236"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 120,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 118,
        "length": 19,
        "offset": 78,
        "surroundingCode": "  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "21adbf554302d934ba1c0201cc2f22e4bf57950e24f1f19bce984ca5af2be5d3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 126,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 124,
        "length": 18,
        "offset": 48,
        "surroundingCode": "    self.assertIn('22 FAILED TEST', txt)\n\n  def testGoogletestFlag(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSimpleTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d2a3a0bbbba51654967c1e4c017b244399dfbe69c8c3840a97ce6344845f0cc5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 135,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 133,
        "length": 20,
        "offset": 49,
        "surroundingCode": "    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9b0b382b77be06a6f957eee6d68c8806c2180b45cb79eda4f9ab31883f62a73d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 151,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 149,
        "length": 15,
        "offset": 48,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testBazelEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bb79fff9de8a1c5e41ab6510eccbc8e2a93dbc6c491cbb5bb6eb298c2b001a25"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 167,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 165,
        "length": 23,
        "offset": 54,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "80df935ad156efbbe89ada0fd525795d5df34f0a509df425a3fd8e855cc52d9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 178,
      "offset": 7,
      "length": 40,
      "code": {
        "startLine": 176,
        "length": 40,
        "offset": 48,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d849795b3abaa3839369546fabf6685235d266049cf77f3b4c2f116dcf33ad08"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 191,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 189,
        "length": 17,
        "offset": 54,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testEventListener(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSkipTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5ca5d07afccc48b3809facfa397a03c3e87fe622402de5a91219fb5c52b052ba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 226,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 224,
        "length": 20,
        "offset": 15,
        "surroundingCode": "      )\n\n  def assertXmlResultCount(self, result, count, xml):\n    self.assertEqual(\n        count,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a6a4f2d900b916d9906957f244fc9351b809f192ffdfaaa52fe9d068a7c1c550"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 234,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 232,
        "length": 20,
        "offset": 13,
        "surroundingCode": "    )\n\n  def assertXmlStatusCount(self, status, count, xml):\n    self.assertEqual(\n        count,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "f31ec5ad431dff6072242a773359351c1a39a77bb7dda35e0129021272d75c96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 242,
      "offset": 7,
      "length": 29,
      "code": {
        "startLine": 240,
        "length": 29,
        "offset": 13,
        "surroundingCode": "    )\n\n  def assertFailFastXmlAndTxtOutput(\n      self,\n      fail_fast,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "140c4f2ebea1a9e4ce09432275b6355ea97656387bad592442dc261b19f78e9b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 269,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 267,
        "length": 22,
        "offset": 74,
        "surroundingCode": "    self.assertXmlResultCount('suppressed', suppressed_count, xml)\n\n  def assertFailFastBehavior(\n      self,\n      test_suite,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "2b04d5f16058d7a49dac03865a7ca8a0649fbbb4acce0756ad65c239a16109de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 291,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 289,
        "length": 25,
        "offset": 15,
        "surroundingCode": "      )\n\n  def assertNotFailFastBehavior(\n      self,\n      test_suite,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0559da2914fd9be4bd743db2b9be1a381495fa7eee17e5987c52d044e50a1840"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 313,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 311,
        "length": 23,
        "offset": 15,
        "surroundingCode": "      )\n\n  def testFlag_HasFixtureTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_F.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0b2f7a602cb7f7e26e3daf264aa12d3cb84859671e827789b683ebc314b02fc9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 330,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 328,
        "length": 22,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlag_HasSimpleTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c4f0c082875568bc545beddc6e1b323cd2ffe21a3635b2aba0aa77b89ee42468"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 347,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 345,
        "length": 26,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlag_HasParametersTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_P.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "58eb24dde5160f548ebacc2ca37bb8de74aac77704daee0f7964df9a41930d32"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 364,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 362,
        "length": 24,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e9f1e451a764dbd8ae6be374aee337a41ee91e1a54fd3b812daba966da11a8ec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 383,
      "offset": 7,
      "length": 35,
      "code": {
        "startLine": 381,
        "length": 35,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases enabled.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "35943891f35c7810f69427ca99f69c6bf43553aacc17bf86781eca068f0f3baf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 402,
      "offset": 7,
      "length": 29,
      "code": {
        "startLine": 400,
        "length": 29,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledSuiteTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7e50d77d755e012f3671a148795024be11a2164b2dabf4d4df315c3a3c3470be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 421,
      "offset": 7,
      "length": 40,
      "code": {
        "startLine": 419,
        "length": 40,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledSuiteRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites enabled.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b4f537796ed93de70732ade38f873ce382b23a26b9d7f69721fa4900b3a92c26"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 442,
      "offset": 9,
      "length": 21,
      "code": {
        "startLine": 440,
        "length": 21,
        "offset": 36,
        "surroundingCode": "  if SUPPORTS_DEATH_TESTS:\n\n    def testFlag_HasDeathTest(self):\n      \"\"\"Tests the behavior of fail_fast and death tests.\"\"\"\n      self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e5aa4a73d7fae03a046e18cf8da47e23ee9dce6aa93f963bb076b2a0b6795102"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_skip_environment_check_output_test.py",
      "language": "Python",
      "line": 49,
      "offset": 7,
      "length": 29,
      "code": {
        "startLine": 47,
        "length": 29,
        "offset": 67,
        "surroundingCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "43db3ba9157364791caff2a7b5e1d6411cc9dd8cb9ca7af16cad0ca0efaf1d69"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 56,
      "offset": 5,
      "length": 24,
      "code": {
        "startLine": 54,
        "length": 24,
        "offset": 6,
        "surroundingCode": "\n\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a917016172bbcfe2e5a6f370054d9da6e7572dea101f2bc3fcf79190f97a081d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 60,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 58,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "df709e9ed766c008fb67efadcc89510cf2e75fd720792d53d1cf18101fd88487"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 64,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 62,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "344d3cd700a5696e155648228ee5d5e7daaf4faf7cc0b3181c88f507c0bc42ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 68,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 66,
        "length": 11,
        "offset": 6,
        "surroundingCode": "\n\ndef ShuffleFlag():\n  return '--gtest_shuffle'\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b3803e3eebbbe22c06fb73e1ecef6ae0f46a799961af48677776a7eb56e3bddb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 72,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 70,
        "length": 14,
        "offset": 6,
        "surroundingCode": "\n\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "2e90c5589b2ba6ce9ef303e09b9923f68b4e1dd4f69662ea94eeb54d51df2df2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 76,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 74,
        "length": 18,
        "offset": 6,
        "surroundingCode": "\n\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "4f7b814dfc3c7ff8a009bb55e44f40a48ca9187e89f931ad02290e7e030b9e03"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 85,
      "offset": 5,
      "length": 24,
      "code": {
        "startLine": 83,
        "length": 24,
        "offset": 6,
        "surroundingCode": "\n\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0d2a3acba0f2858fe9c7e6c2887f5d89f0b2486b995fa357ed4fe817142d7d8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 108,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 106,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef GetTestCases(tests):\n  \"\"\"Returns a list of test cases in the given full test names.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "824bb01dc99b281d35372819be1c5a474470626a3a470053d39b485aac4b065e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 128,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 126,
        "length": 18,
        "offset": 6,
        "surroundingCode": "\n\ndef CalculateTestLists():\n  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "75ba65ed48010129556b901061d65b4593b6d8e96891d796bf1a83236c04d602"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 182,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 180,
        "length": 5,
        "offset": 37,
        "surroundingCode": "  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):\n    CalculateTestLists()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6cc85346a5eb32d48742902069abb8bf7a94bb38d9b9f57209681765c3fa7ffb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 185,
      "offset": 7,
      "length": 33,
      "code": {
        "startLine": 183,
        "length": 33,
        "offset": 32,
        "surroundingCode": "    CalculateTestLists()\n\n  def testShufflePreservesNumberOfTests(self):\n    self.assertEqual(len(ALL_TESTS), len(SHUFFLED_ALL_TESTS))\n    self.assertEqual(len(ACTIVE_TESTS), len(SHUFFLED_ACTIVE_TESTS))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7e9935db827207585c513150f68f6e33ffd228f4f2085022099a6c58ebdf57ff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 191,
      "offset": 7,
      "length": 27,
      "code": {
        "startLine": 189,
        "length": 27,
        "offset": 77,
        "surroundingCode": "    self.assertEqual(len(SHARDED_TESTS), len(SHUFFLED_SHARDED_TESTS))\n\n  def testShuffleChangesTestOrder(self):\n    self.assertTrue(SHUFFLED_ALL_TESTS != ALL_TESTS, SHUFFLED_ALL_TESTS)\n    self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ef42c2f0eaeced1499149e1f8f5e1977b3df39ce7925b817f018640a6225b02c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 203,
      "offset": 7,
      "length": 31,
      "code": {
        "startLine": 201,
        "length": 31,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testShuffleChangesTestCaseOrder(self):\n    self.assertTrue(\n        GetTestCases(SHUFFLED_ALL_TESTS) != GetTestCases(ALL_TESTS),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "0192c9bf255831cedac8c7ca7f646043ecc435f24a055378d0a7a91e028aaa58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 221,
      "offset": 7,
      "length": 28,
      "code": {
        "startLine": 219,
        "length": 28,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testShuffleDoesNotRepeatTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertEqual("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "542ee5244b06ae17dd7c58a7826f423c9f49ecaf7b8ec88a32b7cd28d55c5715"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 247,
      "offset": 7,
      "length": 31,
      "code": {
        "startLine": 245,
        "length": 31,
        "offset": 15,
        "surroundingCode": "      )\n\n  def testShuffleDoesNotCreateNewTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e403dfb7977ae4c5b1de68b5109e5717bd3107b30db2f082f4f3628dd7551a72"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 257,
      "offset": 7,
      "length": 27,
      "code": {
        "startLine": 255,
        "length": 27,
        "offset": 87,
        "surroundingCode": "      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))\n\n  def testShuffleIncludesAllTests(self):\n    for test in ALL_TESTS:\n      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5b46a0a06ad4e4eb9813d4bfa196d3de3b3fa5c94811ab78e8d414352d6bcf62"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 269,
      "offset": 7,
      "length": 34,
      "code": {
        "startLine": 267,
        "length": 34,
        "offset": 88,
        "surroundingCode": "      self.assertTrue(test in SHUFFLED_SHARDED_TESTS, '%s is missing' % (test,))\n\n  def testShuffleLeavesDeathTestsAtFront(self):\n    non_death_test_found = False\n    for test in SHUFFLED_ACTIVE_TESTS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6d40fff4916c4a5ede0d07f1a11510a37fcca38681f548661f291ee69d918916"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 280,
      "offset": 7,
      "length": 31,
      "code": {
        "startLine": 278,
        "length": 31,
        "offset": 43,
        "surroundingCode": "        non_death_test_found = True\n\n  def _VerifyTestCasesDoNotInterleave(self, tests):\n    test_cases = []\n    for test in tests:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ca6cca926b96f365538e6de868c2b08fcf00fcdab7e4ad80f966bbf2b1c0e9a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 292,
      "offset": 7,
      "length": 37,
      "code": {
        "startLine": 290,
        "length": 37,
        "offset": 17,
        "surroundingCode": "        )\n\n  def testShuffleDoesNotInterleaveTestCases(self):\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ALL_TESTS)\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ACTIVE_TESTS)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7d810cc45462311eeb01fd4f0c1036f717c40d8b0429ddef36a7482c2d7de91e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 298,
      "offset": 7,
      "length": 42,
      "code": {
        "startLine": 296,
        "length": 42,
        "offset": 72,
        "surroundingCode": "    self._VerifyTestCasesDoNotInterleave(SHUFFLED_SHARDED_TESTS)\n\n  def testShuffleRestoresOrderAfterEachIteration(self):\n    # Get the test lists in all 3 iterations, using random seed 1, 2,\n    # and 3 respectively.  Google Test picks a different seed in each"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c7a5ecb28e1b79ad411f65178f98eab8f09641a787cd2585acda8062250c4a39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 336,
      "offset": 7,
      "length": 43,
      "code": {
        "startLine": 334,
        "length": 43,
        "offset": 67,
        "surroundingCode": "    self.assertEqual(tests_in_iteration3, tests_with_seed3)\n\n  def testShuffleGeneratesNewOrderInEachIteration(self):\n    # pylint: disable-next=unbalanced-tuple-unpacking\n    [tests_in_iteration1, tests_in_iteration2, tests_in_iteration3] = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "92b8c1d273ec2e54d1f8776efadc2cdbd9284aac1db72d24fb2ad7ee52ac8408"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 354,
      "offset": 7,
      "length": 41,
      "code": {
        "startLine": 352,
        "length": 41,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testShuffleShardedTestsPreservesPartition(self):\n    # If we run M tests on N shards, the same M tests should be run in\n    # total, regardless of the random seeds used by the shards."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "26aefe029b77549f79b50175cb0f3bf5b06b99408204614454a74fb621ac0484"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_testbridge_test.py",
      "language": "Python",
      "line": 41,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a48cf4f772c71211baeb6c0b9bad9f39cd820af558d2e03c10d22e0be214cef3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_testbridge_test.py",
      "language": "Python",
      "line": 48,
      "offset": 7,
      "length": 27,
      "code": {
        "startLine": 46,
        "length": 27,
        "offset": 61,
        "surroundingCode": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9817ba71f39e8e79ff8d6ab837143d31cffd69c23e7b1a46b77b97887e486505"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 39,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "dd5f86bdf3999845e40ef673284cdacbe6867fe5a7b5e904e2a739e2dab43fae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 44,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 42,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "76ce8a62b7cbf0b4b2aa71f8536c9cef2dc0ac0db4a6f9326d6c031a0f8dbd12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 58,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 56,
        "length": 21,
        "offset": 72,
        "surroundingCode": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c9e3c41354941ae32adcd36e7bdf894040ff3ece6e9e8dc8144326e4a7e30d20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 88,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 86,
        "length": 17,
        "offset": 54,
        "surroundingCode": "    \"\"\"Tests exception-catching behavior.\"\"\"\n\n    def TestSehExceptions(self, test_output):\n      self.assertIn(\n          ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ce92649203afee9b5907a398eff38ed2a4f0d562e832366477f928d853f0fbd1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 120,
      "offset": 9,
      "length": 48,
      "code": {
        "startLine": 118,
        "length": 48,
        "offset": 17,
        "surroundingCode": "      )\n\n    def testCatchesSehExceptionsWithCxxExceptionsEnabled(self):\n      self.TestSehExceptions(EX_BINARY_OUTPUT)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "df0ba535839d12eab084911e802531f9a55b472cd89c487a6f5a246af9054a14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 123,
      "offset": 9,
      "length": 49,
      "code": {
        "startLine": 121,
        "length": 49,
        "offset": 56,
        "surroundingCode": "      self.TestSehExceptions(EX_BINARY_OUTPUT)\n\n    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):\n      self.TestSehExceptions(BINARY_OUTPUT)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "711e0f4322d6ba23354de86ef32125e0f292bd3c0b7fd4d5ca5dd389f9a8a035"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 136,
      "offset": 7,
      "length": 44,
      "code": {
        "startLine": 134,
        "length": 44,
        "offset": 13,
        "surroundingCode": "  \"\"\"\n\n  def testCatchesCxxExceptionsInFixtureConstructor(self):\n    self.assertTrue(\n        'C++ exception with description '"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "007830e24ba4c1cdae9bdc2202cb5ca8beaadc6e45da115c4d14165e83007b96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 158,
      "offset": 9,
      "length": 43,
      "code": {
        "startLine": 156,
        "length": 43,
        "offset": 14,
        "surroundingCode": "  ):\n\n    def testCatchesCxxExceptionsInFixtureDestructor(self):\n      self.assertTrue(\n          'C++ exception with description '"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a40d9af0c299118b283cb7b23800ab5053e50b5a72899a1bb2e617029683ebd9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 173,
      "offset": 7,
      "length": 39,
      "code": {
        "startLine": 171,
        "length": 39,
        "offset": 15,
        "surroundingCode": "      )\n\n  def testCatchesCxxExceptionsInSetUpTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a4ac9b4e8f87f1baa927c9794a100cf0b905aea7f232d5e87be25bfcfc4c4fcf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 211,
      "offset": 7,
      "length": 42,
      "code": {
        "startLine": 209,
        "length": 42,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInTearDownTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "d6dd4094b6bb8a3be7d96a932cb923cdfa8407fbf033bb2046a5032eb484e6a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 219,
      "offset": 7,
      "length": 31,
      "code": {
        "startLine": 217,
        "length": 31,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInSetUp(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c3988395e62a08e831a0ad4a096427c81cb0f82e23490e7cec2d0dc6d55139cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 250,
      "offset": 7,
      "length": 34,
      "code": {
        "startLine": 248,
        "length": 34,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInTearDown(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1c356f2e4f38266056882c17150d7988a376ee321018fc33d0e2e4a9728c9d43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 268,
      "offset": 7,
      "length": 34,
      "code": {
        "startLine": 266,
        "length": 34,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInTestBody(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "788399c7f7e570369debfe5bd3c622babac96f09d25a9170b6d51b6bead78c8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 291,
      "offset": 7,
      "length": 30,
      "code": {
        "startLine": 289,
        "length": 30,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testCatchesNonStdCxxExceptions(self):\n    self.assertTrue(\n        'Unknown C++ exception thrown in the test body' in EX_BINARY_OUTPUT,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "34068fc209221fb8c07d9cbe93ae5828b461bc55ed25fb0f2039cd35f002866b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 297,
      "offset": 7,
      "length": 41,
      "code": {
        "startLine": 295,
        "length": 41,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testUnhandledCxxExceptionsAbortTheProgram(self):\n    # Filters out SEH exception tests on Windows. Unhandled SEH exceptions\n    # cause tests to show pop-up windows there."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cd6fc5779f7a89bdbf33719c54d993ba6c9734f570de22e81715d774d3ba854b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Variable in function should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 300,
      "offset": 5,
      "length": 25,
      "code": {
        "startLine": 298,
        "length": 25,
        "offset": 127,
        "surroundingCode": "    # Filters out SEH exception tests on Windows. Unhandled SEH exceptions\n    # cause tests to show pop-up windows there.\n    FITLER_OUT_SEH_TESTS_FLAG = FILTER_FLAG + '=-*Seh*'\n    # By default, Google Test doesn't catch the exceptions.\n    uncaught_exceptions_ex_binary_output = gtest_test_utils.Subprocess("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ae3281830b563a6d7c2bb13bba364e9a453e7a85beb89e9fa7586b35321cd4fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 39,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 6,
        "surroundingCode": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5d17a63e11dcda5fd530a0d69f96a834d8d1ca1fdb1d25f7e42829d949550e37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 44,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 42,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "c365f5d7620010050f6d269f6933e614557417581c74f8dca1e1fecb2421b006"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 58,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 56,
        "length": 21,
        "offset": 72,
        "surroundingCode": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "20ab2f2a4fc71a615cc3bc1a880f464c77baad71dc5872217f31ceb1424a3b76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 255,
      "offset": 9,
      "length": 21,
      "code": {
        "startLine": 253,
        "length": 21,
        "offset": 36,
        "surroundingCode": "  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyXmlOutput(self):\n      \"\"\"Generates non-empty XML and verifies it matches the expected output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b1568ffae38c9ae74df910e91f65d65f153a90e746acb9a2d32676241bc0b191"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 263,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 261,
        "length": 19,
        "offset": 80,
        "surroundingCode": "      self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)\n\n  def testNoTestXmlOutput(self):\n    \"\"\"Verifies XML output for a Google Test binary without actual tests.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "785eeb150465dc2dc6b4dc506387e42a425ef74d231455a41d165d66fbd57365"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 272,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 270,
        "length": 18,
        "offset": 82,
        "surroundingCode": "    self._TestXmlOutput('gtest_no_test_unittest', EXPECTED_NO_TEST_XML, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the XML output is valid.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "91c39a5caf0d5fd1d6d66840d2b239d48dd1def1cabad82e0f6b9d536f7ab005"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 300,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 298,
        "length": 21,
        "offset": 27,
        "surroundingCode": "    actual.unlink()\n\n  def testDefaultOutputFile(self):\n    \"\"\"Tests XML file with default name is created when name is not specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "4d86d847be7b210023865a4d8e4ca8b582ae200e3dfe7e1261bf227b5c9fc3b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 327,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 325,
        "length": 23,
        "offset": 56,
        "surroundingCode": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedXmlOutput(self):\n    \"\"\"Verifies XML output is suppressed if default listener is shut down.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "03551c7b15e0af63f611c13eed1fb25385f3cfe22cd7132c6bd12459d68da929"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 363,
      "offset": 7,
      "length": 25,
      "code": {
        "startLine": 361,
        "length": 25,
        "offset": 54,
        "surroundingCode": "    self.assertFalse(os.path.isfile(xml_path))\n\n  def testFilteredTestXmlOutput(self):\n    \"\"\"Verifies XML output when a filter is applied.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b64038ada7fed81b29250dc03449dc68ea6b8af7b0e06b583a1881d0e10f581f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 377,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 375,
        "length": 24,
        "offset": 13,
        "surroundingCode": "    )\n\n  def testShardedTestXmlOutput(self):\n    \"\"\"Verifies XML output when run using multiple shards.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1d0b1cc68af3e46b79a4c7078b52cb53938b8174505b86bcb88bf9f5d7e4a2a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 391,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 389,
        "length": 13,
        "offset": 13,
        "surroundingCode": "    )\n\n  def _GetXmlOutput(\n      self, gtest_prog_name, extra_args, extra_env, expected_exit_code\n  ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "b26955d3147dce636cd3fcd194e35d0977241479f1cc577c553992739ce2f7ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 434,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 432,
        "length": 14,
        "offset": 25,
        "surroundingCode": "    return actual\n\n  def _TestXmlOutput(\n      self,\n      gtest_prog_name,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a05c89f7fbe5d7b741bb56d2123ee16caf025900935411621d1e4fb3fdad10b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 77,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 75,
        "length": 3,
        "offset": 6,
        "surroundingCode": "\n\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6cd0bb9975675b43f33fce327001522e3665923a89f2f976aa9a9780e771cff1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 98,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 96,
        "length": 12,
        "offset": 13,
        "surroundingCode": "  \"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):\n    \"\"\"Runs googletest-break-on-failure-unittest_ and verifies its behavior.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "80794fad7bb976e61ccb866bd9cd0098db46f389231d409411134d08ed057b1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 148,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 146,
        "length": 19,
        "offset": 67,
        "surroundingCode": "    self.assertTrue(has_seg_fault == expect_seg_fault, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a3677185259c710d0bd7bc15335b80da855ef638221ac96e0f627ca4228aa1f4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 153,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 151,
        "length": 10,
        "offset": 86,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value=None, expect_seg_fault=0)\n\n  def testEnvVar(self):\n    \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "305910fca8d1eaebd92c57ba07b5c0bd5e5c2d457c616914c6f877aa23fc14ec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 159,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 157,
        "length": 8,
        "offset": 85,
        "surroundingCode": "    self.RunAndVerify(env_var_value='1', flag_value=None, expect_seg_fault=1)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_break_on_failure flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a3e76d8a2d55ea209f014ccadd6b069f628ae2ae819ec1e2694a8b7749fa9266"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 165,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 163,
        "length": 23,
        "offset": 85,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the flag overrides the environment variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "4e68800aae1ab5d3f3ee70d85780b4eefb9094e7b0d9569ac2d46511feecbf63"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 173,
      "offset": 7,
      "length": 41,
      "code": {
        "startLine": 171,
        "length": 41,
        "offset": 84,
        "surroundingCode": "    self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n\n  def testBreakOnFailureOverridesThrowOnFailure(self):\n    \"\"\"Tests that gtest_break_on_failure overrides gtest_throw_on_failure.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "697c0cc46b2181c2432ed682b7399a7bbe9060ab32bd818621eac5220200469b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 184,
      "offset": 9,
      "length": 35,
      "code": {
        "startLine": 182,
        "length": 35,
        "offset": 26,
        "surroundingCode": "  if IS_WINDOWS:\n\n    def testCatchExceptionsDoesNotInterfere(self):\n      \"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cdc1bad0ac2e2f3eda5baa10003077326bb195e6f19a451820b376eac041c823"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 56,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 54,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a04d50b3f7f1d8a7833232cd150a70b0e06c08c5fc1bc4ac76e3439344af5b1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 78,
      "offset": 5,
      "length": 24,
      "code": {
        "startLine": 76,
        "length": 24,
        "offset": 6,
        "surroundingCode": "\n\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "9368515a51bc3466a0dded88aed82b4f88d3669e8e0faca86e445c9e41e371ed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 105,
      "offset": 5,
      "length": 7,
      "code": {
        "startLine": 103,
        "length": 7,
        "offset": 6,
        "surroundingCode": "\n\ndef GetFlag(flag):\n  \"\"\"Returns the value of the given flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "799a8c03a979af0125aca98035d3ae424d4cb02af5c124b524c8c16033192265"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 116,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 114,
        "length": 12,
        "offset": 6,
        "surroundingCode": "\n\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "99e0f563ae3ec0db2f2e22c14f3c39805ac4f75e61a7fa6e4803d690bff80c7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 122,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 120,
        "length": 11,
        "offset": 6,
        "surroundingCode": "\n\ndef GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "fc6c5ca4d2e6c1f20fdf295ec2aa9c243004b49ed45c868e07e2c22bcc7107eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 130,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 128,
        "length": 14,
        "offset": 22,
        "surroundingCode": "_temp_dir = None\n\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "af17677933ba2659b63948d3b540c0a228e27594e5e58356c51684e8f67227e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 137,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 135,
        "length": 10,
        "offset": 6,
        "surroundingCode": "\n\ndef GetTempDir():\n  global _temp_dir\n  if not _temp_dir:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5c526b742212823ec411970e58909c2eb638d939df39eddec4c05194cd7c2f60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 144,
      "offset": 5,
      "length": 21,
      "code": {
        "startLine": 142,
        "length": 21,
        "offset": 6,
        "surroundingCode": "\n\ndef GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ac9856fce7d6aad61696c1d5230a60343f6a1d6a612c186c0083fe9f6b3dc990"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 177,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 175,
        "length": 13,
        "offset": 6,
        "surroundingCode": "\n\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cb9e13eb34da55f4d497100ac7f75dc26ecd2d072798714e0b95fd80fc20ed82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 250,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 248,
        "length": 4,
        "offset": 6,
        "surroundingCode": "\n\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "3bea683bbf34e1a5f2ad9bc8988253a7581a276458bb1e75d30fa1d83c5ef58b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 57,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 55,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "836ca282e6ab4eca09df7af166bd079158cbdf1c56dff9a59ff9df12956085b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 75,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 6,
        "surroundingCode": "\n\ndef Run(command):\n  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "6989c948678a332eaf15945ad668b52b11281c0a46452cbfd4306c5a26baece3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 87,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 85,
        "length": 12,
        "offset": 48,
        "surroundingCode": "  \"\"\"Tests the throw-on-failure mode.\"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies its behavior.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "a95f9298c131c54e9b3f04e05f49f136204de41511182736d2ce16db7b211593"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 139,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 137,
        "length": 19,
        "offset": 55,
        "surroundingCode": "    self.assertTrue(failed == should_fail, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "5d47581e726f0f619e2a702a8965373825e5f7f1615b09efb5ed9db0debcab9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 144,
      "offset": 7,
      "length": 24,
      "code": {
        "startLine": 142,
        "length": 24,
        "offset": 85,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value=None, should_fail=False)\n\n  def testThrowOnFailureEnvVar(self):\n    \"\"\"Tests using the GTEST_THROW_ON_FAILURE environment variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "3e9bd4fe43beba57c33015c0f7ad0d8b461d49ec7f974beb2d61edde304b68db"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 150,
      "offset": 7,
      "length": 22,
      "code": {
        "startLine": 148,
        "length": 22,
        "offset": 83,
        "surroundingCode": "    self.RunAndVerify(env_var_value='1', flag_value=None, should_fail=True)\n\n  def testThrowOnFailureFlag(self):\n    \"\"\"Tests using the --gtest_throw_on_failure flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "31c380db87872795f3a88e69745eda2c98741d6678abe41294ebcb81f6cff627"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 156,
      "offset": 7,
      "length": 37,
      "code": {
        "startLine": 154,
        "length": 37,
        "offset": 83,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value='1', should_fail=True)\n\n  def testThrowOnFailureFlagOverridesEnvVar(self):\n    \"\"\"Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "697373224356e92983733461de5aaf6cd334f88f754f2863d1d1cb51876be49f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 44,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 42,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "e977d482f4cb320bcca007d541ce8d377c07af6869aeb3d0e2d532a768c84c31"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 53,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 51,
        "length": 9,
        "offset": 6,
        "surroundingCode": "\n\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "cc5aa6d43782878c3f5ac5c91ff12d17447b335c8f34f59ac5a96d8cb63af148"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 69,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 67,
        "length": 18,
        "offset": 56,
        "surroundingCode": "class GTestColorTest(gtest_test_utils.TestCase):\n\n  def testNoEnvVarNoFlag(self):\n    \"\"\"Tests the case when there's neither GTEST_COLOR nor --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "bff097269b4fab3c78bb86cf96479f1c8be19d8f1edb425f1ed23c7d84705a02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 85,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 83,
        "length": 12,
        "offset": 68,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm-256color', None, None))\n\n  def testFlagOnly(self):\n    \"\"\"Tests the case when there's --gtest_color but not GTEST_COLOR.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "7f4e25e8a1852c4df51224753bb7751b38855c51c92c298a84c6e860aebd60d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 96,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 94,
        "length": 14,
        "offset": 60,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm', None, 'yes'))\n\n  def testEnvVarOnly(self):\n    \"\"\"Tests the case when there's GTEST_COLOR but not --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "916b4c021b7a10cd3eac6cb2dbae96df658df4e99e3a252349c5ced85cd2bb21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 107,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 105,
        "length": 17,
        "offset": 66,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm-color', 'yes', None))\n\n  def testEnvVarAndFlag(self):\n    \"\"\"Tests the case when there are both GTEST_COLOR and --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "ab53a7b1918109fb2d5559d179dd5dfe02130330e0022b0d045b9533348cfe70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 114,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 112,
        "length": 21,
        "offset": 67,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm-color', 'no', 'auto'))\n\n  def testAliasesOfYesAndNo(self):\n    \"\"\"Tests using aliases in specifying --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1793b65be9c91b4b7abcf4f854a90d51795bb32df0973411cae22ea8b6e7b629"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-setuptestsuite-test.py",
      "language": "Python",
      "line": 43,
      "offset": 7,
      "length": 30,
      "code": {
        "startLine": 41,
        "length": 30,
        "offset": 65,
        "surroundingCode": "class GTestSetUpTestSuiteTest(gtest_test_utils.TestCase):\n\n  def testSetupErrorAndTearDownError(self):\n    p = gtest_test_utils.Subprocess(COMMAND)\n    self.assertNotEqual(p.exit_code, 0, msg=p.output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "1513f7ff6bd5f41475bdaace44c03616d18606ffdaaf488741cbb4a9c9b38c45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 42,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 40,
        "length": 21,
        "offset": 79,
        "surroundingCode": "  \"\"\"Base class for tests of Google Test's XML output functionality.\"\"\"\n\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "8cbdd00bb3d729a0c8e73b52d3f954c969dbe9dad7aa38a1309128eb6f77c3d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 131,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 129,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  def _GetChildren(self, element):\n    \"\"\"Fetches all of the child nodes of element, a DOM Element object.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "43968be76d58aaa5aba16fe3a04e35a1e9abf016f884c9d75512f8975dc665c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 naming convention violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Function name should be lowercase",
  "detailsInfo": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 186,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 184,
        "length": 12,
        "offset": 27,
        "surroundingCode": "    return children\n\n  def NormalizeXml(self, element):\n    \"\"\"Normalizes XML that may change from run to run.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8NamingInspection",
    "baselineState": "new"
  },
  "hash": "caf0926451210f730e7b37cf3541fba336382ad6990065286549bf64ae46a974"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Redundant parentheses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Remove redundant parentheses",
  "detailsInfo": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 134,
      "offset": 10,
      "length": 61,
      "code": {
        "startLine": 132,
        "length": 61,
        "offset": 85,
        "surroundingCode": "  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyRedundantParenthesesInspection",
    "baselineState": "new"
  },
  "hash": "c3817af631d57777f058dc88a0e6fcc6e5003675d89fed12fd2208d95f68b1f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Redundant parentheses",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Remove redundant parentheses",
  "detailsInfo": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 216,
      "offset": 10,
      "length": 24,
      "code": {
        "startLine": 214,
        "length": 24,
        "offset": 88,
        "surroundingCode": "        test = match.group(1)\n        tests_run.append(test_case + '.' + test)\n  return (tests_run, p.exit_code)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyRedundantParenthesesInspection",
    "baselineState": "new"
  },
  "hash": "c3f3ed4ef6ad0a574ce1176edb7bb32cc0c321f6e10c85025507a357b0ba2532"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 57,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 55,
        "length": 2,
        "offset": 66,
        "surroundingCode": "EXPECTED_OUTPUT_NO_FILTER_RE = re.compile(\n    r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "cbf6ad8f508e24cf3bca2563812ed94daaea44d4521ab73ffaed540eb6d3e8d0"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 59,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 57,
        "length": 2,
        "offset": 14,
        "surroundingCode": "  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "bdf89204ad649365f6bf7e57340226f405b240c5d3da806ae0c85e51d124bd91"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 60,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 58,
        "length": 2,
        "offset": 13,
        "surroundingCode": "Foo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "4f0756c17ee908f4b4b1293061209796f8c09f31953f848cc271ae8f235ea855"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 61,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 59,
        "length": 2,
        "offset": 14,
        "surroundingCode": "  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\.\n  Xyz"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "5001b43d043ac2758fb433f8da553ce7b2aa1e0e176237db62bfbb621fcb21ea"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 63,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 61,
        "length": 2,
        "offset": 22,
        "surroundingCode": "  DISABLED_Bar3\nAbc\\.\n  Xyz\n  Def\nFooBar\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "674921fbc5644b32e4f752c25f8716a4e8aaa69cad1ca0bd78ac0daa02e5f3f6"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 64,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 62,
        "length": 2,
        "offset": 12,
        "surroundingCode": "Abc\\.\n  Xyz\n  Def\nFooBar\\.\n  Baz"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "ff548be86000d12509087c1cc9de38fc355cbf314a75b44147068ce4754f313d"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 66,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 64,
        "length": 2,
        "offset": 15,
        "surroundingCode": "  Def\nFooBar\\.\n  Baz\nFooTest\\.\n  Test1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "5663c5f4f3e182f03cfa1b79a26f4d28fde1b27363f1ddb2cb2e58555741821b"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 68,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 66,
        "length": 2,
        "offset": 16,
        "surroundingCode": "  Baz\nFooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "2687da71ed8e0827697c4eb57d8950c0006420e5623c41a23561bd8014b7421f"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 69,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 67,
        "length": 2,
        "offset": 18,
        "surroundingCode": "FooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "e42955f12a873175ecc746a15266ad694953e0dd92d460f44ab014019fb06e5c"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 70,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 68,
        "length": 2,
        "offset": 25,
        "surroundingCode": "  Test1\n  DISABLED_Test2\n  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "89c1499e142981cdde249e5954e5033e7e27b293e509ba217f6f1c4e91ba3735"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 71,
      "offset": 14,
      "length": 2,
      "code": {
        "startLine": 69,
        "length": 2,
        "offset": 38,
        "surroundingCode": "  DISABLED_Test2\n  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "7b2503eb863fb220b66621ef5e91faad3d85b212c7481ff2e3da0a79f83c753b"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 72,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 70,
        "length": 2,
        "offset": 75,
        "surroundingCode": "  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "c51558652630644215dd421d202ce56d208734534216f67116dc329bd8e75d65"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 73,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 71,
        "length": 2,
        "offset": 75,
        "surroundingCode": "TypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "217f245793a7e79d33b457f33a63ac5f94ad4ced59934dd7501b1fd9dc0e787f"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 74,
      "offset": 14,
      "length": 2,
      "code": {
        "startLine": 72,
        "length": 2,
        "offset": 29,
        "surroundingCode": "  TestA\n  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "18acf79c890d1bced3996305266566cc2b6e91812040a42ba89de84ad8d4eced"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 75,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 73,
        "length": 2,
        "offset": 57,
        "surroundingCode": "  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "b2f45d18926b3af7aa77013e50b1bc6805ff391acdb57aae64a080b103f7faff"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 76,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 74,
        "length": 2,
        "offset": 57,
        "surroundingCode": "TypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "afd426925d2119987cfa7fc30af5d0c0184ae5ae7ad25a9ad4f392802fb21eee"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 77,
      "offset": 14,
      "length": 2,
      "code": {
        "startLine": 75,
        "length": 2,
        "offset": 29,
        "surroundingCode": "  TestA\n  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "0c21388b6cce30d4ee43660386433fd9eaf03a6dd0e9965582b1659c3477c826"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 78,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 76,
        "length": 2,
        "offset": 59,
        "surroundingCode": "  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "d8e4f0938cf75a06e4d4e3dd8417914eba0f0721354771bc8a4821d05c78e470"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 79,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 77,
        "length": 2,
        "offset": 59,
        "surroundingCode": "TypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "17733de1d596d5977f59a6ad2679f62d9d50ceb46dfe5985ffb86c9d4d24d848"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 80,
      "offset": 21,
      "length": 2,
      "code": {
        "startLine": 78,
        "length": 2,
        "offset": 36,
        "surroundingCode": "  TestA\n  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "57b6bba18b2080e55d56cb2de8bee9a7b43d7eca00499babac491c9f63a2cc11"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 81,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 79,
        "length": 2,
        "offset": 82,
        "surroundingCode": "  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "52002ed3487abf0edc5ddfd55da1603430462a7f30b838f4722ef40799839406"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 82,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 80,
        "length": 2,
        "offset": 82,
        "surroundingCode": "My/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "ea175e70e4d4be94a06fea6f3a7a3983cb8a667455cfdc12032ab2852ca8f87b"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 83,
      "offset": 21,
      "length": 2,
      "code": {
        "startLine": 81,
        "length": 2,
        "offset": 36,
        "surroundingCode": "  TestA\n  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "d8406133c6a0af5042f12e4fa6fca94def32297dc016dd80086ea50134ffb622"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 84,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 82,
        "length": 2,
        "offset": 64,
        "surroundingCode": "  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "81b3f1ea02705f71ece3f9087dbddbed3b45d458ee70367b1e402b3f4e147d1d"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 85,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 83,
        "length": 2,
        "offset": 64,
        "surroundingCode": "My/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "121aee9222cf5695e30f75c8571ebbe2c535ee0503c666709ed6a6f2ec6b244d"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 86,
      "offset": 21,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 36,
        "surroundingCode": "  TestA\n  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "caca585562e9048218f0602f96ef368ae1bc9650e9bd034d7a56870c8c2b5ebf"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 87,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 85,
        "length": 2,
        "offset": 66,
        "surroundingCode": "  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMyInstantiation/ValueParamTest\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "696715e74bf59df7310cc7e4ded8eb3a9c68b10931f2efd35c5ab5d0e30975c4"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 88,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 86,
        "length": 2,
        "offset": 66,
        "surroundingCode": "My/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "a463f1c2c4ebc24f56ba5395e735c8d581eb968782a6022e744ec5a0032c0748"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 90,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 88,
        "length": 2,
        "offset": 41,
        "surroundingCode": "  TestB\nMyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "a970fcba9898f42e2d7beecd2e06ca936e1de23ed906d90569e1cea1d8432c43"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 90,
      "offset": 10,
      "length": 2,
      "code": {
        "startLine": 88,
        "length": 2,
        "offset": 50,
        "surroundingCode": "  TestB\nMyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "2abe5586af595654d8a9b99bde0eafd6c51c396b4ac92f16b7a49f289ddd8afc"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 91,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 89,
        "length": 2,
        "offset": 70,
        "surroundingCode": "MyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "b1057c38df0a98212bcd9a847c9921b7b3241d936c2eb186cb61b54298ff17d8"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 91,
      "offset": 10,
      "length": 2,
      "code": {
        "startLine": 89,
        "length": 2,
        "offset": 79,
        "surroundingCode": "MyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "c32ca77ddd11c8bd9e03dbbcc02ca25c5037d5879bc0a93996c77b4ea1530848"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 92,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 90,
        "length": 2,
        "offset": 77,
        "surroundingCode": "  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "771e4fac5284654b38c34a677dfb3485da1fb63c2f54b98d56edbcf7444ac2f1"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 92,
      "offset": 10,
      "length": 2,
      "code": {
        "startLine": 90,
        "length": 2,
        "offset": 86,
        "surroundingCode": "  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "71836da4d7b920783d9d41562f4a26a3e1d4510b25fe2257dd3d492dd0fb0bbb"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 93,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 91,
        "length": 2,
        "offset": 91,
        "surroundingCode": "  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "2cae3a98aab1f5448a8d1a5e594801d2d78d58ed2f24c221003b0c542003c3f5"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 93,
      "offset": 10,
      "length": 2,
      "code": {
        "startLine": 91,
        "length": 2,
        "offset": 100,
        "surroundingCode": "  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "fc2d336a1e326ef2a0faa4adb8ee46c26f52e67c234810cc65949f74c4cc7437"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 94,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 92,
        "length": 2,
        "offset": 88,
        "surroundingCode": "  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "185611ab38f98b9eb08b41725107acc66126403345c154a7c9c1c410c3736632"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 94,
      "offset": 10,
      "length": 2,
      "code": {
        "startLine": 92,
        "length": 2,
        "offset": 97,
        "surroundingCode": "  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "086d6fbe6c114c97a47e2c854a26357365a3b2fdfb19e8a63472401872eaab84"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 95,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 93,
        "length": 2,
        "offset": 77,
        "surroundingCode": "  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\"\n)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "c5c436e9c9a272a3a1ae042bb8efa6f29c09fae52634f18c1e3a71a9e07ebb42"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 95,
      "offset": 10,
      "length": 2,
      "code": {
        "startLine": 93,
        "length": 2,
        "offset": 86,
        "surroundingCode": "  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\"\n)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "390d679fab56a33b38b0af8379aacfa31db024daec2fe8132be9a9d9ceb6c222"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 103,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 101,
        "length": 2,
        "offset": 67,
        "surroundingCode": "EXPECTED_OUTPUT_FILTER_FOO_RE = re.compile(\n    r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "2f317a95e7c65a3717dcaf92c4425d27c25d25f317a039fdc933bbceb4b1a7ff"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 105,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 103,
        "length": 2,
        "offset": 14,
        "surroundingCode": "  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "e2f84d341f3bf166a9251eb436d73382c5afa0089fec0628bc2b59dd8e6e1b0c"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 106,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 104,
        "length": 2,
        "offset": 13,
        "surroundingCode": "Foo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nFooBar\\."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "f2757b4fc591a9b8e7b3c54b367ab1d68bd32376ea413e411102d7eb413c6a27"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 107,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 105,
        "length": 2,
        "offset": 14,
        "surroundingCode": "  Bar1\n  Bar2\n  DISABLED_Bar3\nFooBar\\.\n  Baz"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "cc265fecfbe01220f33998957ccb5c225f11c55bb9998a644177431a9603d5e3"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 109,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 107,
        "length": 2,
        "offset": 25,
        "surroundingCode": "  DISABLED_Bar3\nFooBar\\.\n  Baz\nFooTest\\.\n  Test1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "27e3fde64f9f1914d6e260fb86fe60def4df141ae71ac41aeeca9ae08b6752c0"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 111,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 109,
        "length": 2,
        "offset": 16,
        "surroundingCode": "  Baz\nFooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "172f422897eb7c51e9702f7fc99ad86801d656390a204ff02e7d4654ee8b8e67"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 112,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 110,
        "length": 2,
        "offset": 18,
        "surroundingCode": "FooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "e8344415e29adec352dd0befecc2e439a1e7ae93b23f02e1acf20053b5b17c99"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "RegExp",
      "line": 113,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 111,
        "length": 2,
        "offset": 25,
        "surroundingCode": "  Test1\n  DISABLED_Test2\n  Test3\n\"\"\"\n)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "2d50c4d1aeb0a5a9705941a232f860838abb48e33c001d2c110bdf18cb118a08"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "6 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 200,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 198,
        "length": 6,
        "offset": 41,
        "surroundingCode": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "4e66b18eb6d5942171a95dfec7147fe4daf59584441d991cb0e85b63cbf2ee28"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 200,
      "offset": 41,
      "length": 2,
      "code": {
        "startLine": 198,
        "length": 2,
        "offset": 65,
        "surroundingCode": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "c254e53a89ff18b79814e69004f36211ae5b8dbaffdee6a736fb9b683498f769"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "2 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 200,
      "offset": 49,
      "length": 2,
      "code": {
        "startLine": 198,
        "length": 2,
        "offset": 73,
        "surroundingCode": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "90603b97a8f11f4df24d94ce0e872b384cdefeda9dafbfe5905fe9031ff24a52"
},{
  "tool": "Code Inspection",
  "category": "RegExp",
  "type": "Consecutive spaces",
  "tags": [
    "RegExp"
  ],
  "severity": "High",
  "comment": "7 consecutive spaces in RegExp",
  "detailsInfo": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "RegExp",
      "line": 200,
      "offset": 52,
      "length": 7,
      "code": {
        "startLine": 198,
        "length": 7,
        "offset": 76,
        "surroundingCode": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "RegExpRepeatedSpace",
    "baselineState": "new"
  },
  "hash": "718d95722fab9d91712aeed8becb6b22b2d762cb0ff0728f165351d837c32329"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Accessing a protected member of a class or a module",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "Access to a protected member _exit of a module",
  "detailsInfo": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 188,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 186,
        "length": 8,
        "offset": 106,
        "surroundingCode": "    # Suppress the error \"googletest was imported but a call to its main()\n    # was never detected.\"\n    os._exit(0)\n  else:\n    gmock_test_utils.Main()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyProtectedMemberInspection",
    "baselineState": "new"
  },
  "hash": "9f2c672f97f92b4ab55a80c95d3ef401e783ad175f593f9ef522aaa6363ab440"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 59,
      "offset": 3,
      "length": 69,
      "code": {
        "startLine": 57,
        "length": 69,
        "offset": 28,
        "surroundingCode": "\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "95ef6b7be1336c7625ba106565dbf464f61abaef6c36f745bfe60acc01599359"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 75,
        "surroundingCode": "  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2be4d8f77e6156154afc3677386c4429bf735142c96ba90d7d45eb4fe41ada3b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 65,
      "offset": 3,
      "length": 76,
      "code": {
        "startLine": 63,
        "length": 76,
        "offset": 44,
        "surroundingCode": "\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n\n  output = re.sub(r'.*gtest_main.*\\n', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "18a8d5ca33b23e6c9a9f4bf4a2bf4f45656612ce75895edf7a02a3b043c4c3d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 67,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 82,
        "surroundingCode": "  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a6e1c7f44e1feba7343c88a8b2c1098d1737beef6b5c81190506dc6de1be8a21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 68,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 66,
        "length": 6,
        "offset": 54,
        "surroundingCode": "\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "87bc3d4e979f3a22cd8d15d8ab3cfee717f201081af2726019766b731a3bb1c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 69,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 105,
        "surroundingCode": "  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "037fc4788a9ef8099c8d33168a529738edd1e820c596497b50531329a307ae9c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 70,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 68,
        "length": 6,
        "offset": 115,
        "surroundingCode": "  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "316e257dda6443d2dd92c56816504def0efdba93f105173d6ba18833f1f5037c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 71,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 69,
        "length": 6,
        "offset": 123,
        "surroundingCode": "  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "073c51f08476ba86140262b0c5ea0513958a3a3a5fb20281710c8824856c9316"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 72,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 70,
        "length": 6,
        "offset": 114,
        "surroundingCode": "  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c3e02523c1a40235a167c41eeabde847f44c45551eb2504df3f425e3daf0969b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 76,
      "offset": 3,
      "length": 70,
      "code": {
        "startLine": 74,
        "length": 70,
        "offset": 32,
        "surroundingCode": "\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a186b679e86eb4f8362d0d39cc2cf886466f7fc0d8b77e47f13f2390c4188b87"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 88,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 86,
        "length": 6,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  return re.sub(r'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:', 'FILE:#:', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "329994af819809e0f448e9781edc9c8a04112b9edeeb7983ed06c9c67f388309"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 92,
      "offset": 3,
      "length": 77,
      "code": {
        "startLine": 90,
        "length": 77,
        "offset": 37,
        "surroundingCode": "\ndef NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n\n  return re.sub(r' error: ', ' Failure\\n', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f72c97bd7045bd6cd76852575e03ab60f7db66e4727eeeab2aea0f7faad54182"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 94,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 92,
        "length": 6,
        "offset": 83,
        "surroundingCode": "  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n\n  return re.sub(r' error: ', ' Failure\\n', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f844f881593d6912a760194f9354c5c30a674aa22d41d6dd7051562e71cbec72"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 98,
      "offset": 3,
      "length": 52,
      "code": {
        "startLine": 96,
        "length": 52,
        "offset": 38,
        "surroundingCode": "\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n\n  return re.sub(r'@\\w+', '@0x#', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "52b2e47820e181f041dec0899f842458dbb4425046a817f4d151c4927f6cb11f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 100,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 98,
        "length": 6,
        "offset": 58,
        "surroundingCode": "  \"\"\"Removes memory addresses from the test output.\"\"\"\n\n  return re.sub(r'@\\w+', '@0x#', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "39fb73c9af18c2ae0e45e999de64f84040b1343faf96c505e53d46b964352faf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 104,
      "offset": 3,
      "length": 73,
      "code": {
        "startLine": 102,
        "length": 73,
        "offset": 45,
        "surroundingCode": "\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n\n  return re.sub(r'\\(used in test .+\\) ', '', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0aabd6f7efa586b759cb6c1c6524572a293df247ae32fe1f2a6d4484cccf7668"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 106,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 104,
        "length": 6,
        "offset": 79,
        "surroundingCode": "  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n\n  return re.sub(r'\\(used in test .+\\) ', '', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "463780e891021efd0b8898dae04ed673ffb857904af6af7b5f31c76e22d5ef8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 110,
      "offset": 3,
      "length": 58,
      "code": {
        "startLine": 108,
        "length": 58,
        "offset": 30,
        "surroundingCode": "\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n\n  # findall() returns a list of all matches of the regex in output."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2685b0928e541c617870a4b4a090df89ed5dd99b76f5910f450e131e7cdf5dd2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 112,
      "offset": 3,
      "length": 65,
      "code": {
        "startLine": 110,
        "length": 65,
        "offset": 64,
        "surroundingCode": "  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dbd954c621296936a396ddae5d2a13b18684b0d64b099e399f2ba05c3e427764"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 113,
      "offset": 3,
      "length": 64,
      "code": {
        "startLine": 111,
        "length": 64,
        "offset": 71,
        "surroundingCode": "\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f4208a707515ddf832b57fbab3f10ec4a451a2c5f477b05698b05b5fe9eff481"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 114,
      "offset": 3,
      "length": 34,
      "code": {
        "startLine": 112,
        "length": 34,
        "offset": 137,
        "surroundingCode": "  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2361909eb85cf46ec286366a26f5d0df9da225daa7f6bed3932ca036d369f57d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 115,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 106,
        "surroundingCode": "  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fbff56500528ae98c3583be4fa41fcd6f78113961c9a08048db9303e1469de1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 119,
      "offset": 3,
      "length": 47,
      "code": {
        "startLine": 117,
        "length": 47,
        "offset": 49,
        "surroundingCode": "\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b5d0fa9bb22c877e172a00c09a92edc825f87c9f7ba5ab4385267152c507463a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 129,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 127,
        "length": 6,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "616acf935658d64affc60ca1c01b428a75df26266821a7534ed0f7c8105ebee6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 130,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 128,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9118a2d9d07a67f97efdcacf70654c9f96ae69c393a3994517d2fd5e7a40a9d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 131,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 129,
        "length": 6,
        "offset": 85,
        "surroundingCode": "  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "eff19bf5a6cf008083419a90f75cba20bed7c8f60f08d65a6863a8351677bbb7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 132,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 130,
        "length": 6,
        "offset": 89,
        "surroundingCode": "  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "993b004f5d76a11f8bb57d22a051f9cc002976a686600614f2882e2bb620a082"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 133,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 131,
        "length": 6,
        "offset": 77,
        "surroundingCode": "  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "191fb3bf10287a92d2d740c5168a319422418be7666f0bdb42d9c853ce6cb9cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 134,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 132,
        "length": 6,
        "offset": 78,
        "surroundingCode": "  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "807432a60086e75a0767f0ea454231619bc0b2043401e8598ddd51aa64041552"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 138,
      "offset": 3,
      "length": 74,
      "code": {
        "startLine": 136,
        "length": 74,
        "offset": 35,
        "surroundingCode": "\ndef GetShellCommandOutput(cmd):\n  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n\n  return gmock_test_utils.Subprocess(cmd, capture_stderr=False).output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0440d5083ed98ff1b1695069a9d74b27de4f85a8165d23add1ef4db62a7be1fd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 140,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 138,
        "length": 6,
        "offset": 80,
        "surroundingCode": "  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n\n  return gmock_test_utils.Subprocess(cmd, capture_stderr=False).output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5d358b2b26781df47d037c3b51c26e9b150ec8c73aa62c2b8fedcebd7f748cb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 144,
      "offset": 3,
      "length": 78,
      "code": {
        "startLine": 142,
        "length": 78,
        "offset": 53,
        "surroundingCode": "\ndef GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2a6bdb9c8ad2040a8b838540da03eec49d4175f89c042f3f2e9efe32ff507172"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 150,
      "offset": 3,
      "length": 40,
      "code": {
        "startLine": 148,
        "length": 40,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4a3e312f5523aa0de5f5787527a7e921e0f75ec6db4f4646749ec1568d2cf6f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 151,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 149,
        "length": 2,
        "offset": 46,
        "surroundingCode": "\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5a86e3bda194423811f297866651edf466c53a66b11aa4165cef3f512175727f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 152,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 150,
        "length": 6,
        "offset": 90,
        "surroundingCode": "  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "92ee179ae0349d795ba85e32e4284fc3d5d94d551eb42f22aef23926c0102ea9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 157,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 155,
        "length": 3,
        "offset": 53,
        "surroundingCode": "class GMockOutputTest(gmock_test_utils.TestCase):\n\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b08c46e1332724d900d6b8af3406b50f5613835d83f482938f7ce0f021031370"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 181,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 179,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  if sys.argv[1:] == [GENGOLDEN_FLAG]:\n    (output, _) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'wb')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "428c6c91bdb552e02aa597bc6affe2d83a086c6675f11e648b06a04a24a83c1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 189,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 187,
        "length": 4,
        "offset": 45,
        "surroundingCode": "    # was never detected.\"\n    os._exit(0)\n  else:\n    gmock_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "60aa9bee8b7ce3a11016ca036fecea117a0ec27c1b03b2025af638c87cf2323b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 54,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 52,
        "length": 3,
        "offset": 51,
        "surroundingCode": "class GMockLeakTest(gmock_test_utils.TestCase):\n\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "94101050ddee0a5b16e879160a404ace3048c5951e6195542706a9594db8c4f7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 65,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 63,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testDoesNotCatchLeakedMockWhenDisabled(self):\n    self.assertEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dc0251ce9158ad7e9173fcc7212edbf83cb477aa30badd6da5b3d53746a4f502"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 80,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 78,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesLeakedMockWhenEnabled(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "43c0135d97cc7f4139ee33b6f989f38c999eee08d128551dc9cccda82146376d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 94,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 92,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesLeakedMockWhenEnabledWithExplictFlagValue(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "521f122a98613190e65db1e5c2ef91e0a8e90a011f0e46c9a1910ba1d9acd8a8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 103,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 101,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesMultipleLeakedMocks(self):\n    self.assertNotEqual(\n        0,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a0242dcaae0152ad7c20befa916cc6e7dcfcc556c5298b01971cae8dbdad99be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_leak_test.py",
      "language": "Python",
      "line": 113,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 111,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gmock_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4dbd0d2db14aaada9d85c997721c8a362bffedfcd970d489d07f01eab01ea2aa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 39,
      "offset": 3,
      "length": 73,
      "code": {
        "startLine": 37,
        "length": 73,
        "offset": 23,
        "surroundingCode": "\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return gtest_test_utils.GetSourceDir()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1453fa5bc533e9e00c27961e14c73b650a1088fe97d3c65988faf0a9cb14d80b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 41,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 79,
        "surroundingCode": "  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return gtest_test_utils.GetSourceDir()\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7f09b26b51c6ef21103215a7312f883e10c54a9f8973f5793f0c809ec0188382"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 45,
      "offset": 3,
      "length": 63,
      "code": {
        "startLine": 43,
        "length": 63,
        "offset": 47,
        "surroundingCode": "\ndef GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n\n  The function will print a message and abort the program if the resulting file"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a575e6ac43cb3b2bab76779e399c32a365f8904fe609e9b357119699a303d7e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 57,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 55,
        "length": 6,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  return gtest_test_utils.GetTestExecutablePath(executable_name)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b8abef3a695e8f2d5cdce26445b25c8edacf4a731f54e4477c678e251393a6f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 65,
      "code": {
        "startLine": 59,
        "length": 65,
        "offset": 33,
        "surroundingCode": "\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f7c7bc485d8785ef58c77b9fde0f0560d98fd8cc654ccd8c8f5aa117cc004502"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 67,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 65,
        "length": 2,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a59e8f79031c4a1a1d2357dadec97ac9680dfeff72a1bbd4aa3384cade848e56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 71,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 69,
        "length": 4,
        "offset": 62,
        "surroundingCode": "    # the argument to exit() directly.\n    return exit_code\n  else:\n    # On Unix, os.WEXITSTATUS() must be used to extract the exit status\n    # from the result of os.system()."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1c3aedc20bc0466c68978acefed670c741630d1f77c72d28f82da46f254739df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 75,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 73,
        "length": 6,
        "offset": 76,
        "surroundingCode": "    # from the result of os.system().\n    if os.WIFEXITED(exit_code):\n      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e536aa7daf6655691d5655ad979f5de4def5d798cf9e6d0c084a1ac9e29ff488"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 77,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 75,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2a535b3da920de11bdf4ee6f4449af4b412f38f94b3de40199f5d6f9a8486797"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 89,
      "offset": 3,
      "length": 25,
      "code": {
        "startLine": 87,
        "length": 25,
        "offset": 15,
        "surroundingCode": "\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n\n  gtest_test_utils.Main()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3f2124321e78302d4a75e63cf6aed19d5521af28da65e48af422ac6128dfd7cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_test_utils.py",
      "language": "Python",
      "line": 91,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 89,
        "length": 16,
        "offset": 31,
        "surroundingCode": "  \"\"\"Runs the unit test.\"\"\"\n\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "30f70ac810ef879de8c3bcb9eab4e7a7b440f885d3eac7d637afc9074774675c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 117,
      "offset": 3,
      "length": 60,
      "code": {
        "startLine": 115,
        "length": 60,
        "offset": 59,
        "surroundingCode": "\nclass GTestJsonOutFilesTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  def setUp(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0ed5843ef99c69a1a04f929fed9074009664541408df93b70720891cd43f650d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 119,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 117,
        "length": 3,
        "offset": 66,
        "surroundingCode": "  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6336aa506f2d5d8c50a279141f25937c2b401a18fe3c9a216562235fae97ef99"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 128,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 126,
        "length": 3,
        "offset": 32,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2e344860053a45d64d0cb229b327f6683e0a417765788c786714c7558e28ed45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 131,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 129,
        "length": 3,
        "offset": 32,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "df22dbcb8da02a8fe389d560a6539244ff2bc6b3b139f2901a5857b0f72413cd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 133,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 131,
        "length": 2,
        "offset": 46,
        "surroundingCode": "  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))\n    except os.error:\n      pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c8228be190db153e14a3359b1595698256a594f5dd5b5e0a0c4edc04b0145817"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 135,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 133,
        "length": 4,
        "offset": 106,
        "surroundingCode": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))\n    except os.error:\n      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + '.json'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "aeac61fdd8ba87a97eafd40de046aa2d60c04be191e5aa47f18d8d3717625377"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 137,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 135,
        "length": 2,
        "offset": 26,
        "surroundingCode": "      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + '.json'))\n    except os.error:\n      pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e67b3bcaa56eb7b4e739528fd6ee3a0ce5e4d0cded5206cd5bceb657f1508085"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 139,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 137,
        "length": 4,
        "offset": 106,
        "surroundingCode": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + '.json'))\n    except os.error:\n      pass\n    try:\n      os.rmdir(self.output_dir_)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8cdd3c59431665ad04fb1d606b985b079b6facb9b22601fabed56e8b4aed812b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 141,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 139,
        "length": 2,
        "offset": 26,
        "surroundingCode": "      pass\n    try:\n      os.rmdir(self.output_dir_)\n    except os.error:\n      pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "632464a0d6b50d475aabc06d7303da3590bcc048e765dd2064ba7ef907caa327"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 143,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 141,
        "length": 4,
        "offset": 60,
        "surroundingCode": "      os.rmdir(self.output_dir_)\n    except os.error:\n      pass\n\n  def testOutfile1(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1e7d9d7ea69dfe94362f37898c955dad1cf1eb7b683a747933a47880b3cf179d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 145,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 143,
        "length": 3,
        "offset": 14,
        "surroundingCode": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e57a0af36b8e61e9a3791d5e8e988eba2cc3f70de1bf9b135aaa644d34f7c45a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 148,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 146,
        "length": 3,
        "offset": 58,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4e857aff6626be1e7f49ce3bf8d77eeee832e382aede242b74389439f16818d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 151,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 149,
        "length": 3,
        "offset": 58,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n\n  def _TestOutFile(self, test_name, expected):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, '--gtest_output=json:%s' % self.output_dir_]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3e8278cac9adb46e425711f9f02d062edb8eb9431fef67f7f444cdc23da46bdc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 170,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 168,
        "length": 4,
        "offset": 44,
        "surroundingCode": "\n    if os.path.isfile(output_file1):\n      with open(output_file1) as f:\n        actual = json.load(f)\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6f0778cdaa5831cbcda1bb1ca9b7c06aea58d049a5f4ca34fe930b3a1ddfbf40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 173,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 171,
        "length": 4,
        "offset": 46,
        "surroundingCode": "        actual = json.load(f)\n    else:\n      with open(output_file2) as f:\n        actual = json.load(f)\n    self.assertEqual(expected, gtest_json_test_utils.normalize(actual))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f00cb228247d12eddb21820f48f917c25732e379983b9cc760eff69ccbcb8f6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 179,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 177,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '0'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "31d2fdd27fb7455ebff755241cbef7849d07e058b63634632de0b75512ae1460"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
      "language": "Python",
      "line": 180,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 178,
        "length": 16,
        "offset": 75,
        "surroundingCode": "if __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '0'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1969766edf8a9c614eb50fab2eb174e39e79aed78ce69891fa654d724c33d516"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 100,
      "offset": 3,
      "length": 45,
      "code": {
        "startLine": 98,
        "length": 45,
        "offset": 26,
        "surroundingCode": "\ndef RunWithFlag(flag):\n  \"\"\"Runs gtest_help_test_ with the given flag.\n\n  Returns:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1b4e6c1d96895e9677769dc0026a4d8d5c6e3ae01c3d0232fd4d71e1f03fa93b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 108,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 106,
        "length": 2,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  if flag is None:\n    command = [PROGRAM_PATH]\n  else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6527ddf66ad6dbb21e725f90b4828de67731bfba917fc6a5dc580e47e627c53c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 110,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 108,
        "length": 4,
        "offset": 50,
        "surroundingCode": "  if flag is None:\n    command = [PROGRAM_PATH]\n  else:\n    command = [PROGRAM_PATH, flag]\n  child = gtest_test_utils.Subprocess(command)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a018e0432c4f4852b57eca06fc3706e550bbede52947e922fb7226c6d13e1091"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 112,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 110,
        "length": 5,
        "offset": 45,
        "surroundingCode": "  else:\n    command = [PROGRAM_PATH, flag]\n  child = gtest_test_utils.Subprocess(command)\n  return child.exit_code, child.output\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4f39f4dd47c86acfcc941d0d71e34c25f5355e2617a52e276510fe9167a75532"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 113,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 111,
        "length": 6,
        "offset": 84,
        "surroundingCode": "    command = [PROGRAM_PATH, flag]\n  child = gtest_test_utils.Subprocess(command)\n  return child.exit_code, child.output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "384929efee56e7813170db3aad53dc34706af1138e8cda10084820bc5dff8c14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 117,
      "offset": 3,
      "length": 53,
      "code": {
        "startLine": 115,
        "length": 53,
        "offset": 51,
        "surroundingCode": "\nclass GTestHelpTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n\n  def TestHelpFlag(self, flag):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f4c79be6208f909e067f4b9db8cf7dc10bc856824004206fbac2e65c74fc5370"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 119,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 117,
        "length": 3,
        "offset": 59,
        "surroundingCode": "  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n\n  def TestHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when help flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6e49928d33f902ab7bfd652ccad0691ed1ad9a6b214d3969594827225d6eb56c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 131,
      "offset": 7,
      "length": 64,
      "code": {
        "startLine": 129,
        "length": 64,
        "offset": 71,
        "surroundingCode": "    exit_code, output = RunWithFlag(flag)\n    if HAS_ABSL_FLAGS:\n      # The Abseil flags library prints the ProgramUsageMessage() with\n      # --help and returns 1.\n      self.assertEqual(1, exit_code)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0786ad888f7df2d5585242ead724f078d5eeb1ec03b749c10025921709aa313e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 132,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 130,
        "length": 23,
        "offset": 100,
        "surroundingCode": "    if HAS_ABSL_FLAGS:\n      # The Abseil flags library prints the ProgramUsageMessage() with\n      # --help and returns 1.\n      self.assertEqual(1, exit_code)\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "90cef5801176546bdca4543566b23f0666e468a5dab7777989a4b62353a4db54"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 133,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 131,
        "length": 4,
        "offset": 107,
        "surroundingCode": "      # The Abseil flags library prints the ProgramUsageMessage() with\n      # --help and returns 1.\n      self.assertEqual(1, exit_code)\n    else:\n      self.assertEqual(0, exit_code)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b99c1d993e188dc7b839e3ca9d5d4c304faa5c76bb8fb6f7db4caa014cfad553"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 135,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 133,
        "length": 4,
        "offset": 53,
        "surroundingCode": "      self.assertEqual(1, exit_code)\n    else:\n      self.assertEqual(0, exit_code)\n\n    self.assertTrue(HELP_REGEX.search(output), output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dd1d0f367813526e8c6cadbf6dcda8b19e742c7fd619d707c6460dab5fc985ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 140,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 138,
        "length": 4,
        "offset": 83,
        "surroundingCode": "\n    if IS_DARWIN or IS_LINUX or IS_GNUHURD or IS_GNUKFREEBSD or IS_OPENBSD:\n      self.assertIn(STREAM_RESULT_TO_FLAG, output)\n    else:\n      self.assertNotIn(STREAM_RESULT_TO_FLAG, output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "07c8d22cf735904ce737c990a1d18eb213e1c37fb1d2bff9c3b69842b044740f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 142,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 140,
        "length": 4,
        "offset": 67,
        "surroundingCode": "      self.assertIn(STREAM_RESULT_TO_FLAG, output)\n    else:\n      self.assertNotIn(STREAM_RESULT_TO_FLAG, output)\n\n    if SUPPORTS_DEATH_TESTS and not IS_WINDOWS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "084232e0a0145f08b465090fd79b7801c738d376bb09e33ee9af30e9c2d8f082"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 145,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 143,
        "length": 4,
        "offset": 55,
        "surroundingCode": "\n    if SUPPORTS_DEATH_TESTS and not IS_WINDOWS:\n      self.assertIn(DEATH_TEST_STYLE_FLAG, output)\n    else:\n      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "11da80f399375cb431504ffac54c135f21cbde5fe62b7d4e3e408dc435081958"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 147,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 145,
        "length": 4,
        "offset": 67,
        "surroundingCode": "      self.assertIn(DEATH_TEST_STYLE_FLAG, output)\n    else:\n      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)\n\n  def TestUnknownFlagWithAbseil(self, flag):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "19609d164e0f24de460380eb63b02af33fd1f7199693fc466325127713d261aa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 149,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 147,
        "length": 3,
        "offset": 57,
        "surroundingCode": "      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)\n\n  def TestUnknownFlagWithAbseil(self, flag):\n    \"\"\"Verifies correct behavior when an unknown flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e88ce23fe724c452ba3ad80175c449a43e23b79a1c6850bc83013c9488cbef8c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 162,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 160,
        "length": 3,
        "offset": 65,
        "surroundingCode": "    self.assertIn('ERROR: Unknown command line flag', output)\n\n  def TestNonHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "efec92af1f25be3cfa3541c6d28537c6a11f1ab6e49bd06a12a125fce87e8baa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 176,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 174,
        "length": 3,
        "offset": 59,
        "surroundingCode": "    self.assertFalse(HELP_REGEX.search(output), output)\n\n  def testPrintsHelpWithFullFlag(self):\n    self.TestHelpFlag('--help')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b800cfa1e9e5b8e7af028e01fddc0d454d67362290d8d6b0876799bda23d2bcd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 179,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 177,
        "length": 3,
        "offset": 35,
        "surroundingCode": "    self.TestHelpFlag('--help')\n\n  def testRunsTestsWithoutHelpFlag(self):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4a2b440ef7462f729b2e549140bdaa0eaf35b791798c2ccd7a1439c8ba5a1ce6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 188,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 186,
        "length": 3,
        "offset": 34,
        "surroundingCode": "    self.TestNonHelpFlag(None)\n\n  def testRunsTestsWithGtestInternalFlag(self):\n    \"\"\"Verifies correct behavior when internal testing flag is specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "30885125deea3e90f953eac45b3addb3ff2a12551a57519d2867ba7da45faf28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 199,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 197,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  if '--has_absl_flags' in sys.argv:\n    sys.argv.remove('--has_absl_flags')\n  gtest_test_utils.Main()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "26931724ecd0b6ae4369119719f5550917c9f0d780e014a8d4327d33ba3328f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_help_test.py",
      "language": "Python",
      "line": 201,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 199,
        "length": 16,
        "offset": 79,
        "surroundingCode": "  if '--has_absl_flags' in sys.argv:\n    sys.argv.remove('--has_absl_flags')\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d21e8c74a51f2b3f5df66aa79efbc2df5c624daf8badbe8f02538b440d709746"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 55,
      "offset": 3,
      "length": 20,
      "code": {
        "startLine": 53,
        "length": 20,
        "offset": 29,
        "surroundingCode": "\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "341538ae66aac5632216fb32b5b4af0c5afb88188d23640fce18ce271017449e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 57,
      "offset": 3,
      "length": 20,
      "code": {
        "startLine": 55,
        "length": 20,
        "offset": 53,
        "surroundingCode": "  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'\n\nEXPECTED_NON_EMPTY = {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ece8e43a7da28c4bc891985c5a1f56635d45581ed54dd23ba1978861d400a3d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 623,
      "offset": 3,
      "length": 60,
      "code": {
        "startLine": 621,
        "length": 60,
        "offset": 61,
        "surroundingCode": "\nclass GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c603938a32c9f77a36ee6d79661f0c5b1435332efaf55ee9c6d56d9021620490"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 625,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 623,
        "length": 71,
        "offset": 66,
        "surroundingCode": "  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "038c360e07660a39c8a1f5ffef616a0cacca4a7a8918dc84fd54739cfd84c0d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 626,
      "offset": 3,
      "length": 58,
      "code": {
        "startLine": 624,
        "length": 58,
        "offset": 77,
        "surroundingCode": "\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4eaaccf79fb6a2d58977ab94d8073bf148f68551abdc875b6af75aa2cc69fd78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 627,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 625,
        "length": 2,
        "offset": 137,
        "surroundingCode": "  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyJsonOutput(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8b6c1ef2da11aff3e06e03dd1dc652e079b71a85391db1e792ee1498da995b2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 630,
      "offset": 7,
      "length": 71,
      "code": {
        "startLine": 628,
        "length": 71,
        "offset": 45,
        "surroundingCode": "\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.\n\n      Runs a test program that generates a non-empty JSON output, and"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "49af1058fbb86c601b7d5a63f5d90a9fb1cc86b07623e56c7918672c7a8428b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 635,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 633,
        "length": 4,
        "offset": 62,
        "surroundingCode": "      tests that the JSON output is expected.\n      \"\"\"\n      self._TestJsonOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY, 1)\n\n  def testNoTestJsonOutput(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "56b680320dc00847605aeac38b035c16ee1875bc7fe15f204037793500f0980c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 637,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 635,
        "length": 3,
        "offset": 73,
        "surroundingCode": "      self._TestJsonOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY, 1)\n\n  def testNoTestJsonOutput(self):\n    \"\"\"Verifies JSON output for a Google Test binary without actual tests.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a2d5fff18703035a685ff5b1f4012b25b74effbf36d777ed914f77009bf08aea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 646,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 644,
        "length": 3,
        "offset": 75,
        "surroundingCode": "    self._TestJsonOutput('gtest_no_test_unittest', EXPECTED_NO_TEST, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the JSON output is valid.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "28995d14d5c8d14566ab6b239c1ffe206268ce0f6d30eecae2040465bc27dd14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 677,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 675,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testDefaultOutputFile(self):\n    \"\"\"Verifies the default output file name.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "941f80f3599fd8f4c6aaea214fe93c9151e580fa7bdd5e3cd6588445d1819e55"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 690,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 688,
        "length": 2,
        "offset": 21,
        "surroundingCode": "    )\n    try:\n      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "06f5fad1cb9a4a042b74046de1c0cf9ac791107a01bd2b5443071adf73ade837"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 692,
      "offset": 7,
      "length": 1,
      "code": {
        "startLine": 690,
        "length": 1,
        "offset": 55,
        "surroundingCode": "      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "41cc82cb1efc99035d87713eae8991df5987f8116c0faae04b841f07004d840f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 693,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 691,
        "length": 2,
        "offset": 54,
        "surroundingCode": "    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cbe660f23e4fbfb51f35f82c5eda30c583d274eb1e2012387750f2a20d52be22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 704,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 702,
        "length": 3,
        "offset": 52,
        "surroundingCode": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedJsonOutput(self):\n    \"\"\"Verifies that no JSON output is generated.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "75e1a8c8483a87a6eac08afd97f9eb14692561da53d1dcadc5235175c9b9c694"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 715,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 713,
        "length": 2,
        "offset": 46,
        "surroundingCode": "    )\n    if os.path.isfile(json_path):\n      os.remove(json_path)\n\n    command = ["
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "242b50e84d8be4b30c4d93ad555fb0dc5acdf6bced28efd24164014d692090bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 724,
      "offset": 7,
      "length": 63,
      "code": {
        "startLine": 722,
        "length": 63,
        "offset": 82,
        "surroundingCode": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "68ce5e6ed3ba60fe346ba352b68d3ca69c5d903e7b1117fd96305df0574ac2af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 725,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 723,
        "length": 4,
        "offset": 107,
        "surroundingCode": "    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "16fecb397468cead8e3d13ddb92750ed75beb9bf14d6c0642b9bce4031e50154"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 730,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 728,
        "length": 4,
        "offset": 24,
        "surroundingCode": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cb38faaaf9b1f47f33385dc18b151342a95be7945f3bbdd896c08baa7992cca5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 731,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 729,
        "length": 4,
        "offset": 48,
        "surroundingCode": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b4d41edb40bfe6d0dce19276bc005a0370da324cd421ee9f5282d1f550b91ded"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 740,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 738,
        "length": 3,
        "offset": 54,
        "surroundingCode": "    self.assertTrue(not os.path.isfile(json_path))\n\n  def testFilteredTestJsonOutput(self):\n    \"\"\"Verifies JSON output when a filter is applied.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "df5839b5616d8ea46ac463426952105e90f94724fb0dd445591eeb639c7ac15d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 754,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 752,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def _GetJsonOutput(self, gtest_prog_name, extra_args, expected_exit_code):\n    \"\"\"Returns the JSON output generated by running the program gtest_prog_name.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "83d4f1b28ab9aee2870215a4f424c1587ad99d2c97eed50cc754749775a72d46"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 775,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 773,
        "length": 4,
        "offset": 82,
        "surroundingCode": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      self.assertTrue(\n          False, '%s was killed by signal %d' % (gtest_prog_name, p.signal)\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2e7944a223122779de4beffdfdbbabef16196d565ddf7152c713f2471827f477"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 779,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 777,
        "length": 4,
        "offset": 24,
        "surroundingCode": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c4ec0c36de35251e5cbc539f875de7ee4200c4102017de2878dd53ce0c8dba56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 780,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 778,
        "length": 4,
        "offset": 48,
        "surroundingCode": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,\n          p.exit_code,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "628d8f8b9c2c8b09c7b9dcaf1785292b3afe978ee55c5d3fa22f7324dae0b609"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 788,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 786,
        "length": 6,
        "offset": 45,
        "surroundingCode": "      )\n    with open(json_path) as f:\n      actual = json.load(f)\n    return actual\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "52ddf72eac9405586fa52a603dfa656a2e807a0fa4521401f6cddd24688bf3c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 791,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 789,
        "length": 3,
        "offset": 21,
        "surroundingCode": "    return actual\n\n  def _TestJsonOutput(\n      self, gtest_prog_name, expected, expected_exit_code, extra_args=None\n  ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e4ea00e938d07b62c309c809e092774fbd2095e9c70ad6fd9782a9856967748d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 815,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 813,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  if NO_STACKTRACE_SUPPORT_FLAG in sys.argv:\n    # unittest.main() can't handle unknown flags\n    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7e4b40c5837564ab6dbb452946aaa98d10c7b77e00d4baedde80d9d4fe9a0419"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 819,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 817,
        "length": 2,
        "offset": 51,
        "surroundingCode": "    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5c4902241aee9a19198ab77635db477281f7bebfa9040b5fe5dc4424b5e6fe1a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
      "language": "Python",
      "line": 820,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 818,
        "length": 16,
        "offset": 49,
        "surroundingCode": "\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b1ea3ef247f01447d6ef9d1f2d2c4e00c6175f95388039f0f40939d1d94fc852"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (164 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 46,
      "offset": 121,
      "length": 44,
      "code": {
        "startLine": 44,
        "length": 44,
        "offset": 334,
        "surroundingCode": "<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" file=\"gtest_xml_outfile1_test_.cc\" line=\"41\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1adb7a9b0f52c053135b439e2abcf19be38efeb10b0b60d068adcf958cc2c762"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (176 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 60,
      "offset": 121,
      "length": 56,
      "code": {
        "startLine": 58,
        "length": 56,
        "offset": 334,
        "surroundingCode": "<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyTwo\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestInt64ConvertibleProperties\" file=\"gtest_xml_outfile2_test_.cc\" line=\"43\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyTwo\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"2\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2440c6984b5b2ca5ccd063cc4d51d8cf37640d448cb8f74203c63edcdd2bae4c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 82,
      "offset": 3,
      "length": 59,
      "code": {
        "startLine": 80,
        "length": 59,
        "offset": 70,
        "surroundingCode": "\nclass GTestXMLOutFilesTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  def setUp(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1ac798a56801f0fe1d22ec629050f48850d2ce8d480dad4274d967aca8b4f76f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 84,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 82,
        "length": 3,
        "offset": 65,
        "surroundingCode": "  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "eadc11a10e30f800d31804b3e7f0e4f1c3ef7567b79d403bf5162623702eb297"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 93,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 91,
        "length": 3,
        "offset": 32,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3564a45dd12e3f6e97878226541c24db73baeabea5cf213a409086e9ec36ed2c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 96,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 94,
        "length": 3,
        "offset": 32,
        "surroundingCode": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f78e46507b92d82d4b0d3d97c55d5a1f449093c337e6e45a5b121a44dd21c33d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 98,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 96,
        "length": 2,
        "offset": 46,
        "surroundingCode": "  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))\n    except os.error:\n      pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6be3a473790ac807b24fcbcecc4417eb8372507f60fc41a04c24a2ec7e655e7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 100,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 98,
        "length": 4,
        "offset": 105,
        "surroundingCode": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))\n    except os.error:\n      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + \".xml\"))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "01a09d0b791a33a46da25fc6560e4d0a58fa86ee1897fbf6d18a332ee8f564d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 102,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 100,
        "length": 2,
        "offset": 26,
        "surroundingCode": "      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + \".xml\"))\n    except os.error:\n      pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c936353222df0812fed5fb8ad87e0cffac731193ee1ee761084367a385f4698c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 104,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 102,
        "length": 4,
        "offset": 105,
        "surroundingCode": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + \".xml\"))\n    except os.error:\n      pass\n    try:\n      os.rmdir(self.output_dir_)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "799e1e7fd70ac3b5cc44322744aad5eec767fd296ccd1f76a6df56a878c319f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 106,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 104,
        "length": 2,
        "offset": 26,
        "surroundingCode": "      pass\n    try:\n      os.rmdir(self.output_dir_)\n    except os.error:\n      pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "90a720c600343425344fa41d76350354f222384f693c6dee37a67ccd5934102a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 108,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 106,
        "length": 4,
        "offset": 60,
        "surroundingCode": "      os.rmdir(self.output_dir_)\n    except os.error:\n      pass\n\n  def testOutfile1(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "314ba8c48066f4bba36a416f4dbd0bfdd54362f8eccb9473545c0217d433f611"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 110,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 108,
        "length": 3,
        "offset": 14,
        "surroundingCode": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1ff7289037d7645191296b0bbfaf66058846e63d0253600f0822c94a8eed3695"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 113,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 62,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "84233b2fa3bbbece8364f2e9c5a18f0a78e03d4088feb943151cf4ad792dbaba"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 116,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 114,
        "length": 3,
        "offset": 62,
        "surroundingCode": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n\n  def _TestOutFile(self, test_name, expected_xml):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, \"--gtest_output=xml:%s\" % self.output_dir_]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2dd3ff7e3baf9a23783604fee378cd72ff5ab7670da731e6316fc125656006bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 136,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 134,
        "length": 6,
        "offset": 92,
        "surroundingCode": "    expected = minidom.parseString(expected_xml)\n    if os.path.isfile(output_file1):\n      actual = minidom.parse(output_file1)\n    else:\n      actual = minidom.parse(output_file2)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7dde46d52bb64d8a4130527e6b041c083faedf5336a96b7f421abc8cd4f8e90c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 138,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 136,
        "length": 6,
        "offset": 59,
        "surroundingCode": "      actual = minidom.parse(output_file1)\n    else:\n      actual = minidom.parse(output_file2)\n    self.NormalizeXml(actual.documentElement)\n    self.AssertEquivalentNodes(expected.documentElement, actual.documentElement)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "37d131794e1bbdc55c7906c2cc92f97052ccbbe7f6f3c70473a8a6e15b4f8c6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 146,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 144,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == \"__main__\":\n  os.environ[\"GTEST_STACK_TRACE_DEPTH\"] = \"0\"\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "19285b9c69a35a988570586c9afd5a1118af69f9d10521e430959ef96280f688"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
      "language": "Python",
      "line": 147,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 145,
        "length": 16,
        "offset": 75,
        "surroundingCode": "if __name__ == \"__main__\":\n  os.environ[\"GTEST_STACK_TRACE_DEPTH\"] = \"0\"\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "784fd93aa353c0836656f622461a6401ed94f84bad21d5cbb930c6be4a3281fc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '?'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 48,
      "offset": 20,
      "length": 39,
      "code": {
        "startLine": 46,
        "length": 39,
        "offset": 57,
        "surroundingCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\n\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "15d4a77388098aecb2b7c57f9a49969ca368f8ce764666f4156f41ffd19a76c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '?'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 48,
      "offset": 56,
      "length": 3,
      "code": {
        "startLine": 46,
        "length": 3,
        "offset": 93,
        "surroundingCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\n\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "59abff267951d6c4f9d126552716ce540adf4817bdc47d425da9c06b461b6486"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 86,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 53,
        "surroundingCode": "  \"tests\": 16,\n  \"name\": \"AllTests\",\n  \"testsuites\": \\[\n    {\n      \"name\": \"FooTest\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "87bef2385526ca3b587341016a88be7c087ea9b0610444c41fe325b26df05230"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 90,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 88,
        "length": 2,
        "offset": 62,
        "surroundingCode": "      \"name\": \"FooTest\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test1\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e21f348889420ff92a41c1ada693059a419035a46e0ad50ae63e733e061dbf58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 101,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 99,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 45\n        }\n      \\]\n    },\n    {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6e712fe03e05f11c97157aa20c18275ce509c453c18497b850703977508cb91c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 106,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 104,
        "length": 2,
        "offset": 69,
        "surroundingCode": "      \"name\": \"FooTestFixture\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test3\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "870e190dfffbd906e7acabe650a43e3bd16f386bb91ffae91293c10256dc1368"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 117,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 115,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 49\n        }\n      \\]\n    },\n    {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "82df9678eb316230053f6c9af8cfe574dd6bdb003f30dd6b138b3e2c6ce64a54"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 122,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 120,
        "length": 2,
        "offset": 70,
        "surroundingCode": "      \"name\": \"TypedTest\\\\\\\\/0\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test7\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b768a5ee3f4f16ff95e2b114768f83261674794152f4b9629b0c3b253ff1d727"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 135,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 133,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 61\n        }\n      \\]\n    },\n    {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d4dc6266e79ebbda2281d2f9bf3c6af2f7182aee6545a548f44f3515e24e54b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 140,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 138,
        "length": 2,
        "offset": 70,
        "surroundingCode": "      \"name\": \"TypedTest\\\\\\\\/1\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test7\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ba2579a0071e8377f863bd934507173217f2f77103afd26a0543094f777352e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 153,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 151,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 61\n        }\n      \\]\n    },\n    {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "550a83b44528438bb1f1cb3173dbe84001a487aa228cfef0f66301b7e81ea5e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 158,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 156,
        "length": 2,
        "offset": 98,
        "surroundingCode": "      \"name\": \"Single\\\\\\\\/TypeParameterizedTestSuite\\\\\\\\/0\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test9\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "366300f23d233f0089ad323e765a2bc824277cb61033bca544b6e1a5ec70ca3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 171,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 169,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 67\n        }\n      \\]\n    },\n    {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ba139476937c2de1f34eacef54e642d54661cda3d5d01c6365579021f78e860b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 176,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 174,
        "length": 2,
        "offset": 98,
        "surroundingCode": "      \"name\": \"Single\\\\\\\\/TypeParameterizedTestSuite\\\\\\\\/1\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test9\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1461011e29d33b422d00fcf0c91f9c12aaf0bf2c77fb0fdc45a17204b3dcb141"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 189,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 187,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 67\n        }\n      \\]\n    },\n    {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dbca4f884eed49a276b624b88a2b51b4301047d7af77bdb4a113d5b47286f92a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence '['",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 194,
      "offset": 20,
      "length": 2,
      "code": {
        "startLine": 192,
        "length": 2,
        "offset": 84,
        "surroundingCode": "      \"name\": \"ValueParam\\\\\\\\/ValueParamTest\",\n      \"tests\": 4,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test5\\\\\\\\/0\","
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9fffa97b03c6a0bb844fd5aea49f32509120d94a0dc907baba36dae42fa9e562"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 219,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 217,
        "length": 2,
        "offset": 37,
        "surroundingCode": "          \"line\": 53\n        }\n      \\]\n    }\n  \\]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "34fc1f30f2dc0923c0dac77bc13f2be9023b36ae5b8806b5b60f34fc66104cb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence ']'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 221,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 219,
        "length": 2,
        "offset": 17,
        "surroundingCode": "      \\]\n    }\n  \\]\n}\n\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "25cd8652b6b28a8871c7d427bd57f9d01e828dc913e7271301d89cb53a0e378a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 227,
      "offset": 3,
      "length": 79,
      "code": {
        "startLine": 225,
        "length": 79,
        "offset": 66,
        "surroundingCode": "\nclass GTestListTestsOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\"\n\n  def testXml(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7ef7e0706e99da8fac0bb9ed6097e9c446b8b8122318b9a01d70a889f23f7525"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 229,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 227,
        "length": 3,
        "offset": 85,
        "surroundingCode": "  \"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\"\n\n  def testXml(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "38d1e4ccb24649dc83b017a8e046b5b7bc041aee924b2733241ef8a25536e381"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 237,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 235,
        "length": 3,
        "offset": 45,
        "surroundingCode": "    self._TestOutput('xml', EXPECTED_XML)\n\n  def testJSON(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b93c7ffee9ede2ffa770e1ef31b7481f1bf73ac41c334c7ba529dff7b79e32aa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 245,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 243,
        "length": 3,
        "offset": 47,
        "surroundingCode": "    self._TestOutput('json', EXPECTED_JSON)\n\n  def _GetOutput(self, out_format):\n    file_path = os.path.join(\n        gtest_test_utils.GetTempDir(), 'test_out.' + out_format"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9ca650562fd61230d231dd143c51446d6df35b3038e4f1274c261495d33d8602"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 267,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 265,
        "length": 6,
        "offset": 84,
        "surroundingCode": "    self.assertTrue(os.path.isfile(file_path))\n    with open(file_path) as f:\n      result = f.read()\n    return result\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3ff5fcfe15c1c53c0f51729a1781ac3f11a0b6dc77f2421f4295f31e877ce94a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 270,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 268,
        "length": 3,
        "offset": 21,
        "surroundingCode": "    return result\n\n  def _TestOutput(self, test_format, expected_output):\n    actual = self._GetOutput(test_format)\n    actual_lines = actual.splitlines()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8a44521185042a1dd31a0b18e0dd2fb9c335f6698822e95727a62f36eb1eafbd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 276,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 274,
        "length": 13,
        "offset": 62,
        "surroundingCode": "    line_count = 0\n    for actual_line in actual_lines:\n      expected_line = expected_lines[line_count]\n      expected_line_re = re.compile(expected_line.strip())\n      self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f5a44c4d8bf2f09f9814dbd7e138740e0011d94949edb60e37b74aec3a313780"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 277,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 275,
        "length": 16,
        "offset": 92,
        "surroundingCode": "    for actual_line in actual_lines:\n      expected_line = expected_lines[line_count]\n      expected_line_re = re.compile(expected_line.strip())\n      self.assertTrue(\n          expected_line_re.match(actual_line.strip()),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "265ac4b75752212092020e3b6fedc30206a48190992cfe9a3d50967b2ca5f512"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 278,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 276,
        "length": 4,
        "offset": 114,
        "surroundingCode": "      expected_line = expected_lines[line_count]\n      expected_line_re = re.compile(expected_line.strip())\n      self.assertTrue(\n          expected_line_re.match(actual_line.strip()),\n          'actual output of \"%s\",\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "73a7d948cd423716a6876a1d9434364b1d56097548ee428a50d486ea529d91a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 284,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 282,
        "length": 10,
        "offset": 78,
        "surroundingCode": "          'on line %d' % (actual, expected_output, line_count),\n      )\n      line_count = line_count + 1\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e42d3e81b8ca7e2fdc7655bd5ddfa1a4a508e5791683491111fa418568ef85cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 288,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 286,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b94cf9b4886669b49ce22ecf3f4a73d47b44e741e077fd7a062bfcd4ca764cdb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
      "language": "Python",
      "line": 289,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 287,
        "length": 16,
        "offset": 75,
        "surroundingCode": "if __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "711bf096699beb33dd417bf3689809f9b38f39f5d5c0fcc63659d35b7e3392db"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 47,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 45,
        "length": 4,
        "offset": 8,
        "surroundingCode": "\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "32bda5a6614eb9a82dd921cb191b4147465ec9e8bf355c112a249528e3122181"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 49,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 84,
        "surroundingCode": "  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass\nimport sys\nfrom googletest.test import gtest_test_utils"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "15938459f6dae49ff659fbf2b715c34c8359cfa77a368012fae387a68d61fb7c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 62,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 60,
        "length": 2,
        "offset": 48,
        "surroundingCode": "CAN_PASS_EMPTY_ENV = False\nif sys.executable:\n  os.environ['EMPTY_VAR'] = ''\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('EMPTY_VAR' in os.environ)\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "db60e4adc825a0c43cc15893d4fbdea21ddf154bd6558f4a283a1a12770f57c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 61,
        "length": 5,
        "offset": 52,
        "surroundingCode": "if sys.executable:\n  os.environ['EMPTY_VAR'] = ''\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('EMPTY_VAR' in os.environ)\"]\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d0ca14ae238593a1b87749e1d9d8467e9b232bf85dd1c4d75aff6d95602095da"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 66,
      "offset": 3,
      "length": 18,
      "code": {
        "startLine": 64,
        "length": 18,
        "offset": 82,
        "surroundingCode": "      [sys.executable, '-c', \"import os; print('EMPTY_VAR' in os.environ)\"]\n  )\n  CAN_PASS_EMPTY_ENV = eval(child.output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2c8aff8625098e898ec33a37b7b4d4130e65f668e5f626f5650db0381555e4b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 77,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 75,
        "length": 2,
        "offset": 43,
        "surroundingCode": "CAN_UNSET_ENV = False\nif sys.executable:\n  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3d81d1b3fe51d00183297503c179cec233ce7dcfe581ec057268623f8dc66148"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 78,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 76,
        "length": 3,
        "offset": 53,
        "surroundingCode": "if sys.executable:\n  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('UNSET_VAR' not in os.environ)\"]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "95d3e87fe486b3f24c36225db4f92620516d47ae8a99b166633fda1e7c93854f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 79,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 77,
        "length": 5,
        "offset": 64,
        "surroundingCode": "  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('UNSET_VAR' not in os.environ)\"]\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "669cfd96534b7db6a52e1bcbe2456d0d906f789be7c975f5549ec5e568720d7e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 82,
      "offset": 3,
      "length": 13,
      "code": {
        "startLine": 80,
        "length": 13,
        "offset": 86,
        "surroundingCode": "      [sys.executable, '-c', \"import os; print('UNSET_VAR' not in os.environ)\"]\n  )\n  CAN_UNSET_ENV = eval(child.output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "253ee211e790be54b0da5c1c9a69f26ebf8ae4e130a3be9f10308a09937703f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 153,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 151,
        "length": 11,
        "offset": 28,
        "surroundingCode": "\nif SUPPORTS_DEATH_TESTS:\n  DEATH_TESTS = [\n      'HasDeathTest.Test1',\n      'HasDeathTest.Test2',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e3005576ccc3d8ec2b5b0a9741802e1554f50e1cf493c8dc54439c44dc8df006"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 158,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 156,
        "length": 11,
        "offset": 12,
        "surroundingCode": "  ]\nelse:\n  DEATH_TESTS = []\n\n# All the non-disabled tests."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "57619e3d514960815fdf0141d08055b622e1852b70c6b2ffcd1cf5c93d15657d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 184,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 182,
        "length": 71,
        "offset": 34,
        "surroundingCode": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bfb9225866ab137b6038fc45567279ec71c16baca3cd974a78cf8e695b7cc03e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 186,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 184,
        "length": 2,
        "offset": 77,
        "surroundingCode": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "68820d7438ba2ddf3883fa8eeda5c7ed6d83443cb9abe0bbf8475763abb60b57"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 188,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 186,
        "length": 4,
        "offset": 55,
        "surroundingCode": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "61599fe63f10871ea1bd36bf2bf00e71142c2eba493a75e55801e5dadf5dcf94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 193,
      "offset": 3,
      "length": 51,
      "code": {
        "startLine": 191,
        "length": 51,
        "offset": 38,
        "surroundingCode": "\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e4da8f2caad6ae201e8a190fe405db38997f49028b347a08f94a84b456483696"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 195,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 193,
        "length": 6,
        "offset": 57,
        "surroundingCode": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess(\n      [COMMAND] + (args or []), env=environ\n  ).output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "660487249efcd277b6906023cf0ca91b33c056248caab1236d82c932e2d9e516"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 201,
      "offset": 3,
      "length": 78,
      "code": {
        "startLine": 199,
        "length": 78,
        "offset": 41,
        "surroundingCode": "\ndef RunAndExtractTestList(args=None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4a668e99773237c8ce0c6662921333ac3e4cd165ad17347cead0a2bc420e9891"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 203,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 201,
        "length": 1,
        "offset": 84,
        "surroundingCode": "  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "645878888aa74efc8dae5025318811eb72d7be9033808953bfc250228b8d23bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 204,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 202,
        "length": 9,
        "offset": 76,
        "surroundingCode": "\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0ddf536a4aee1cd90e19577cdcdacea831ab36ef1a879e4513270f16f85c2a9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 205,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 203,
        "length": 9,
        "offset": 92,
        "surroundingCode": "  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4d39ae03f234d895b792ce00d06c918f6e3bc34711eeaff2ffd4472d0719ceb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 206,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 204,
        "length": 4,
        "offset": 36,
        "surroundingCode": "  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "33a455bf4b1458f95d564d48e682cd6e574e6c7dae82229fa0c9c85945be4f10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 207,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 205,
        "length": 3,
        "offset": 31,
        "surroundingCode": "  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)\n    if match is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "493cb30ce7e72e51102988b8e022d11948461b88e0a40beca7fdc23ab790d384"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 210,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 208,
        "length": 9,
        "offset": 72,
        "surroundingCode": "    match = TEST_CASE_REGEX.match(line)\n    if match is not None:\n      test_case = match.group(1)\n    else:\n      match = TEST_REGEX.match(line)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "46e9038e715fa4dc177e7dbceb15091ceb3515abd20e06b53cae763bf8a0a804"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 212,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 210,
        "length": 5,
        "offset": 49,
        "surroundingCode": "      test_case = match.group(1)\n    else:\n      match = TEST_REGEX.match(line)\n      if match is not None:\n        test = match.group(1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e7e003ef15ed5f4168f978cb238f690119a749518b28586bb226ee357bf1afbf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 213,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 211,
        "length": 2,
        "offset": 53,
        "surroundingCode": "    else:\n      match = TEST_REGEX.match(line)\n      if match is not None:\n        test = match.group(1)\n        tests_run.append(test_case + '.' + test)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b0e0770b60c20f7c65d9d22ad7d285999c20edad8d77eb8eb459dc6e7c4233e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 216,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 214,
        "length": 6,
        "offset": 81,
        "surroundingCode": "        test = match.group(1)\n        tests_run.append(test_case + '.' + test)\n  return (tests_run, p.exit_code)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "488a524842c169fe4ae5bf6e5d380f0eb8802fdf23d82f6be122bba3c148b4f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 220,
      "offset": 3,
      "length": 77,
      "code": {
        "startLine": 218,
        "length": 77,
        "offset": 51,
        "surroundingCode": "\ndef RunAndExtractDisabledBannerList(args=None):\n  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8523537a0f72c712a8b4a20df3b5c01b6f60405cd548928d7f2de7fd21f56cd2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 221,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 219,
        "length": 1,
        "offset": 130,
        "surroundingCode": "def RunAndExtractDisabledBannerList(args=None):\n  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []\n  for line in p.output.split('\\n'):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "557dbd22e5d0ca600baaf4127fa9723d3414268561ab93562d939a66584bcc74"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 222,
      "offset": 3,
      "length": 15,
      "code": {
        "startLine": 220,
        "length": 15,
        "offset": 155,
        "surroundingCode": "  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []\n  for line in p.output.split('\\n'):\n    match = DISABLED_BANNER_REGEX.match(line)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "50e4eb6a3a7d73f1aa4e6e67575a3aa4d8fc39b2a065d05cdfdd6c9913786e39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 223,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 221,
        "length": 3,
        "offset": 98,
        "surroundingCode": "  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []\n  for line in p.output.split('\\n'):\n    match = DISABLED_BANNER_REGEX.match(line)\n    if match is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c5c6462f4ff500672e4c5752aaae1c22f479600e16fbe28f94a1514e9d74966"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 226,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 224,
        "length": 15,
        "offset": 78,
        "surroundingCode": "    match = DISABLED_BANNER_REGEX.match(line)\n    if match is not None:\n      banners_printed.append(match.group(1))\n  return banners_printed\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0e163a244bb66eec247cf54300f314b47177fbcc94e65150ce7edcd967be3b3d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 227,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 225,
        "length": 6,
        "offset": 73,
        "surroundingCode": "    if match is not None:\n      banners_printed.append(match.group(1))\n  return banners_printed\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "53a3d8762e293ed60ad817b1601f3ee38f565c49c587be2ad43cd9f2eb05f20e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 231,
      "offset": 3,
      "length": 70,
      "code": {
        "startLine": 229,
        "length": 70,
        "offset": 68,
        "surroundingCode": "\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c1680489423b2388905c2c3cc1dc569b9fe5f764169c7fddc70b82b06ce1437"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 232,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 230,
        "length": 3,
        "offset": 140,
        "surroundingCode": "def InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n    environ.update(extra_env)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d0d882e7952bfebc4bfc0f5ce92c22a7efdbe8b77dc33c1f542a2a042ce6f13a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 236,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 234,
        "length": 7,
        "offset": 69,
        "surroundingCode": "    environ.update(extra_env)\n    return function(*args, **kwargs)\n  finally:\n    environ.clear()\n    environ.update(original_env)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3e8d52214049b689d6468237e87f29b4806c65fe0c100a5e0c47addf0fdd4f5e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 242,
      "offset": 3,
      "length": 78,
      "code": {
        "startLine": 240,
        "length": 78,
        "offset": 60,
        "surroundingCode": "\ndef RunWithSharding(total_shards, shard_index, command):\n  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n\n  extra_env = {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88d74a19b823f7e0d2cff2eba0d5134ef6883ed225197f8bb825cbedafcce941"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 244,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 242,
        "length": 9,
        "offset": 84,
        "surroundingCode": "  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n\n  extra_env = {\n      SHARD_INDEX_ENV_VAR: str(shard_index),\n      TOTAL_SHARDS_ENV_VAR: str(total_shards),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6fd730232b1611d8ca7c2a54e47aa67bb567a4358490c529c4b01c2a0b74eff6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 248,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 246,
        "length": 6,
        "offset": 53,
        "surroundingCode": "      TOTAL_SHARDS_ENV_VAR: str(total_shards),\n  }\n  return InvokeWithModifiedEnv(extra_env, RunAndExtractTestList, command)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "93096473c0f0bc60702445427caed4ee4e7a0744665aacd2c8266de59c78bb56"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 255,
      "offset": 3,
      "length": 70,
      "code": {
        "startLine": 253,
        "length": 70,
        "offset": 57,
        "surroundingCode": "\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2826d717bff5467d9349fcd31c07dfd64b6999ea0cba62a163f718b1a780a7c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 257,
      "offset": 3,
      "length": 12,
      "code": {
        "startLine": 255,
        "length": 12,
        "offset": 76,
        "surroundingCode": "  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities.\n\n  def AssertSetEqual(self, lhs, rhs):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f440c5bb28d42f7ba3eedda4d5ddaa346e9119a5331c34b29db725da702c7957"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 259,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 257,
        "length": 3,
        "offset": 18,
        "surroundingCode": "  # Utilities.\n\n  def AssertSetEqual(self, lhs, rhs):\n    \"\"\"Asserts that two sets are equal.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e9aed4c0febe2976f4e2e3f52f27800513ddc919b8a135140e51a2f148f69204"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 263,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 261,
        "length": 4,
        "offset": 28,
        "surroundingCode": "\n    for elem in lhs:\n      self.assertTrue(elem in rhs, '%s in %s' % (elem, rhs))\n\n    for elem in rhs:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5ba4f740944e4af514e7f6c0aa4e2657189b0483e9cd2a778c476d8015aa5954"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 266,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 264,
        "length": 4,
        "offset": 28,
        "surroundingCode": "\n    for elem in rhs:\n      self.assertTrue(elem in lhs, '%s in %s' % (elem, lhs))\n\n  def AssertPartitionIsValid(self, set_var, list_of_sets):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f1f16d70e0e1adf521f2454c6ad4a20899008b56d71f3fd797ae55c6eb488d96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 268,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 266,
        "length": 3,
        "offset": 64,
        "surroundingCode": "      self.assertTrue(elem in lhs, '%s in %s' % (elem, lhs))\n\n  def AssertPartitionIsValid(self, set_var, list_of_sets):\n    \"\"\"Asserts that list_of_sets is a valid partition of set_var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f65f80aae4b23a5d5cf60d1fa9f0ad351ad9940cb4134abc705323e38b1a8a76"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 273,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 271,
        "length": 14,
        "offset": 65,
        "surroundingCode": "    full_partition = []\n    for slice_var in list_of_sets:\n      full_partition.extend(slice_var)\n    self.assertEqual(len(set_var), len(full_partition))\n    self.assertEqual(set(set_var), set(full_partition))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "44942fe1351bb62ba1dfcc7ac79e607637e84a793d29ccf82bcdccd0cf9b37b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 277,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 275,
        "length": 3,
        "offset": 59,
        "surroundingCode": "    self.assertEqual(set(set_var), set(full_partition))\n\n  def AdjustForParameterizedTests(self, tests_to_run):\n    \"\"\"Adjust tests_to_run in case value parameterized tests are disabled.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7b27f22f76362958046eac779a648f81bc35363e36bbaf3cee6b9b5b3d023af1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 282,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 280,
        "length": 6,
        "offset": 69,
        "surroundingCode": "    global param_tests_present\n    if not param_tests_present:\n      return list(set(tests_to_run) - set(PARAM_TESTS))\n    else:\n      return tests_to_run"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2f66cc98b969df71d37d888e6fbf1b20bab749ae0c4ee32bbc3cfd5fcc772b0f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 284,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 282,
        "length": 6,
        "offset": 72,
        "surroundingCode": "      return list(set(tests_to_run) - set(PARAM_TESTS))\n    else:\n      return tests_to_run\n\n  def RunAndVerify(self, gtest_filter, tests_to_run):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "494043bdbd4b54ebd1d9f39853ed1a4c5c2703ca759a292fa44049d0c71df527"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 286,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 284,
        "length": 3,
        "offset": 29,
        "surroundingCode": "      return tests_to_run\n\n  def RunAndVerify(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for a given filter.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bb5cf93ee94c1b5f14c5eb8ef526e79589cb8d71b8fe87547c87b467cb84fef5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 300,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 298,
        "length": 9,
        "offset": 107,
        "surroundingCode": "    # pylint: disable=g-explicit-bool-comparison\n    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2f053b63e6cce89095d5f3198faae22569ffd04ccc6b92d8213e7abb2b5e9de9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 301,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 299,
        "length": 9,
        "offset": 104,
        "surroundingCode": "    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)\n      self.AssertSetEqual(tests_run, tests_to_run)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9acbfc467ea781c27a0fa3c81c34d40906900aae309b4c733de6e1f1fc40befa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 302,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 300,
        "length": 9,
        "offset": 97,
        "surroundingCode": "      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)\n      self.AssertSetEqual(tests_run, tests_to_run)\n    # pylint: enable=g-explicit-bool-comparison"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "59136ad2826df75088d2467adc4f48f750c3b408c4cab338efcd537f7a9a610e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 303,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 301,
        "length": 4,
        "offset": 89,
        "surroundingCode": "      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)\n      self.AssertSetEqual(tests_run, tests_to_run)\n    # pylint: enable=g-explicit-bool-comparison\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dd5e93649fadaf81d150b1431a1617446a6bd76f2b8363e4775045142805670e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 309,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 307,
        "length": 4,
        "offset": 36,
        "surroundingCode": "\n    if gtest_filter is None:\n      args = []\n    else:\n      args = ['--%s=%s' % (FILTER_FLAG, gtest_filter)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d7bca1d210617b0a584be8ac7ee02f9063a75296d5b2ee8f54d256cbf09d1b11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 311,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 309,
        "length": 4,
        "offset": 32,
        "surroundingCode": "      args = []\n    else:\n      args = ['--%s=%s' % (FILTER_FLAG, gtest_filter)]\n\n    tests_run = RunAndExtractTestList(args)[0]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e6a5b5924ca649f0155e3b74926e04373615f026a47b7ea67fb89602874bb194"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 316,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 314,
        "length": 3,
        "offset": 52,
        "surroundingCode": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def RunAndVerifyWithSharding(\n      self,\n      gtest_filter,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e9e37cd5549f871c916d716d4b6fff84fd70882c1949129ac1c7f853d11c6504"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 349,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 347,
        "length": 9,
        "offset": 107,
        "surroundingCode": "    # pylint: disable=g-explicit-bool-comparison\n    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      partition = []\n      for i in range(0, total_shards):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a3113ce654900b3f729178af72059713d9e97e4b01ebd796bb13c4f9f1a0c22d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 350,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 348,
        "length": 9,
        "offset": 104,
        "surroundingCode": "    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      partition = []\n      for i in range(0, total_shards):\n        (tests_run, exit_code) = RunWithSharding(total_shards, i, args)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8442d009c2d808a5fef9e9889107bce4f84ede942aabe19b8e1896af21787b49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 351,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 349,
        "length": 3,
        "offset": 73,
        "surroundingCode": "      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      partition = []\n      for i in range(0, total_shards):\n        (tests_run, exit_code) = RunWithSharding(total_shards, i, args)\n        if check_exit_0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "84d6c5cce5171d1488869a8d96d1528a0e2f406cdac32f200455af58265be5e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 354,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 352,
        "length": 4,
        "offset": 107,
        "surroundingCode": "        (tests_run, exit_code) = RunWithSharding(total_shards, i, args)\n        if check_exit_0:\n          self.assertEqual(0, exit_code)\n        partition.append(tests_run)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4f6b19acfe4ce03edcb4d19c2581d901b3a1e8b7dd5a3fef4fe1eb3f5a50cf22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 357,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 355,
        "length": 4,
        "offset": 43,
        "surroundingCode": "        partition.append(tests_run)\n\n      self.AssertPartitionIsValid(tests_to_run, partition)\n      SetEnvVar(FILTER_ENV_VAR, None)\n    # pylint: enable=g-explicit-bool-comparison"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2994c260bcdf8ce00f83d90fef218fae92ddaee093196b883abb8d32b8810fd7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 358,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 356,
        "length": 9,
        "offset": 66,
        "surroundingCode": "\n      self.AssertPartitionIsValid(tests_to_run, partition)\n      SetEnvVar(FILTER_ENV_VAR, None)\n    # pylint: enable=g-explicit-bool-comparison\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "df776d60b5baaa307257ed0679ded26a15b308743ea674e273f544e51e78f706"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 361,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 359,
        "length": 3,
        "offset": 51,
        "surroundingCode": "    # pylint: enable=g-explicit-bool-comparison\n\n  def RunAndVerifyAllowingDisabled(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for the given filter.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c4e3832155c466b9e910a2ea8c8c5e1be2363eee3dfe17a394afb64627866660"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 377,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 375,
        "length": 4,
        "offset": 90,
        "surroundingCode": "    args = ['--%s' % ALSO_RUN_DISABLED_TESTS_FLAG]\n    if gtest_filter is not None:\n      args.append('--%s=%s' % (FILTER_FLAG, gtest_filter))\n\n    tests_run = RunAndExtractTestList(args)[0]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f8ecf8dbebda4ad180b613c72a1943411d2e467d42cbcf1a914db49106074a47"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 382,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 380,
        "length": 3,
        "offset": 52,
        "surroundingCode": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def setUp(self):\n    \"\"\"Sets up test case.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "23042fa1df38aaa2ccb48cb82a9b752a4b78632f6dbb8acbda0e1f28f0c2f4cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 391,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 389,
        "length": 19,
        "offset": 73,
        "surroundingCode": "    global param_tests_present\n    if param_tests_present is None:\n      param_tests_present = (\n          PARAM_TEST_REGEX.search(RunAndReturnOutput()) is not None\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "00230379ecf8a135f20b3c5ad95b61cbb33f822aeaba01033c1b772feb79e556"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 395,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 393,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the filter.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "067dc77b5fc4eae4dd14c81c712386b3305515c498cf961fa74f10d4f359cbee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 400,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 398,
        "length": 3,
        "offset": 45,
        "surroundingCode": "    self.RunAndVerify(None, ACTIVE_TESTS)\n\n  def testDefaultBehaviorWithShards(self):\n    \"\"\"Tests the behavior without the filter, with sharding enabled.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "71c8456dae90d9c65d08bf506e8a2ce04de2ff83885dab3259606bc1469eaa28"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 409,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 407,
        "length": 3,
        "offset": 80,
        "surroundingCode": "    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n\n  def testEmptyFilter(self):\n    \"\"\"Tests an empty filter.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "34ae51dc0ee6a06f285b643ce39ea9b4844195183ea15a0453618f0f615d93b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 416,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 414,
        "length": 3,
        "offset": 48,
        "surroundingCode": "    self.RunAndVerifyWithSharding('', 2, [])\n\n  def testBadFilter(self):\n    \"\"\"Tests a filter that matches nothing.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9aa473a1ebd85fd4a301ce925099641021ebc5d1653c71cf6203e622f3ab6e0e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 422,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 420,
        "length": 3,
        "offset": 58,
        "surroundingCode": "    self.RunAndVerifyAllowingDisabled('BadFilter', [])\n\n  def testFullName(self):\n    \"\"\"Tests filtering by full name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "32e2c5865d2c4a119390e8724314affa727222b412b8003249539e06398ccf42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 429,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 427,
        "length": 3,
        "offset": 72,
        "surroundingCode": "    self.RunAndVerifyWithSharding('FooTest.Xyz', 5, ['FooTest.Xyz'])\n\n  def testUniversalFilters(self):\n    \"\"\"Tests filters that match everything.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ab37713fc1a12c43760f6eaf2dcdee260c0bcd55bc17d4a12948523ded00be17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 438,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 436,
        "length": 3,
        "offset": 79,
        "surroundingCode": "    self.RunAndVerifyAllowingDisabled('*.*', ACTIVE_TESTS + DISABLED_TESTS)\n\n  def testFilterByTestCase(self):\n    \"\"\"Tests filtering by test case name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6fea49591a96316c8dbfd025390067675c962a226638ce2ebb935773f21a4442"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 449,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 447,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFilterByTest(self):\n    \"\"\"Tests filtering by test name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6987e223670702cc3cd0eec05f5661890de23ec7ea89f02142e91ae1db40199a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 454,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 452,
        "length": 3,
        "offset": 78,
        "surroundingCode": "    self.RunAndVerify('*.TestOne', ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testFilterDisabledTests(self):\n    \"\"\"Select only the disabled tests to run.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "72217f56cb288c4d95b2e59d27b7f4a1490f6807cd2e048d9d2167a9323cf8d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 486,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 484,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testWildcardInTestCaseName(self):\n    \"\"\"Tests using wildcard in the test case name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8f75e61d384ddc9559e5655cfc857d126560ea1760ea4cc0e737c25e407dd5b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 503,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 501,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testWildcardInTestName(self):\n    \"\"\"Tests using wildcard in the test name.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "674b1a2d20f4700397bf6e28f80e983468c8a5df64cefef5a19a56b44b741190"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 508,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 506,
        "length": 3,
        "offset": 68,
        "surroundingCode": "    self.RunAndVerify('*.*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testFilterWithoutDot(self):\n    \"\"\"Tests a filter that has no '.' in it.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e9d31ffe0cb20524211c0a43af4c641df331a9899b0d50ce8804faac7a467178"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 521,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 519,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testTwoPatterns(self):\n    \"\"\"Tests filters that consist of two patterns.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "921857b9d5c83f0509801f4f7de836a4a156f727b2cfd0bc766fc6055415ca25"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 536,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 534,
        "length": 3,
        "offset": 67,
        "surroundingCode": "    self.RunAndVerify(':*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testThreePatterns(self):\n    \"\"\"Tests filters that consist of three patterns.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "21866c7b55b432a15d31fcfffb53ea2e9295374ca25de2e3777c9e4cee8478c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 570,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 568,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testNegativeFilters(self):\n    self.RunAndVerify(\n        '*-BazTest.TestOne',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "67823c082d6e6df8ba331390a387b6093643b5525c9a734fc7e15be97fb81cb6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 643,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 641,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the filter flag overrides the filtering env. variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3ba3c644a92f8632eca9a98cda9aa468d784a29f9a44f7e8ef681892625ebc6b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 653,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 651,
        "length": 3,
        "offset": 78,
        "surroundingCode": "    self.AssertSetEqual(tests_run, ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testShardStatusFileIsCreated(self):\n    \"\"\"Tests that the shard file is created if specified in the environment.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bfad29742451c4e319f3d8355a114d48b24778b7b84decbd29ad541bc4446082"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 663,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 661,
        "length": 21,
        "offset": 78,
        "surroundingCode": "    extra_env = {SHARD_STATUS_FILE_ENV_VAR: shard_status_file}\n    try:\n      InvokeWithModifiedEnv(extra_env, RunAndReturnOutput)\n    finally:\n      self.assertTrue(os.path.exists(shard_status_file))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a8e84dbaaef34640f2a370b0c41060dcc490c8fc385248663a75be47ff8915a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 665,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 663,
        "length": 4,
        "offset": 78,
        "surroundingCode": "      InvokeWithModifiedEnv(extra_env, RunAndReturnOutput)\n    finally:\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "472fa8d823d99838e0df3d004c9887e29f85fe3854b8c1d73fd55c7451be63e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 666,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 664,
        "length": 2,
        "offset": 76,
        "surroundingCode": "    finally:\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n\n  def testShardStatusFileIsCreatedWithListTests(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "82e4ae96958fa298b91483cd12f4737cb9df787c8f3b40a739f1846885330964"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 668,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 666,
        "length": 3,
        "offset": 38,
        "surroundingCode": "      os.remove(shard_status_file)\n\n  def testShardStatusFileIsCreatedWithListTests(self):\n    \"\"\"Tests that the shard file is created with the \"list_tests\" flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "70fc8cd747cdf54236d74b295b6dec3bc213c65034860ff4a9e7824db5654ece"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 678,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 676,
        "length": 6,
        "offset": 78,
        "surroundingCode": "    extra_env = {SHARD_STATUS_FILE_ENV_VAR: shard_status_file}\n    try:\n      output = InvokeWithModifiedEnv(\n          extra_env, RunAndReturnOutput, [LIST_TESTS_FLAG]\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a2f3ac96397e45f254462db123dfccbb0f2539be331e4f9ec3b2cbb1697e8223"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 682,
      "offset": 7,
      "length": 65,
      "code": {
        "startLine": 680,
        "length": 65,
        "offset": 27,
        "surroundingCode": "      )\n    finally:\n      # This assertion ensures that Google Test enumerated the tests as\n      # opposed to running them.\n      self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f9260d8c9e178db6287498a03e635a1ff7932e7e3ef646da3410caeb3c2437c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 683,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 681,
        "length": 26,
        "offset": 91,
        "surroundingCode": "    finally:\n      # This assertion ensures that Google Test enumerated the tests as\n      # opposed to running them.\n      self.assertTrue(\n          '[==========]' not in output,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "52a9026a60b70c3ff704c318a94451441db02681021a53925c2f0b84864fa28d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 684,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 682,
        "length": 4,
        "offset": 111,
        "surroundingCode": "      # This assertion ensures that Google Test enumerated the tests as\n      # opposed to running them.\n      self.assertTrue(\n          '[==========]' not in output,\n          ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "85e305f6f08abd83e817d22c97da28737a1d1c4d20e7e00555a901cac062fe06"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 693,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 691,
        "length": 4,
        "offset": 15,
        "surroundingCode": "      )\n\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2d97fc567e4e56c00588a53752b7edbee0dbffdd4c2bc0fba1fc512094cc2a1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 694,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 692,
        "length": 2,
        "offset": 64,
        "surroundingCode": "\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n\n  def testDisabledBanner(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8936bba89358047ff5ee4ffe96db040ed1e7fc30abcb8ccf946c7ac8c81ccdca"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 696,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 694,
        "length": 3,
        "offset": 38,
        "surroundingCode": "      os.remove(shard_status_file)\n\n  def testDisabledBanner(self):\n    \"\"\"Tests that the disabled banner prints only tests that match filter.\"\"\"\n    make_filter = lambda s: ['--%s=%s' % (FILTER_FLAG, s)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "86f341f163a276f5f5f296858274b9b27975cfaa1faee7dbb1a0359980f1c692"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E731 do not assign a lambda expression, use a def",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 698,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 696,
        "length": 11,
        "offset": 114,
        "surroundingCode": "  def testDisabledBanner(self):\n    \"\"\"Tests that the disabled banner prints only tests that match filter.\"\"\"\n    make_filter = lambda s: ['--%s=%s' % (FILTER_FLAG, s)]\n\n    banners = RunAndExtractDisabledBannerList(make_filter('*'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1ee992b167bf8764b74836e770176f4e81e366590fd9f60e0b8e0462be8d6678"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 718,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 716,
        "length": 2,
        "offset": 64,
        "surroundingCode": "    self.AssertSetEqual(banners, ['BazTest.DISABLED_TestC'])\n\n  if SUPPORTS_DEATH_TESTS:\n\n    def testShardingWorksWithDeathTests(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "821ba12f7c1f79de0733dc88f20fb1b61b18c7b59856d05197eb7d96566f172f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 721,
      "offset": 7,
      "length": 54,
      "code": {
        "startLine": 719,
        "length": 54,
        "offset": 54,
        "surroundingCode": "\n    def testShardingWorksWithDeathTests(self):\n      \"\"\"Tests integration with death tests and sharding.\"\"\"\n\n      gtest_filter = 'HasDeathTest.*:SeqP/*'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3aa997f3de3372d7d6639f33f05bcf654e1b7726483e9b44cb1d7d2237b760c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 723,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 721,
        "length": 12,
        "offset": 68,
        "surroundingCode": "      \"\"\"Tests integration with death tests and sharding.\"\"\"\n\n      gtest_filter = 'HasDeathTest.*:SeqP/*'\n      expected_tests = [\n          'HasDeathTest.Test1',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e1767e6a0a62b5b148ac21027794279277bdd6da3ffa02a3c69c3e10f467fbc1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 724,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 722,
        "length": 14,
        "offset": 52,
        "surroundingCode": "\n      gtest_filter = 'HasDeathTest.*:SeqP/*'\n      expected_tests = [\n          'HasDeathTest.Test1',\n          'HasDeathTest.Test2',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "83474e4d9515b56457226d6f7c56af1c19b3c460086a4fbcffcace50e61812e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 733,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 731,
        "length": 3,
        "offset": 15,
        "surroundingCode": "      ]\n\n      for flag in [\n          '--gtest_death_test_style=threadsafe',\n          '--gtest_death_test_style=fast',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3ad75b60262116bc5df2b065d7c4080b5ae9a8cba2077944beb17acc57c5dd7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 746,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 744,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "abf4dd1e8107b08b1053882ac09c17f1c7e77d761cfccf0a01c836c1f488810b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 42,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 40,
        "length": 2,
        "offset": 26,
        "surroundingCode": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f2969e984c94994cfcfb633d00caaa2c0747f65ab870b793f43828f80a5a8b80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 47,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 45,
        "length": 2,
        "offset": 35,
        "surroundingCode": "\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f07b67785299463667a73f5bd866d801aefdfc781006cb05eceb6821743c2262"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 54,
      "offset": 3,
      "length": 67,
      "code": {
        "startLine": 52,
        "length": 67,
        "offset": 39,
        "surroundingCode": "\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  # Verifies that 'command' exits with code 1."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8a551978209a20203873727c2a88c51b634715d1516e50c8a013d624ce93b0c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 56,
      "offset": 3,
      "length": 44,
      "code": {
        "startLine": 54,
        "length": 44,
        "offset": 73,
        "surroundingCode": "  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2c72a1df1cd6da99124c95f7bc4abc8cf76d4470776465e4c4d0d90327d88ce1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 57,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 55,
        "length": 1,
        "offset": 50,
        "surroundingCode": "\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c9e2ffb8bb2f273843b5fb0ff42f0176eb0e15068f592f26c5656341ed4a55f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 56,
        "length": 2,
        "offset": 92,
        "surroundingCode": "  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output)\n  Assert('InitGoogleTest' in p.output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88d7767b1472e821be70f7b5c55991b3fd061397584febb2a7db4618fa1c6978"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 60,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 58,
        "length": 6,
        "offset": 81,
        "surroundingCode": "  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output)\n  Assert('InitGoogleTest' in p.output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "be2db336c3f6e8952980dde3201759486f8d0a232f250f7a3fdede74a359f472"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 65,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 63,
        "length": 3,
        "offset": 60,
        "surroundingCode": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d92c032948676a57dc4d186345e4cbf91714a568a88a97ac12fe1c22784c4b2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
      "language": "Python",
      "line": 70,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 68,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "522452f1c416e65809d606b703d8a88749dfb6d8479e17dbba80c18730e27e1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 121,
      "offset": 3,
      "length": 81,
      "code": {
        "startLine": 119,
        "length": 81,
        "offset": 18,
        "surroundingCode": "\ndef Run(args):\n  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n\n  return gtest_test_utils.Subprocess("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ac38f43e5dbb053cdb207c1819bf3ecf24c39d80c2eb20fd3a4eb773ff0ebcb4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 123,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 87,
        "surroundingCode": "  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n\n  return gtest_test_utils.Subprocess(\n      [EXE_PATH] + args, capture_stderr=False\n  ).output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2ad2a7aba1ee9ac261ea451d1585016373631266fc7a8a975b7f9a8bfeed78de"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 132,
      "offset": 3,
      "length": 64,
      "code": {
        "startLine": 130,
        "length": 64,
        "offset": 60,
        "surroundingCode": "\nclass GTestListTestsUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "090ded17ed8fccdaed45d0426752844fbf02b6273971832d4b10568cb2e30a95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 134,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 132,
        "length": 3,
        "offset": 70,
        "surroundingCode": "  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Run googletest-list-tests-unittest_ and verify the output.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7cb8958319d2f6b0a0bdf4fe4c74e6c1f8d6c338d8c09cc2925531eeba31333b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 150,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 148,
        "length": 4,
        "offset": 34,
        "surroundingCode": "\n    if flag_value is None:\n      flag = ''\n      flag_expression = 'not set'\n    elif flag_value == '0':"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c08eaeef44779a86fce19fb76149b3f5197ef2332a49a00a61345a8b4dd0d181"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 151,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 149,
        "length": 15,
        "offset": 49,
        "surroundingCode": "    if flag_value is None:\n      flag = ''\n      flag_expression = 'not set'\n    elif flag_value == '0':\n      flag = '--%s=0' % LIST_TESTS_FLAG"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3f02d240283fa6dbaf1cfec6e4484891409aab4f89fd0e0768d46adb34542449"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 153,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 151,
        "length": 4,
        "offset": 68,
        "surroundingCode": "      flag_expression = 'not set'\n    elif flag_value == '0':\n      flag = '--%s=0' % LIST_TESTS_FLAG\n      flag_expression = '0'\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0dd62713a95ed4be9287fbb4676e2a57a9b63bd33a5acb8e145565c8e63cbd2f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 154,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 152,
        "length": 15,
        "offset": 74,
        "surroundingCode": "    elif flag_value == '0':\n      flag = '--%s=0' % LIST_TESTS_FLAG\n      flag_expression = '0'\n    else:\n      flag = '--%s' % LIST_TESTS_FLAG"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e7627e729f5348599ea2b5c601bded9999ab22bff6af2e00bdbf0f607fba2c58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 156,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 154,
        "length": 4,
        "offset": 44,
        "surroundingCode": "      flag_expression = '0'\n    else:\n      flag = '--%s' % LIST_TESTS_FLAG\n      flag_expression = '1'\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "50d5d6cd5201f2999aa364ffaed31b19c36e97715a9d0a278f1b2a033b4d884c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 157,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 155,
        "length": 15,
        "offset": 54,
        "surroundingCode": "    else:\n      flag = '--%s' % LIST_TESTS_FLAG\n      flag_expression = '1'\n\n    args = [flag]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f89d99e22a7673fad96502e1dffb9f0b0df72cbdbcf0419ad03b7c2c42b5c973"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 162,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 160,
        "length": 4,
        "offset": 38,
        "surroundingCode": "\n    if other_flag is not None:\n      args += [other_flag]\n\n    output = Run(args)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88a28d4a4f9aaaf1e59da51beca9b999a6416f33e160b1cecdb293010de2bab7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 167,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 165,
        "length": 4,
        "offset": 34,
        "surroundingCode": "\n    if expected_output_re:\n      self.assertTrue(\n          expected_output_re.match(output),\n          'when %s is %s, the output of \"%s\" is \"%s\",\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8d1dc79b31526d773bdcd5e355aa1d457679f234adbe3e4f338513eed136f529"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 180,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 178,
        "length": 4,
        "offset": 24,
        "surroundingCode": "      )\n    else:\n      self.assertTrue(\n          not EXPECTED_OUTPUT_NO_FILTER_RE.match(output),\n          'when %s is %s, the output of \"%s\" is \"%s\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8883ab50893715770b525a7c2fbe4cba291e4b6802bd8df2d0a694abe5a70d21"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 186,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 184,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9dfafdd307ceb446566c99643c7e1d55f4aac0bdc83460f3a017394834a74463"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 191,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 189,
        "length": 3,
        "offset": 84,
        "surroundingCode": "    self.RunAndVerify(flag_value=None, expected_output_re=None, other_flag=None)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_list_tests flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e8f15120a664ac29a0c94792d4b4e99992534ee70298452683992c7d02a821a5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 201,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 199,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testOverrideNonFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests overrides the non-filter flags.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dbac736b109e18a210930414d28b1b0ca081a3841b6811da274c66d265a738b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 210,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 208,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testWithFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests takes into account the filter flags.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "45f2298e7623122022ff008a5f617150f379c0fc5bee73f4edabaf62e56a4747"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
      "language": "Python",
      "line": 225,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 223,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ca15e84cbdafbe64dbdcd646089a30ea3efec37c161827450ab8a45a049cc829"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 97,
      "offset": 3,
      "length": 69,
      "code": {
        "startLine": 95,
        "length": 69,
        "offset": 28,
        "surroundingCode": "\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cc2219a15752c56fe861b71aab66b7cecb4c9e520d728c4356c5d7ea4bab1a2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 99,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 97,
        "length": 6,
        "offset": 75,
        "surroundingCode": "  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f0f66d40a2881924f25153288a28794ad7488adb5acf3a74af9f226972e11d70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 103,
      "offset": 3,
      "length": 70,
      "code": {
        "startLine": 101,
        "length": 70,
        "offset": 37,
        "surroundingCode": "\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e2a9a61861bc40e7b03992131fd9efee2c226bf260b52f2be10ebacc8758daf0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 115,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  return re.sub(\n      r'.*[/\\\\]((googletest-output-test_|gtest).cc)(\\:\\d+|\\(\\d+\\))\\: ',\n      r'\\1:#: ',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "70736686c7bc9c08cf53a8889467958c641cb77cd0fad7b5884443138d2a7702"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 123,
      "offset": 3,
      "length": 67,
      "code": {
        "startLine": 121,
        "length": 67,
        "offset": 40,
        "surroundingCode": "\ndef RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\"."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b92d515d8fa37e0d790c0c6fc595ae51ab48180f1d3c1183084f125be622b3c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 125,
      "offset": 3,
      "length": 51,
      "code": {
        "startLine": 123,
        "length": 51,
        "offset": 73,
        "surroundingCode": "  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\".\n  return re.sub(\n      r'Stack trace:(.|\\n)*?\\n\\n', 'Stack trace: (omitted)\\n\\n', output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6b4ccde0ecd44592c567514cf3a682e6fe28db4e7919442e9b2b330bff37fedb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 126,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 124,
        "length": 6,
        "offset": 57,
        "surroundingCode": "\n  # *? means \"find the shortest string that matches\".\n  return re.sub(\n      r'Stack trace:(.|\\n)*?\\n\\n', 'Stack trace: (omitted)\\n\\n', output\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6d5b2f8269430e146b6a8a0844e3c6a09879cbe815f16fa82e782d1441a3f913"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 132,
      "offset": 3,
      "length": 77,
      "code": {
        "startLine": 130,
        "length": 77,
        "offset": 34,
        "surroundingCode": "\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\"."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8885619ef0a304ea2f5747ee4830c20f1452e9d55792dbc7aafe581164d80545"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 134,
      "offset": 3,
      "length": 51,
      "code": {
        "startLine": 132,
        "length": 51,
        "offset": 83,
        "surroundingCode": "  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n', '', output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3a559acf2a690c85081f9bc2c24bcd0e272606927b4ac7a05dc2e78ecd9e017e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 135,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 133,
        "length": 6,
        "offset": 57,
        "surroundingCode": "\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n', '', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a4659304b9c36febcd10d9bac747eb56b3d3705e7ea12211024dfee34403e1b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 139,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 137,
        "length": 71,
        "offset": 27,
        "surroundingCode": "\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a8340166985d84e9b8cd49173758d56f3ef3f847e0e5e76d99d779f2f149c855"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 141,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 139,
        "length": 6,
        "offset": 77,
        "surroundingCode": "  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7837198899a27629e8d1801c014cf02dfe809eecbb9bdf87c501667305f50313"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 145,
      "offset": 3,
      "length": 73,
      "code": {
        "startLine": 143,
        "length": 73,
        "offset": 43,
        "surroundingCode": "\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9fd55411bc6d3ca212c1bd4c76328abf5f6119077a1c741d1435aa2355cfb6cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 154,
      "offset": 3,
      "length": 69,
      "code": {
        "startLine": 152,
        "length": 69,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  # some compilers output the name of type 'unsigned int' as 'unsigned'\n  return re.sub(r'unsigned int', 'unsigned', test_output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f6ee08c3df41f7abd9821bc524902c7ca2d73aa532d6f0b738a00145cc52cb14"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 155,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 153,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n  # some compilers output the name of type 'unsigned int' as 'unsigned'\n  return re.sub(r'unsigned int', 'unsigned', test_output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "932c446bf32a9d2e9e481c8c472b5c3e96dcd7eeea52837eccc93eb77cd4bec9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 159,
      "offset": 3,
      "length": 72,
      "code": {
        "startLine": 157,
        "length": 72,
        "offset": 48,
        "surroundingCode": "\ndef NormalizeToCurrentPlatform(test_output):\n  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n\n  if IS_WINDOWS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "01f1ddd5c01086c2778669d79469d4058137b774d630de90f1cede17bafeed64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 161,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 159,
        "length": 2,
        "offset": 78,
        "surroundingCode": "  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n\n  if IS_WINDOWS:\n    # Removes the color information that is not present on Windows.\n    test_output = re.sub('\\x1b\\\\[(0;3\\d)?m', '', test_output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "db0d900835162a15e5e9f7dceda4adfc655f7232e5bb904b6a6a4e4a25065c45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: W605 invalid escape sequence 'd'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 163,
      "offset": 26,
      "length": 18,
      "code": {
        "startLine": 161,
        "length": 18,
        "offset": 110,
        "surroundingCode": "  if IS_WINDOWS:\n    # Removes the color information that is not present on Windows.\n    test_output = re.sub('\\x1b\\\\[(0;3\\d)?m', '', test_output)\n    # Changes failure message headers into the Windows format.\n    test_output = re.sub(r': Failure\\n', r': error: ', test_output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "78bd5075ccaaa6923892b7f854132b3c90762f5a41788537799a69b59d6df5d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 169,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 167,
        "length": 6,
        "offset": 77,
        "surroundingCode": "    test_output = re.sub(r'((\\w|\\.)+)\\((\\d+)\\):', r'\\1:\\3:', test_output)\n\n  return test_output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fe4c38fd93766e80f533b2ad08535129b20c645e653da30e79149bd9210d384b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 173,
      "offset": 3,
      "length": 62,
      "code": {
        "startLine": 171,
        "length": 62,
        "offset": 33,
        "surroundingCode": "\ndef RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "994c1fdcecb5c0f2d57daed74d663ea64ab7e3a112d7a718230f618c7067b97c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 175,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 173,
        "length": 6,
        "offset": 68,
        "surroundingCode": "  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b3b624297e76b4592cad97ac40a0171a81f5b42960b6d46126e4b87b49c47f59"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 176,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 174,
        "length": 6,
        "offset": 83,
        "surroundingCode": "\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5fd8e2f422c6a26a08a504f7ea47b0a97f07c10eb62dcbe8960fef2721ea6506"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 177,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 175,
        "length": 6,
        "offset": 147,
        "surroundingCode": "  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cbabbcf9db097ddbb33ddb7291db3d1709a036acbb33ace220798c273d2a3c6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 180,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 178,
        "length": 6,
        "offset": 84,
        "surroundingCode": "      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])', r'? tests from \\1', output)\n  return re.sub(r'\\d+ tests?\\.', '? tests.', output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9096de27628a5911cac5f7161e21681ca0253dc428b3c3acb6a3499e75f0960a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 181,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 179,
        "length": 6,
        "offset": 84,
        "surroundingCode": "  )\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])', r'? tests from \\1', output)\n  return re.sub(r'\\d+ tests?\\.', '? tests.', output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dbdff8905a075bc1fdf21c8d23c130aa1aa4be5f2fd54cd48ebf4f01cabb405d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 185,
      "offset": 3,
      "length": 73,
      "code": {
        "startLine": 183,
        "length": 73,
        "offset": 50,
        "surroundingCode": "\ndef RemoveMatchingTests(test_output, pattern):\n  \"\"\"Removes output of specified tests from a Google Test program's output.\n\n  This function strips not only the beginning and the end of a test but also"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "887ecd37d726cbbb080649b7f072c5755a93f7a0272d1b375e20efef5d93d0a0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 199,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 197,
        "length": 11,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f6f5b199af1d1cf243880113446ebe154a08519dd9f0d1b76cb92d3714f24356"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 205,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 203,
        "length": 6,
        "offset": 25,
        "surroundingCode": "      test_output,\n  )\n  return re.sub(r'.*%s.*\\n' % pattern, '', test_output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "aa39ed5ebf3eb9b71c4be1336f5fc6670ba56319c36a43cda90e2aac39cb39e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 209,
      "offset": 3,
      "length": 68,
      "code": {
        "startLine": 207,
        "length": 68,
        "offset": 32,
        "surroundingCode": "\ndef NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n\n  output = ToUnixLineEnding(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d2c4dd6b5d5b70aa9c6018a12ee252f0c7f6673e2cfa001155c6797aa860096f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 211,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 209,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9ba379f6969bb0bf687c1be30691b4ab1174e5c07b333707d968d0a15b97e236"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 212,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 210,
        "length": 6,
        "offset": 39,
        "surroundingCode": "\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "40578c17aa5e7b35b6170148e9e3a1928b6d42e5263af58874bce5d001fbd996"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 213,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 211,
        "length": 6,
        "offset": 73,
        "surroundingCode": "  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "613ecb5d989a8d5f80a87088db9b27415e84494d9110ce6722ae9bd9f00a1469"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 214,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 212,
        "length": 6,
        "offset": 80,
        "surroundingCode": "  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "021f2f3e1ac9e22c8fd0a0a6108e078bcb7baeb259bf57bc74fd61534bc940d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 215,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 213,
        "length": 6,
        "offset": 75,
        "surroundingCode": "  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d36ea3641241d0862c429bea43cdf64aacec00e2bb69d7ee2ecf45dbe54b568a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 219,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 217,
        "length": 71,
        "offset": 39,
        "surroundingCode": "\ndef GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "46cebffbf4a8169d2f50a08561f5f3b5b797b837ed110a9e9cf0145a1b77acfc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 230,
      "offset": 3,
      "length": 70,
      "code": {
        "startLine": 228,
        "length": 70,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "463129b53a016e43771d709d634ed3f712d34d40334cf6a182f7a5418a5b5ffe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 231,
      "offset": 3,
      "length": 40,
      "code": {
        "startLine": 229,
        "length": 40,
        "offset": 76,
        "surroundingCode": "\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e75e500d9ec9e315d6343255bedab701fdbaa809d51636923073d3e80d9185eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 232,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 230,
        "length": 7,
        "offset": 118,
        "surroundingCode": "  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "85db188d69f566b21420ca3f67b491c3d332366debd040e8314fbd79a1e69a0b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 233,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 231,
        "length": 7,
        "offset": 75,
        "surroundingCode": "  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "18bedec2cb57e1560584c8408388a883888f329deccb9ba76990e0e818b50ef7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 234,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 232,
        "length": 1,
        "offset": 61,
        "surroundingCode": "  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n\n  return p.output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "94d74a2415eca1ba1f76cc3a9362ae8778d4768bf650959b3a186d7d7ac5d14b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 236,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 234,
        "length": 6,
        "offset": 62,
        "surroundingCode": "  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n\n  return p.output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "71303590a0fd23a7933432c50cf1495d024d47a86c2dbbfbe8cecd64fa8ee500"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 240,
      "offset": 3,
      "length": 78,
      "code": {
        "startLine": 238,
        "length": 78,
        "offset": 34,
        "surroundingCode": "\ndef GetCommandOutput(env_cmd):\n  \"\"\"Runs a command and returns output with all file location info stripped off.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d8c3603fa4b70d24fda622f20803039e39a1d619a4cadad68ef996675304d184"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 252,
      "offset": 3,
      "length": 40,
      "code": {
        "startLine": 250,
        "length": 40,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "80e36faade829c9ac1c4d6f0a350f04ebde074b00c941ce1ca40e59a9c05d250"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 253,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 251,
        "length": 7,
        "offset": 46,
        "surroundingCode": "\n  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "356dd63cadd2aad5e224e540106ae125ff5a895ce94b0360583c6b381bc49a6b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 254,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 252,
        "length": 7,
        "offset": 74,
        "surroundingCode": "  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'\n  return NormalizeOutput(GetShellCommandOutput((environ, cmdline)))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b4083e1192d61c7f801ac50c063b711508c10dd8d908c3ce7c6bd1e5b8b0a426"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 255,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 253,
        "length": 7,
        "offset": 93,
        "surroundingCode": "  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'\n  return NormalizeOutput(GetShellCommandOutput((environ, cmdline)))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "197f3b4430e7fdaa2a5ac76efdbbd5cf72951eb87702462a030b1901d5857833"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 256,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 254,
        "length": 6,
        "offset": 111,
        "surroundingCode": "  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'\n  return NormalizeOutput(GetShellCommandOutput((environ, cmdline)))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8de1ba00cceeaba8e0d9217ce385fe73a8c7b5538f5ff52832aa813547f509b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 260,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 258,
        "length": 71,
        "offset": 33,
        "surroundingCode": "\ndef GetOutputOfAllCommands():\n  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n\n  return ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3b6508a64ccefec232412ab9a2b67c831a59fb696cc0a507fa93156dd0e39d70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 262,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 260,
        "length": 6,
        "offset": 77,
        "surroundingCode": "  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n\n  return (\n      GetCommandOutput(COMMAND_WITH_COLOR)\n      + GetCommandOutput(COMMAND_WITH_TIME)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a77141a0baaf0fac131a340bbd0cb9d7ecc83b38342ef1d922d13434fe00b400"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 286,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 284,
        "length": 3,
        "offset": 53,
        "surroundingCode": "class GTestOutputTest(gtest_test_utils.TestCase):\n\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "719c403fa109a53fa4ca664da933be859c59f21a05e5d3b5aa195735b012f3d2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 288,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 286,
        "length": 11,
        "offset": 88,
        "surroundingCode": "  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "474e218e6ccd15d972f0e40b57c2a8b9b9e2180f3ca42ee6eb674e9973644c61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 290,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 288,
        "length": 11,
        "offset": 105,
        "surroundingCode": "      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "59567065a885fc0952d67de97302bd6bda612c2e1d9ab8a085ab040ad5c7a143"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 291,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 289,
        "length": 11,
        "offset": 105,
        "surroundingCode": "    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6781b1f299a6f16c4eef62af45f18dda799c7f9c9ad162a55c830bc5e1f2a44d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 292,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 290,
        "length": 11,
        "offset": 143,
        "surroundingCode": "      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:\n      test_output = RemoveMatchingTests("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ee6f207df8c64b2809b92bc65eda59b0b113750d2b71f9a8e5335da1e9e3f84d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 294,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 292,
        "length": 11,
        "offset": 110,
        "surroundingCode": "      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:\n      test_output = RemoveMatchingTests(\n          test_output, 'ExpectFailureWithThreadsTest'\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6a947cc2241bab0f792ca74b8987a0bdf1f18a48f61ff443afe14ba572e24416"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 297,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 295,
        "length": 11,
        "offset": 68,
        "surroundingCode": "          test_output, 'ExpectFailureWithThreadsTest'\n      )\n      test_output = RemoveMatchingTests(\n          test_output, 'ScopedFakeTestPartResultReporterTest'\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f13e296b5ca50e03544b0c8d00acdfb2601e81b1c4bf915f3dacd8fce961bc83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 300,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 298,
        "length": 11,
        "offset": 76,
        "surroundingCode": "          test_output, 'ScopedFakeTestPartResultReporterTest'\n      )\n      test_output = RemoveMatchingTests(test_output, 'WorksConcurrently')\n    if not SUPPORTS_STACK_TRACES:\n      test_output = RemoveStackTraces(test_output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e3e34d2a3fec8aea8e075bdf338ab783ea1d80b7d2a70bc8bbc971df839f6da9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 302,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 300,
        "length": 11,
        "offset": 114,
        "surroundingCode": "      test_output = RemoveMatchingTests(test_output, 'WorksConcurrently')\n    if not SUPPORTS_STACK_TRACES:\n      test_output = RemoveStackTraces(test_output)\n\n    return test_output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "41c48a9f0fc3876265c9957eea513ce0b1bdfe8f373b923be4c8e1eb76099790"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 306,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 304,
        "length": 3,
        "offset": 26,
        "surroundingCode": "    return test_output\n\n  def testOutput(self):\n    output = GetOutputOfAllCommands()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "78e4e6ddd787f0ad6976ed88ff4f1cd62e9053c68932c5692d7763a5b0b7d731"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 325,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 323,
        "length": 4,
        "offset": 40,
        "surroundingCode": "\n    if CAN_GENERATE_GOLDEN_FILE:\n      self.assertEqual(\n          normalized_golden,\n          normalized_actual,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1b4d0c47953a1c46ccdfdd36733445c679bab7c2266716494ceb42072edd256b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 338,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 336,
        "length": 17,
        "offset": 24,
        "surroundingCode": "      )\n    else:\n      normalized_actual = NormalizeToCurrentPlatform(\n          RemoveTestCounts(normalized_actual)\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d1dfb94db853884a2b4cb56c02e055f4e320639483c9230e85992d3103c401bc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 341,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 339,
        "length": 17,
        "offset": 60,
        "surroundingCode": "          RemoveTestCounts(normalized_actual)\n      )\n      normalized_golden = NormalizeToCurrentPlatform(\n          RemoveTestCounts(self.RemoveUnsupportedTests(normalized_golden))\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f2d39d26bbcdd71e391278cc681e3700d0453815f71d7994fac1a5f7627160ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 345,
      "offset": 7,
      "length": 65,
      "code": {
        "startLine": 343,
        "length": 65,
        "offset": 15,
        "surroundingCode": "      )\n\n      # This code is very handy when debugging golden file differences:\n      if os.getenv('DEBUG_GTEST_OUTPUT_TEST'):\n        open("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f678c18da0012f3957c8062a4ca575d29e186e9a0513f443e4621b56a7c674ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 346,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 344,
        "length": 2,
        "offset": 79,
        "surroundingCode": "\n      # This code is very handy when debugging golden file differences:\n      if os.getenv('DEBUG_GTEST_OUTPUT_TEST'):\n        open(\n            os.path.join("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d06e1ec338c0336ccaaddee4cabd466688eca92e01f922953cf648f74bdc934b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 362,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 360,
        "length": 4,
        "offset": 42,
        "surroundingCode": "        ).write(normalized_golden)\n\n      self.assertEqual(normalized_golden, normalized_actual)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "596159039aa4dcc3e7893c7e464399b6b4c1d294811f3411548caa1e299e6fe0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 366,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 364,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  if NO_STACKTRACE_SUPPORT_FLAG in sys.argv:\n    # unittest.main() can't handle unknown flags\n    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9ff8c06aedb8716cb0b1523b0c2eab5cb8061162e4c69adc9e43c99265475474"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 370,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 368,
        "length": 2,
        "offset": 51,
        "surroundingCode": "    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n\n  if GENGOLDEN_FLAG in sys.argv:\n    if CAN_GENERATE_GOLDEN_FILE:\n      output = GetOutputOfAllCommands()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "219ee9c7890c1f68319f5ab26355597e46c8f25c7fd9aca17a51a35dd074a84e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 372,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 370,
        "length": 6,
        "offset": 72,
        "surroundingCode": "  if GENGOLDEN_FLAG in sys.argv:\n    if CAN_GENERATE_GOLDEN_FILE:\n      output = GetOutputOfAllCommands()\n      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "71c5220f7d0b942129a22960ec227fa84c6828281d22c90f239a45a1729c15eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 373,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 371,
        "length": 11,
        "offset": 79,
        "surroundingCode": "    if CAN_GENERATE_GOLDEN_FILE:\n      output = GetOutputOfAllCommands()\n      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())\n      golden_file.close()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bd064a46bdd9c5b4b18a64e73016fd90956ea11b7fd05eed1f8bac9b9d84141f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 374,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 372,
        "length": 11,
        "offset": 90,
        "surroundingCode": "      output = GetOutputOfAllCommands()\n      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())\n      golden_file.close()\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5538356d1a8645ad105e86f005e308f6825bf97646e3bff5efd5c9ea529b4a6f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 375,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 373,
        "length": 11,
        "offset": 91,
        "surroundingCode": "      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())\n      golden_file.close()\n    else:\n      message = \"\"\"Unable to write a golden file when compiled in an environment"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "87b7d3b3316ada04d398b05fec8ebbcc56197ae46fca64fc27d2328669e60582"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 377,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 375,
        "length": 7,
        "offset": 42,
        "surroundingCode": "      golden_file.close()\n    else:\n      message = \"\"\"Unable to write a golden file when compiled in an environment\nthat does not support all the required features (death tests,\ntyped tests, stack traces, and multiple threads)."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5be38e6cdd44b27d2d9a4f528a8249040e58726ff6e1835d092fecb82a10731e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 382,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 380,
        "length": 3,
        "offset": 84,
        "surroundingCode": "Please build this test and generate the golden file using Blaze on Linux.\"\"\"\n\n      sys.stderr.write(message)\n      sys.exit(1)\n  else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bd5fe14b60142c231cda2cca2131f65e8dcc9c4338892ce1fd4e4a4efdc01001"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 383,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 381,
        "length": 3,
        "offset": 39,
        "surroundingCode": "\n      sys.stderr.write(message)\n      sys.exit(1)\n  else:\n    gtest_test_utils.Main()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c9ee1a39f5909ab74edf5ab7a2ec8ee0947c1e07c0dcd6b207f45f260ac4bc2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-output-test.py",
      "language": "Python",
      "line": 384,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 382,
        "length": 4,
        "offset": 52,
        "surroundingCode": "      sys.stderr.write(message)\n      sys.exit(1)\n  else:\n    gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "970ce99faad0edaa5f010fbc917045aa461c3eaa5af91a40dc39caa9c9acad65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 47,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 45,
        "length": 2,
        "offset": 35,
        "surroundingCode": "\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bd24503e50222303dfc5780a6e21c7d1df81535cf719b795c698e727223a49a2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 54,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 52,
        "length": 71,
        "offset": 34,
        "surroundingCode": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a83f96cc80d2e377f4e4dfcfe45475fbbef806c7ecad370c2b6e5384a2863514"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 56,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 54,
        "length": 2,
        "offset": 77,
        "surroundingCode": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3282989be81247fef03dc25b5ce3fb8c8336f73c66a01cb990af31caa7b1f7ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 56,
        "length": 4,
        "offset": 55,
        "surroundingCode": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3006625fd31fba30f00a93e525638212be7ea1a2f1d01b217e218abb57dd9210"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 59,
      "code": {
        "startLine": 61,
        "length": 59,
        "offset": 22,
        "surroundingCode": "\ndef GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n\n  args = [COMMAND]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3bde8104c117ac30685aed0b65ac5dbdd26b5d63daf930cacdff24ddd0491f2e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 65,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 63,
        "length": 4,
        "offset": 65,
        "surroundingCode": "  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n\n  args = [COMMAND]\n  if flag is not None:\n    args += [flag]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8878c809b8bd951a95beb1874da2c5b543e8439b20ca2596c245247d3075c34e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 66,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 64,
        "length": 2,
        "offset": 22,
        "surroundingCode": "\n  args = [COMMAND]\n  if flag is not None:\n    args += [flag]\n  return gtest_test_utils.Subprocess(args, env=environ).output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d8619d90f873da01e307d07ee11f74a6e1724483028d97576dd15767c7b28c04"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 68,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 66,
        "length": 6,
        "offset": 44,
        "surroundingCode": "  if flag is not None:\n    args += [flag]\n  return gtest_test_utils.Subprocess(args, env=environ).output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1a4cc161f54f7b8b3af9aa3aa58fe7cad974eb0c3c26e9314ccb94f252a739b5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 72,
      "offset": 3,
      "length": 76,
      "code": {
        "startLine": 70,
        "length": 76,
        "offset": 46,
        "surroundingCode": "\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "703d9da3e3edeb6de243eaa1d33747ef3ce5d4eef4e0fed80ec64b17af339ee0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 74,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 72,
        "length": 7,
        "offset": 82,
        "surroundingCode": "  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "05e650d32ab9b6b0c7f256503d2cf8d49cba66b453be68ab285ba8d778c642c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 75,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 73,
        "length": 9,
        "offset": 39,
        "surroundingCode": "\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ce996c247f21ae0f04f5e9da794edfd0441813073b0267f061312d5e0a0cc31d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 76,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 74,
        "length": 8,
        "offset": 69,
        "surroundingCode": "  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7904f80a86b175e0bf2c22cf3fe7c99be35871f9600ed83df8481dbad47c9e8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 77,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 75,
        "length": 9,
        "offset": 69,
        "surroundingCode": "  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "391c98925488242be19580b0d007c42dc617bea19b911e8720620e0dcda37c59"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 78,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 76,
        "length": 8,
        "offset": 65,
        "surroundingCode": "  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "37cbf0d68f0a7e00f54f6417ea7818007ab1bb39373eb85e957e1b8e13eabeee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 83,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 81,
        "length": 3,
        "offset": 53,
        "surroundingCode": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5a8a31faf515076043f8daa0e41c46edf1dd1fae1170a1883e22c98f0479922b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 101,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 99,
        "length": 8,
        "offset": 24,
        "surroundingCode": "\n    if IS_LINUX:\n      TestFlag('death_test_use_fork', '1', '0')\n      TestFlag('stack_trace_depth', '0', '100')\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c0989ecc45ce075e10bdb4c296d1a7b5fb15865492d225ea8a00825fcef8a78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 102,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 100,
        "length": 8,
        "offset": 71,
        "surroundingCode": "    if IS_LINUX:\n      TestFlag('death_test_use_fork', '1', '0')\n      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "de64d360fe622ace9db09414dc708f7dd0328cb22ea4fe0762aca517c7ca67e9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 104,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 102,
        "length": 3,
        "offset": 51,
        "surroundingCode": "      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE affects the output flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4c65979a3c807d10ee91620ec9b6a7181d2d87d7aded053faf62af10184804d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 111,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 109,
        "length": 3,
        "offset": 54,
        "surroundingCode": "    AssertEq('xml:tmp/bar.xml', GetFlag('output'))\n\n  def testXmlOutputFileOverride(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4d09a1ba28cef2c2d30f25ae01ba5a1a40e1bdbf57cc0a309ec59dd9d3eb0091"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-env-var-test.py",
      "language": "Python",
      "line": 120,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 118,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "649d4fabeb7cdfd469be6396d7848ab61a0a07db2aee2bda49a05c8d75a6701a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 43,
      "offset": 3,
      "length": 51,
      "code": {
        "startLine": 41,
        "length": 51,
        "offset": 38,
        "surroundingCode": "\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "17558f5b163062e5381abcbf0b28e86f6f0c00e25a058991c94a0fa8cbbe1f01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 45,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 43,
        "length": 6,
        "offset": 57,
        "surroundingCode": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess(\n      [\n          gtest_test_utils.GetTestExecutablePath("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c07a4b7262454db95f5f43473e50451805c80bffb81233544a8c6482773087d5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 56,
      "offset": 3,
      "length": 45,
      "code": {
        "startLine": 54,
        "length": 45,
        "offset": 68,
        "surroundingCode": "\nclass GTestGlobalEnvironmentUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests global test environment failures.\"\"\"\n\n  def testEnvironmentSetUpFails(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4095a2adb5279fa9e481e507f95253072da1dec4869fb5fb9a2c048d590beecb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 56,
        "length": 3,
        "offset": 51,
        "surroundingCode": "  \"\"\"Tests global test environment failures.\"\"\"\n\n  def testEnvironmentSetUpFails(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bff1070694535cc9e66ad3cff98394f62f4c240d4645d6ed90e4f0c83fa5c560"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 75,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 73,
        "length": 3,
        "offset": 48,
        "surroundingCode": "    self.assertNotIn('Unexpected call', txt)\n\n  def testEnvironmentSetUpAndTornDownForEachRepeat(self):\n    \"\"\"Tests the behavior of test environments and gtest_repeat.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f226a5ae227be091c2e1fe498f566c82aa77055431695d9e8f024f52ec30f949"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 106,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 104,
        "length": 3,
        "offset": 47,
        "surroundingCode": "    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1416586de8280ec846c088fbbe960cd0e49443d313091c2dad78913cca54bdb1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
      "language": "Python",
      "line": 141,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 139,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "82c909dcf2446ed3e2fcf6506e083c2822471e3340764a6d0de2af0d844531c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_skip_check_output_test.py",
      "language": "Python",
      "line": 49,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 47,
        "length": 3,
        "offset": 63,
        "surroundingCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "783fe8262ed33de4c3dcea96dcb7463dffb364d5572387e2cd5d0b23f3a447e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_skip_check_output_test.py",
      "language": "Python",
      "line": 60,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 58,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8d8747d7c753308ac33c5b7d9b59a35fe935fef037e8f40cceefb192015ab168"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 84,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 82,
        "length": 71,
        "offset": 34,
        "surroundingCode": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b850429b0cafbc146d357110dc1a4cf2f6c744b77dc51375d4342db60cf2e933"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 86,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 84,
        "length": 2,
        "offset": 77,
        "surroundingCode": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5e275f106eb65086d77fc6066a493c6bbcab544404c2663a7c7ab4fda58a3366"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 88,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 86,
        "length": 4,
        "offset": 55,
        "surroundingCode": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cff62fc43d3fe1cef0818ea220cac045d452cf00c26cabdb55a10dfed2ec843a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 93,
      "offset": 3,
      "length": 51,
      "code": {
        "startLine": 91,
        "length": 51,
        "offset": 80,
        "surroundingCode": "\ndef RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  args = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8b9a88c2e96077cbdab729c38de9785f984ec4dde8b77b40fd8fb3508b39ad91"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 95,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 93,
        "length": 4,
        "offset": 57,
        "surroundingCode": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  args = []\n  xml_path = os.path.join(\n      gtest_test_utils.GetTempDir(), '.GTestFailFastUnitTest.xml'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "906c5448878c234d0b72786b8f688b68710fcbeef3f950e1f75058547cded407"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 96,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 94,
        "length": 8,
        "offset": 15,
        "surroundingCode": "\n  args = []\n  xml_path = os.path.join(\n      gtest_test_utils.GetTempDir(), '.GTestFailFastUnitTest.xml'\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5d18aa50706954d1764ea6ff1e25da0e38393acf12ecf3f1dc2d10d1d06aebd8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 99,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 97,
        "length": 4,
        "offset": 72,
        "surroundingCode": "      gtest_test_utils.GetTempDir(), '.GTestFailFastUnitTest.xml'\n  )\n  args += ['--gtest_output=xml:' + xml_path]\n  if fail_fast is not None:\n    if isinstance(fail_fast, str):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "788da06d6e59053ea1c0aa569163e1bc44fceb47e73a38145dc0608a9e4e0099"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 100,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 98,
        "length": 2,
        "offset": 51,
        "surroundingCode": "  )\n  args += ['--gtest_output=xml:' + xml_path]\n  if fail_fast is not None:\n    if isinstance(fail_fast, str):\n      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c1966a1d0197271cac67bc20a05de1bcc80e3fcfb916e64db231cd68b31b2db2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 102,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 100,
        "length": 4,
        "offset": 69,
        "surroundingCode": "  if fail_fast is not None:\n    if isinstance(fail_fast, str):\n      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]\n    elif fail_fast:\n      args += ['--%s' % FAIL_FAST_FLAG]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a6f51f0a2f19354c526ad49020f4dc260f2802bbb1faf975fe5eae04f9c0622e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 104,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 102,
        "length": 4,
        "offset": 82,
        "surroundingCode": "      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]\n    elif fail_fast:\n      args += ['--%s' % FAIL_FAST_FLAG]\n    else:\n      args += ['--no%s' % FAIL_FAST_FLAG]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f74d1bf2617a1cfcda8752579dde3844932a52b404f80c63339460a4a307b23f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 106,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 104,
        "length": 4,
        "offset": 56,
        "surroundingCode": "      args += ['--%s' % FAIL_FAST_FLAG]\n    else:\n      args += ['--no%s' % FAIL_FAST_FLAG]\n  if test_suite:\n    args += ['--%s=%s.*' % (FILTER_FLAG, test_suite)]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "419566af5992be8e4851ab0a16335fb02a5e89a0334231d022fbb15be746d105"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 107,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 105,
        "length": 2,
        "offset": 54,
        "surroundingCode": "    else:\n      args += ['--no%s' % FAIL_FAST_FLAG]\n  if test_suite:\n    args += ['--%s=%s.*' % (FILTER_FLAG, test_suite)]\n  if run_disabled:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d39ffc9bc6a216883032a7fe76fd3ead1d80cb3ed433ecee7db8dcee7fae3d86"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 109,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 107,
        "length": 2,
        "offset": 73,
        "surroundingCode": "  if test_suite:\n    args += ['--%s=%s.*' % (FILTER_FLAG, test_suite)]\n  if run_disabled:\n    args += ['--%s' % RUN_DISABLED_FLAG]\n  txt_out = gtest_test_utils.Subprocess([COMMAND] + args, env=environ).output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bf30b295a3629d8050d2bf35eb7ff016f7bf036e5b9411c83f2e528fc1b560b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 111,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 109,
        "length": 7,
        "offset": 62,
        "surroundingCode": "  if run_disabled:\n    args += ['--%s' % RUN_DISABLED_FLAG]\n  txt_out = gtest_test_utils.Subprocess([COMMAND] + args, env=environ).output\n  with open(xml_path) as xml_file:\n    return txt_out, xml_file.read()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b8e1517a3da098cd7071df669abd1ada8a82591f0fb0ca1722138ce3d8eb17c6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 112,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 110,
        "length": 4,
        "offset": 121,
        "surroundingCode": "    args += ['--%s' % RUN_DISABLED_FLAG]\n  txt_out = gtest_test_utils.Subprocess([COMMAND] + args, env=environ).output\n  with open(xml_path) as xml_file:\n    return txt_out, xml_file.read()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3363b8cfde9d04c72cda00ad64d848d9107601899f96e4c009759ec1d3f97ccb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 118,
      "offset": 3,
      "length": 68,
      "code": {
        "startLine": 116,
        "length": 68,
        "offset": 75,
        "surroundingCode": "# The unit test.\nclass GTestFailFastUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b4e02ad9f948a2c0ce93fb861b7ec086348b051db31e58be4d190d854f5664dc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 120,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 118,
        "length": 3,
        "offset": 74,
        "surroundingCode": "  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d2d0a749ed2988db686fb52ef64dcd5c4e6cef49f8ed744630ea14c93c1b03b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 126,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 124,
        "length": 3,
        "offset": 44,
        "surroundingCode": "    self.assertIn('22 FAILED TEST', txt)\n\n  def testGoogletestFlag(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSimpleTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1cb2908626879589fd5bfbb4e43873b49fd898867af434dabdb9d89754086fed"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 135,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 133,
        "length": 3,
        "offset": 45,
        "surroundingCode": "    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e2c3e71d00140bccd61a48ca10d63a9ff5de78acb9fcd8170b9ce7129ed74003"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 139,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 137,
        "length": 9,
        "offset": 16,
        "surroundingCode": "\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "44bdac0fb8f8eaf5d4461cc2657a811fe539883c813eeb443f7055b376a5bc43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 140,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 138,
        "length": 3,
        "offset": 55,
        "surroundingCode": "    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "279bfa09df7f53b91554c549d74c9a79e078e05bd6baf5f5cca7da4d0cafde02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 141,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 139,
        "length": 4,
        "offset": 97,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5c5dbad494bcd74b3b0ece293f2b44b31342dc63e8f9443ac86564aa14dfa1ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 142,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 140,
        "length": 4,
        "offset": 99,
        "surroundingCode": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fe9de38949b1ff550d02bb170f56b0faec23244b31067e22bab9d48c380b545a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 144,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 142,
        "length": 9,
        "offset": 56,
        "surroundingCode": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "54d9246a5c58ce64b43227892b51655acb988d9d774ae8ce4100e9084468986b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 145,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 143,
        "length": 3,
        "offset": 47,
        "surroundingCode": "\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "52081d826d6d564d95bff67fccf85e7c00cc04bab3c5498a3f5a79dad6a5d72c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 146,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 144,
        "length": 4,
        "offset": 97,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7b8e94bad6983dc2bffba4bcd79d0e3a028596be61bc5fc6d8b13bf0710c0db7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 147,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 145,
        "length": 4,
        "offset": 99,
        "surroundingCode": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "46f5eaf7cbf13cbc81d0092eb12a8dc4ded16b33a03a7e8ba77e230c1ecbf58e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 149,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 147,
        "length": 9,
        "offset": 63,
        "surroundingCode": "      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testBazelEnvVar(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6756a9b64cd92f9c697d2abc861f68cfe9b25c50cc12e1785c60896513212d05"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 151,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 149,
        "length": 3,
        "offset": 44,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testBazelEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0133539330b3db4156e8020bba4efc697914ce9edb3cc4d93324505ee1065a12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 155,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 153,
        "length": 9,
        "offset": 16,
        "surroundingCode": "\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "43343fd7c38cc44192948008bfa909b9715e4cd6243379319adb809adad774a7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 156,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 154,
        "length": 3,
        "offset": 61,
        "surroundingCode": "    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fe293e19a943f082fe687ea6142461a414da5475fdd1025adbf435b1e0c388e1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 157,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 155,
        "length": 4,
        "offset": 103,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "039b3a89a4f9b06bd19f254503ce89fe16804ece4b9b3de2637f3ccc1c40a95d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 158,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 156,
        "length": 4,
        "offset": 99,
        "surroundingCode": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "efcf2c5cc1dbfdfa6da41bfbe78de166becca38bcffeee3d8b60663b9805a940"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 160,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 158,
        "length": 9,
        "offset": 56,
        "surroundingCode": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2d1af7ae922442d993b7656348489e75ffccf27716ce2309bbe41e99afe45852"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 161,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 159,
        "length": 3,
        "offset": 53,
        "surroundingCode": "\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "90c8b6ebb3a67f56a54ef822c48d14f2bb9efcdb907edea8021aa25ad2eff2b3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 162,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 160,
        "length": 4,
        "offset": 103,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ae6d05fc25d8170b80588906fc4c4a2f8662885678de40217bb741fad6d52385"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 163,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 161,
        "length": 4,
        "offset": 99,
        "surroundingCode": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2211de6e3926f08f5bf367540d497136571cf0a8bb41e7943dd0f805572ca7bb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 165,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 163,
        "length": 9,
        "offset": 63,
        "surroundingCode": "      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b47c35b4432cbdd6f4c8e159b1b1d62c95a4671f591c0ce62ff57632bf81da5a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 167,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 165,
        "length": 3,
        "offset": 50,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4655ea2feaaf32c4daecf5c747f5af8ba48f31e641045507bc1d635e09562147"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 171,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 169,
        "length": 9,
        "offset": 16,
        "surroundingCode": "\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3f6cf60b315c1af8d106f535f626efddb7ea8577511a396812a3d9fad73a681a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 172,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 170,
        "length": 3,
        "offset": 55,
        "surroundingCode": "    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6635c96ffdd19e968ebe2c9af020f47fbf6d6eb8617482ce746e78d3aee389e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 173,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 171,
        "length": 4,
        "offset": 103,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5cc7266c678d57b0071edf2d4eb71c52b89d610a9fa75ad51b8f16142300c5f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 174,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 172,
        "length": 4,
        "offset": 105,
        "surroundingCode": "      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "80542049ba9ce2e2645a8687958edfec23f305340a8ad0cedf84e0f411f8527c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 176,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 174,
        "length": 9,
        "offset": 68,
        "surroundingCode": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2a7438001eb944020c3cee0e05c46904bbd9e32f2f8a95c168fba79c1da8cae3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 178,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 176,
        "length": 3,
        "offset": 44,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "208a953e4cee5e49cfdaf4aba5b1d28e4c8626231be8cdb74576d9260884f266"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 182,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 16,
        "surroundingCode": "\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5df6e5314796a53d0c82b117a90eb5fcdae61ab0a1af3f4a4eb94da4f4522c1b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 183,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 181,
        "length": 9,
        "offset": 61,
        "surroundingCode": "    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b7791f71f7b03f12f37b56f13d62805f897158f88d0ee68865ac4219aaa5ff1d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 184,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 182,
        "length": 3,
        "offset": 92,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "254a7d9f9c39bc664446f057dc7e5175fa29d0e60a0c7013558a1f866c123cfb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 185,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 183,
        "length": 4,
        "offset": 97,
        "surroundingCode": "      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c9ed6b068e124b78d7120767fd3c4c3798e974bd70c38fd374627e755693b4ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 186,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 184,
        "length": 4,
        "offset": 99,
        "surroundingCode": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "24f4f9882b37c20911035d5b0618e1cf1eaf50d2c79619eeb96952350d1d6154"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 188,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 186,
        "length": 9,
        "offset": 68,
        "surroundingCode": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ae682a723462aa6084e730fe4782381947aada9ee8dacf24cae26c0a9f219e61"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 189,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 187,
        "length": 9,
        "offset": 60,
        "surroundingCode": "    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testEventListener(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cf1cea1127af95fadfb1a5ffb1fecb3bb6046e8952ca88c708418e0a40097049"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 191,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 189,
        "length": 3,
        "offset": 50,
        "surroundingCode": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testEventListener(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSkipTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a5fc372c4d5d1dfc5f18f2b9ac09f4f3d9d8fa490b343a55dea0e0e3b875a810"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 202,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 200,
        "length": 4,
        "offset": 44,
        "surroundingCode": "        (1, 'OnTestSuiteEnd'),\n    ]:\n      self.assertEqual(\n          expected_count,\n          txt.count(callback),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "91efc1976ab6aa9b0bfd5a23f516b33ecfd00820e7272ca74811ca0894f6ef6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 219,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 217,
        "length": 4,
        "offset": 44,
        "surroundingCode": "        (1, 'OnTestSuiteEnd'),\n    ]:\n      self.assertEqual(\n          expected_count,\n          txt.count(callback),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "37fa8a0aacdf4d9b96882000658c2095156dc539b7fa4940118301537bfb49be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 226,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 224,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def assertXmlResultCount(self, result, count, xml):\n    self.assertEqual(\n        count,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "adb133a8ac3a4896e8b6c3b8e32d13b081436da09dfeb22f3098110502723b4c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 234,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 232,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def assertXmlStatusCount(self, status, count, xml):\n    self.assertEqual(\n        count,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a28c570ed34b004d8cef2d718935ab210ac8a705ec4921b5372223b58f813a36"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 242,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 240,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def assertFailFastXmlAndTxtOutput(\n      self,\n      fail_fast,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "771b86ecacaf14b4b78484dc885d57f8bbc5be3658672af3413610e7566c34f0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 256,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 254,
        "length": 4,
        "offset": 103,
        "surroundingCode": "    txt, xml = RunAndReturnOutput(test_suite, fail_fast, run_disabled)\n    if failure_count > 0:\n      self.assertIn('%s FAILED TEST' % failure_count, txt)\n    if suppressed_count > 0:\n      self.assertIn('%s DISABLED TEST' % suppressed_count, txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "35ba0349b1f00e54eae5d0fcf9462ed602bd63d6649bfa8443a4d316f6bf04c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 258,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 256,
        "length": 4,
        "offset": 94,
        "surroundingCode": "      self.assertIn('%s FAILED TEST' % failure_count, txt)\n    if suppressed_count > 0:\n      self.assertIn('%s DISABLED TEST' % suppressed_count, txt)\n    if skipped_count > 0:\n      self.assertIn('[  SKIPPED ] %s tests' % skipped_count, txt)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "33456410b8b658821ecae9828802dd13ceeb5fb4a17c30fc513701d6c618b7b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 260,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 258,
        "length": 4,
        "offset": 96,
        "surroundingCode": "      self.assertIn('%s DISABLED TEST' % suppressed_count, txt)\n    if skipped_count > 0:\n      self.assertIn('[  SKIPPED ] %s tests' % skipped_count, txt)\n    self.assertXmlStatusCount(\n        'run', passed_count + failure_count + skipped_count, xml"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c5f89b0a576c314a4f2b28035bbfbbd110851ecdbecf0e65143ac8a328a06005"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 269,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 267,
        "length": 3,
        "offset": 70,
        "surroundingCode": "    self.assertXmlResultCount('suppressed', suppressed_count, xml)\n\n  def assertFailFastBehavior(\n      self,\n      test_suite,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "befe21f3831c7feaa8d5b45453fdb15db629ac0a60f708cea15009fdd39d2856"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 281,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 279,
        "length": 4,
        "offset": 54,
        "surroundingCode": "\n    for fail_fast in ('true', '1', 't', True):\n      self.assertFailFastXmlAndTxtOutput(\n          fail_fast,\n          test_suite,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4691e6198165ff12b693be91a9b5e43bb760cbe1252127721bce027605c2978d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 291,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 289,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def assertNotFailFastBehavior(\n      self,\n      test_suite,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "66e2663097d3fd325e7f26b07b8aed8fa684055310d29263c11281274af90b68"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 303,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 301,
        "length": 4,
        "offset": 56,
        "surroundingCode": "\n    for fail_fast in ('false', '0', 'f', False):\n      self.assertFailFastXmlAndTxtOutput(\n          fail_fast,\n          test_suite,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9a275dca79519a5119c5e305140179346ea836464cf0f2c98468cc8220259c66"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 313,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 311,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def testFlag_HasFixtureTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_F.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0955f44bcf4bb0412c828b59ebdb29032ce5083fe51795a8c8ed48e55ae385b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 330,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 328,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlag_HasSimpleTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8a4b10735ea0f198577f6d2d5a273d327abfecba50e6547b106b627280859ddd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 347,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 345,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlag_HasParametersTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_P.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2467744ed1ad68195d83dc95f248e4256ddbb097e5f5f1395b2c2e2884b03cb4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 364,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 362,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f53142e6f352515081086c3bd6557d68d7da7b640efc17ffd179d49ccc8a7d9f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 383,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 381,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases enabled.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "108ac331a6f143efb69beeb1eeb41afe4055a0dea33f2decf0797d8e9f9e0f02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 402,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 400,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledSuiteTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5f970f5c3f8d904718cf2b4eadaadc5528442dbe96f705cf5e5bb88bac7e7c39"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 421,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 419,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testFlag_HasDisabledSuiteRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites enabled.\"\"\"\n    self.assertFailFastBehavior("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e02c2ecab80d1bda33c9d4fe45108cdaeed04fd0674c7b1200a5919db4bdd195"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 440,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 438,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if SUPPORTS_DEATH_TESTS:\n\n    def testFlag_HasDeathTest(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e2943fe74c88e653ae8213d3a81e664c196a23d1f770beb1b3ae3569e2081e03"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 443,
      "offset": 7,
      "length": 54,
      "code": {
        "startLine": 441,
        "length": 54,
        "offset": 44,
        "surroundingCode": "\n    def testFlag_HasDeathTest(self):\n      \"\"\"Tests the behavior of fail_fast and death tests.\"\"\"\n      self.assertFailFastBehavior(\n          test_suite='HasDeathTest',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "51526b7033ecd683d81f038b80b16546a83276dffaf764bb346796bf54670bc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 444,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 442,
        "length": 4,
        "offset": 104,
        "surroundingCode": "    def testFlag_HasDeathTest(self):\n      \"\"\"Tests the behavior of fail_fast and death tests.\"\"\"\n      self.assertFailFastBehavior(\n          test_suite='HasDeathTest',\n          passed_count=1,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "24560b190a66c427c27375ab0ce4e76f6e93ae59e0caa9316166edda006e329a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 451,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 449,
        "length": 4,
        "offset": 44,
        "surroundingCode": "          suppressed_count=0,\n      )\n      self.assertNotFailFastBehavior(\n          test_suite='HasDeathTest',\n          passed_count=1,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "00eb9466d4fbc8139c692264c15858069ab666768bb2c4a220de09d016fe65ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
      "language": "Python",
      "line": 461,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 459,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "142e48d058ea44a150b3fdfd70efc8ec83293d67ebdf619a7c65dc2c2b145f92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_skip_environment_check_output_test.py",
      "language": "Python",
      "line": 49,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 47,
        "length": 3,
        "offset": 63,
        "surroundingCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7d20ebdb122aac40bc3a07fa23ef5f053988df31e49c3f2c21dd1692b209e68a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_skip_environment_check_output_test.py",
      "language": "Python",
      "line": 55,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 53,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c0724676560870995feb3951558e1d5ca529c9fdd978ae9732d8ff7df9ecf693"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 57,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 55,
        "length": 6,
        "offset": 35,
        "surroundingCode": "\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bd94a345b7f1a42af5d9ead495c5a944c6c17ce6f5d3ca3103aee90e0266d92a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 32,
        "surroundingCode": "\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "80626d6d95503c1133a413b6dfe9ac2bbfe6d3b61c43090302901d74534ea2f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 65,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 63,
        "length": 6,
        "offset": 22,
        "surroundingCode": "\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9a9719bee183a6be179840e819cdf6296002ba895768f485337a48a0a71d3b33"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 69,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 22,
        "surroundingCode": "\ndef ShuffleFlag():\n  return '--gtest_shuffle'\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "64c7e0a35d1acd4ffcf0f1b9dae9c3e12af2398b8697e685b248d1594590c51b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 73,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 71,
        "length": 6,
        "offset": 26,
        "surroundingCode": "\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b2c5067e8c5003ced39a80a5e026fe1d217dc83655c3c5b8e7cff81957a3269f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 77,
      "offset": 3,
      "length": 51,
      "code": {
        "startLine": 75,
        "length": 51,
        "offset": 44,
        "surroundingCode": "\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  environ_copy = os.environ.copy()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "df5d666d88873e7f535f56dad7809011709a730637d16c77f56e287ee1b39c47"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 79,
      "offset": 3,
      "length": 12,
      "code": {
        "startLine": 77,
        "length": 12,
        "offset": 57,
        "surroundingCode": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a35f07355f3e8c0498e62f8c39a43efcebb2f65b496c8b732f53c363a28303a1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 80,
      "offset": 3,
      "length": 12,
      "code": {
        "startLine": 78,
        "length": 12,
        "offset": 38,
        "surroundingCode": "\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a72f63ef15b6c8974219ee8491019d569424a190d0d0c215cf1ceda0600bcd65"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 82,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 80,
        "length": 6,
        "offset": 36,
        "surroundingCode": "  environ_copy.update(extra_env)\n\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bb19e99d6b5718f988a08eb083c966f960020ee32d83cb6e7bea36a9942c46e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 86,
      "offset": 3,
      "length": 58,
      "code": {
        "startLine": 84,
        "length": 58,
        "offset": 50,
        "surroundingCode": "\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4d87804e0feb3632748b80fc94e63c22cb3024cee2de1a73539224f2d4587c98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 97,
      "offset": 3,
      "length": 15,
      "code": {
        "startLine": 95,
        "length": 15,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  test_iterations = []\n  for line in RunAndReturnOutput(extra_env, args).split('\\n'):\n    if line.startswith('----'):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "13276b55e39db51d85f7c68884a4867386284e1430161b63fd126e9d87fc491e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 98,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 96,
        "length": 3,
        "offset": 26,
        "surroundingCode": "\n  test_iterations = []\n  for line in RunAndReturnOutput(extra_env, args).split('\\n'):\n    if line.startswith('----'):\n      tests = []"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8a9edb0fe6bbfd2bea649cebd353eab5f2b119a55e6f1a0bb1fd45bd8ca6e990"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 100,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 98,
        "length": 5,
        "offset": 101,
        "surroundingCode": "  for line in RunAndReturnOutput(extra_env, args).split('\\n'):\n    if line.startswith('----'):\n      tests = []\n      test_iterations.append(tests)\n    elif line.strip():"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a0df234097db5a2a3835f85f237146865f6881e36c8fa04538a437be52bf00ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 101,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 99,
        "length": 15,
        "offset": 55,
        "surroundingCode": "    if line.startswith('----'):\n      tests = []\n      test_iterations.append(tests)\n    elif line.strip():\n      tests.append(line.strip())  # 'TestCaseName.TestName'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "de44d31cc34616b9629a8d6555f041a2c4a73b85fa6cd778feb7b69f693c7730"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 103,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 101,
        "length": 5,
        "offset": 65,
        "surroundingCode": "      test_iterations.append(tests)\n    elif line.strip():\n      tests.append(line.strip())  # 'TestCaseName.TestName'\n\n  return test_iterations"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "12589c562844fd6080751aff9fffd9d371c190c07ffd905a6bb346e3a4f1b16a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 105,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 103,
        "length": 6,
        "offset": 63,
        "surroundingCode": "      tests.append(line.strip())  # 'TestCaseName.TestName'\n\n  return test_iterations\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9df284e58643a12ae71db2ead7caa8d369feace8cc562a96a0f44ad859da7e78"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 109,
      "offset": 3,
      "length": 61,
      "code": {
        "startLine": 107,
        "length": 61,
        "offset": 28,
        "surroundingCode": "\ndef GetTestCases(tests):\n  \"\"\"Returns a list of test cases in the given full test names.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ac645a23d9471fb2dc840f4092f6f1eb3d0770669d7899bff125a9715bd90326"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 119,
      "offset": 3,
      "length": 10,
      "code": {
        "startLine": 117,
        "length": 10,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  test_cases = []\n  for test in tests:\n    test_case = test.split('.')[0]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a7ff4e7e3d5d11c9870c7209b0dcff91342d82c54636765bcc3da08fd6a279ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 120,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 118,
        "length": 3,
        "offset": 21,
        "surroundingCode": "\n  test_cases = []\n  for test in tests:\n    test_case = test.split('.')[0]\n    if not test_case in test_cases:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c9031026abc5e4160f1c075d84c53c5823832f12c6d3821ae3de2cc580be6fef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E713 test for membership should be 'not in'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 122,
      "offset": 8,
      "length": 3,
      "code": {
        "startLine": 120,
        "length": 3,
        "offset": 63,
        "surroundingCode": "  for test in tests:\n    test_case = test.split('.')[0]\n    if not test_case in test_cases:\n      test_cases.append(test_case)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e4be58b0ccf2a6783843b0bf00afe80249c5443a1cc1bb74ddb5f382763389ee"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 123,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 121,
        "length": 10,
        "offset": 77,
        "surroundingCode": "    test_case = test.split('.')[0]\n    if not test_case in test_cases:\n      test_cases.append(test_case)\n\n  return test_cases"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a40a84465193fc5e201268f6fd50e04b70d0034ae3cb7fd4d88774c423089a0c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 125,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 123,
        "length": 6,
        "offset": 38,
        "surroundingCode": "      test_cases.append(test_case)\n\n  return test_cases\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2a0ac22a975f158499c7b4fa5b4fc6e8dea4edde929f7e4f8ff5168d3a9522c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 129,
      "offset": 3,
      "length": 61,
      "code": {
        "startLine": 127,
        "length": 61,
        "offset": 29,
        "surroundingCode": "\ndef CalculateTestLists():\n  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n\n  if not ALL_TESTS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "037820d7d04ba65243dd814a4688253954d31b1dd60a3642ff7a6d75c09093ad"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 131,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 129,
        "length": 2,
        "offset": 67,
        "surroundingCode": "  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n\n  if not ALL_TESTS:\n    ALL_TESTS.extend(\n        GetTestsForAllIterations({}, [AlsoRunDisabledTestsFlag()])[0]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2a59a07484492ff3ea7409d4063fcda8da270372faceae720c2a209346a380bf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 136,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 134,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if not ACTIVE_TESTS:\n    ACTIVE_TESTS.extend(GetTestsForAllIterations({}, [])[0])\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "79d77d81fdd3019876d380b6fc14fc1b3844d40b421bccfb45fcfe1c56f3ede2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 139,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 137,
        "length": 2,
        "offset": 64,
        "surroundingCode": "    ACTIVE_TESTS.extend(GetTestsForAllIterations({}, [])[0])\n\n  if not FILTERED_TESTS:\n    FILTERED_TESTS.extend(\n        GetTestsForAllIterations({}, [FilterFlag(TEST_FILTER)])[0]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a12e4330490f5c7e549c32b6490bd911e5e4fa376f16324fe82001e028308794"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 144,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 142,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if not SHARDED_TESTS:\n    SHARDED_TESTS.extend(\n        GetTestsForAllIterations("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7d07b358922a8b1c460587f9b0d97d2087f4e7f470e3601a8f24c75a051ac5af"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 151,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 149,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if not SHUFFLED_ALL_TESTS:\n    SHUFFLED_ALL_TESTS.extend(\n        GetTestsForAllIterations("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "23cbe71bbc8bdc1d4d1e874092e50ed6ae8a723658b8dd5a7a2ba2f929a0f250"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 158,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 156,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if not SHUFFLED_ACTIVE_TESTS:\n    SHUFFLED_ACTIVE_TESTS.extend(\n        GetTestsForAllIterations({}, [ShuffleFlag(), RandomSeedFlag(1)])[0]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f8ba4d4a89761f7d806576172e2075b37d9fb34d8f43938df4b5026e2efced51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 163,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 161,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if not SHUFFLED_FILTERED_TESTS:\n    SHUFFLED_FILTERED_TESTS.extend(\n        GetTestsForAllIterations("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a247394448b69ae2ceea12810119ab79c469acd2049b455ef80056d94e8b7af7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 170,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 168,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if not SHUFFLED_SHARDED_TESTS:\n    SHUFFLED_SHARDED_TESTS.extend(\n        GetTestsForAllIterations("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "686d77078eedea8535f45abf7706270bea34c96c32b316bd955adc0ed6679cfe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 180,
      "offset": 3,
      "length": 27,
      "code": {
        "startLine": 178,
        "length": 27,
        "offset": 58,
        "surroundingCode": "\nclass GTestShuffleUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b28c17537648d9036092f4bc35dfe300fef5a221b67d30ce92558cf5d2eb69ea"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 182,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 180,
        "length": 3,
        "offset": 33,
        "surroundingCode": "  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):\n    CalculateTestLists()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bf0710104481af3b35eedb4d5120c572e48895ae1868a2c8e451c1c9845893df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 185,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 183,
        "length": 3,
        "offset": 28,
        "surroundingCode": "    CalculateTestLists()\n\n  def testShufflePreservesNumberOfTests(self):\n    self.assertEqual(len(ALL_TESTS), len(SHUFFLED_ALL_TESTS))\n    self.assertEqual(len(ACTIVE_TESTS), len(SHUFFLED_ACTIVE_TESTS))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e6f940d646e921cafe0d989635efd1501d0fedd1b2e72a871527035850691452"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 191,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 189,
        "length": 3,
        "offset": 73,
        "surroundingCode": "    self.assertEqual(len(SHARDED_TESTS), len(SHUFFLED_SHARDED_TESTS))\n\n  def testShuffleChangesTestOrder(self):\n    self.assertTrue(SHUFFLED_ALL_TESTS != ALL_TESTS, SHUFFLED_ALL_TESTS)\n    self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "313ffae4269fdd7015b29207c7f93763251db6157926719e71bab92f439fc8e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 203,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 201,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testShuffleChangesTestCaseOrder(self):\n    self.assertTrue(\n        GetTestCases(SHUFFLED_ALL_TESTS) != GetTestCases(ALL_TESTS),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "83d93f2715cd6d3b2b9e7d8817753ef19a5a9676df8720018a29b7461ea2dcb1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 221,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 219,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testShuffleDoesNotRepeatTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertEqual("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d22821fc84e6460735567f71573c1d99d530319e0513807392cf75aff90f9b22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 223,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 221,
        "length": 4,
        "offset": 84,
        "surroundingCode": "  def testShuffleDoesNotRepeatTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_ALL_TESTS.count(test),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "54378e03c0617a6c3901b26003653c4407bd1f285b6a401a6298319661e40aaa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 229,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 227,
        "length": 4,
        "offset": 53,
        "surroundingCode": "      )\n    for test in SHUFFLED_ACTIVE_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_ACTIVE_TESTS.count(test),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fd4311628b3004620c58f0261b95f3c7aa13bdce7de1b7baa81733112122cc95"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 235,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 233,
        "length": 4,
        "offset": 55,
        "surroundingCode": "      )\n    for test in SHUFFLED_FILTERED_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_FILTERED_TESTS.count(test),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7da4af5fe19887001f5e3f166ccb40aee6b3d524d95b7726abbe7295a2caf75f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 241,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 239,
        "length": 4,
        "offset": 54,
        "surroundingCode": "      )\n    for test in SHUFFLED_SHARDED_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_SHARDED_TESTS.count(test),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1e6d7dc1d344a3a3cc76c9742c313f71f3dfb91521d15363f816dc0e2fd8458a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 247,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 245,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def testShuffleDoesNotCreateNewTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d37881dc2f80cbae7b436f081f4c5f99aabd23c5ab259818768230c78a7a59ae"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 249,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 247,
        "length": 4,
        "offset": 87,
        "surroundingCode": "  def testShuffleDoesNotCreateNewTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_ACTIVE_TESTS:\n      self.assertTrue(test in ACTIVE_TESTS, '%s is an invalid test' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "60fe86c745a0f867748773174c80a499796b999254e04295e4f452f2f2c32d4c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 251,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 249,
        "length": 4,
        "offset": 121,
        "surroundingCode": "      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_ACTIVE_TESTS:\n      self.assertTrue(test in ACTIVE_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_FILTERED_TESTS:\n      self.assertTrue(test in FILTERED_TESTS, '%s is an invalid test' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bb0ab60be998c435daf3926563a50be1036f7845a6759a6bfc56143ac0d837bc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 253,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 251,
        "length": 4,
        "offset": 126,
        "surroundingCode": "      self.assertTrue(test in ACTIVE_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_FILTERED_TESTS:\n      self.assertTrue(test in FILTERED_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_SHARDED_TESTS:\n      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e12dc998a6a0d6e5eecdf339b83301b2b273721bc039cbe25299db1c11911092"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 255,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 253,
        "length": 4,
        "offset": 127,
        "surroundingCode": "      self.assertTrue(test in FILTERED_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_SHARDED_TESTS:\n      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))\n\n  def testShuffleIncludesAllTests(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cd45630aee7b075f84d95783484f199c298c50a4d73f6eeb69589855cf85b68e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 257,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 255,
        "length": 3,
        "offset": 83,
        "surroundingCode": "      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))\n\n  def testShuffleIncludesAllTests(self):\n    for test in ALL_TESTS:\n      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d0cce7ea57af08d6bdcb5b4fbfe1839918f6928c5e828d600e5017a1ed77460c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 259,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 257,
        "length": 4,
        "offset": 74,
        "surroundingCode": "  def testShuffleIncludesAllTests(self):\n    for test in ALL_TESTS:\n      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))\n    for test in ACTIVE_TESTS:\n      self.assertTrue(test in SHUFFLED_ACTIVE_TESTS, '%s is missing' % (test,))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c47897b04aa05a1265292d9b1f7d46b9336c4fbe5d25f4f93be9d2c76d84f581"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 261,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 259,
        "length": 4,
        "offset": 113,
        "surroundingCode": "      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))\n    for test in ACTIVE_TESTS:\n      self.assertTrue(test in SHUFFLED_ACTIVE_TESTS, '%s is missing' % (test,))\n    for test in FILTERED_TESTS:\n      self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dac3e16a803786ef37b0afbdf1c8912ded8205e030bdf89ad724fee007ef5e9e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 263,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 261,
        "length": 4,
        "offset": 118,
        "surroundingCode": "      self.assertTrue(test in SHUFFLED_ACTIVE_TESTS, '%s is missing' % (test,))\n    for test in FILTERED_TESTS:\n      self.assertTrue(\n          test in SHUFFLED_FILTERED_TESTS, '%s is missing' % (test,)\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "df2c7b145a39d9f5fa74e17cd9c78bbc6a57a96f94622f9b795f9d5da7995157"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 267,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 265,
        "length": 4,
        "offset": 45,
        "surroundingCode": "      )\n    for test in SHARDED_TESTS:\n      self.assertTrue(test in SHUFFLED_SHARDED_TESTS, '%s is missing' % (test,))\n\n  def testShuffleLeavesDeathTestsAtFront(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "580db5dbc4f72867bc196d0e9bf83e8aa4d6cda8512d161c742ae101c63f8a67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 269,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 267,
        "length": 3,
        "offset": 84,
        "surroundingCode": "      self.assertTrue(test in SHUFFLED_SHARDED_TESTS, '%s is missing' % (test,))\n\n  def testShuffleLeavesDeathTestsAtFront(self):\n    non_death_test_found = False\n    for test in SHUFFLED_ACTIVE_TESTS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "65d461970db9df19d887838454b80672ff31ab099aecd2c58f88e40fd95c7ffa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 272,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 270,
        "length": 2,
        "offset": 78,
        "surroundingCode": "    non_death_test_found = False\n    for test in SHUFFLED_ACTIVE_TESTS:\n      if 'DeathTest.' in test:\n        self.assertTrue(\n            not non_death_test_found,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cafc67115e135ec7e892e11b83ca992d04837446971f636ef7cb72bc61b17e4e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 277,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 275,
        "length": 4,
        "offset": 75,
        "surroundingCode": "            '%s appears after a non-death test' % (test,),\n        )\n      else:\n        non_death_test_found = True\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "afbc585815e8c74b99cc8b360dbbf0ca82b1ef84a3ba8db47a570a12af6c3dc6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 280,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 278,
        "length": 3,
        "offset": 39,
        "surroundingCode": "        non_death_test_found = True\n\n  def _VerifyTestCasesDoNotInterleave(self, tests):\n    test_cases = []\n    for test in tests:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "186ecb3977a404d10da7914420134922866feacf1a6ac6c249e7948b50c1003d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 283,
      "offset": 7,
      "length": 1,
      "code": {
        "startLine": 281,
        "length": 1,
        "offset": 49,
        "surroundingCode": "    test_cases = []\n    for test in tests:\n      [test_case, _] = test.split('.')\n      if test_cases and test_cases[-1] != test_case:\n        test_cases.append(test_case)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2fb392953f5c163c948d28e08dd4cd14f8916b4df73a74be4367b8cc2eb9d8b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 284,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 282,
        "length": 2,
        "offset": 68,
        "surroundingCode": "    for test in tests:\n      [test_case, _] = test.split('.')\n      if test_cases and test_cases[-1] != test_case:\n        test_cases.append(test_case)\n        self.assertEqual("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "48e99eaf0acab148fb22d550de9a89fc12bba1c0d23c1988decc9f99d55fa9d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 292,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 290,
        "length": 3,
        "offset": 13,
        "surroundingCode": "        )\n\n  def testShuffleDoesNotInterleaveTestCases(self):\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ALL_TESTS)\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ACTIVE_TESTS)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0242377a0c282368fbc8c2fbccb4723373cf993ff9097c21405c1b526640ae7b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 298,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 296,
        "length": 3,
        "offset": 68,
        "surroundingCode": "    self._VerifyTestCasesDoNotInterleave(SHUFFLED_SHARDED_TESTS)\n\n  def testShuffleRestoresOrderAfterEachIteration(self):\n    # Get the test lists in all 3 iterations, using random seed 1, 2,\n    # and 3 respectively.  Google Test picks a different seed in each"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a3d7ebd8ac37add92f0114bd1c34a92d20075daee0d0103b034dc6e8e19c84fe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 336,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 334,
        "length": 3,
        "offset": 63,
        "surroundingCode": "    self.assertEqual(tests_in_iteration3, tests_with_seed3)\n\n  def testShuffleGeneratesNewOrderInEachIteration(self):\n    # pylint: disable-next=unbalanced-tuple-unpacking\n    [tests_in_iteration1, tests_in_iteration2, tests_in_iteration3] = ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a9d59d16c0ca4037f8aa7bbee95cfda835820c8eccd3ccf064cd6c64b5fdb2c4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 354,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 352,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testShuffleShardedTestsPreservesPartition(self):\n    # If we run M tests on N shards, the same M tests should be run in\n    # total, regardless of the random seeds used by the shards."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e6182070a2a328a39a24052e5ba4ae980abd5fc6fe60bf1d23624218d3fe4738"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-shuffle-test.py",
      "language": "Python",
      "line": 378,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 376,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8f8b863035cc8247378d50161e85b23010b97d6fa154b44831f03b9e70924d8a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_testbridge_test.py",
      "language": "Python",
      "line": 42,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 40,
        "length": 2,
        "offset": 26,
        "surroundingCode": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ae9bc0ab9db72e5fc5d70ce859cef4eb889898174884cf3f007a7066cbe4e64d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_testbridge_test.py",
      "language": "Python",
      "line": 48,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 46,
        "length": 3,
        "offset": 57,
        "surroundingCode": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "13aa18aecc52610fa084155891b62628e3ed7a331da3b1a180aacff63f084755"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_testbridge_test.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 61,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f3810e3a021e17803e86f0c4c5f16d89c1f7839d7a1b349db43ace07c63c02c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 40,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 38,
        "length": 2,
        "offset": 26,
        "surroundingCode": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e707839061cfdff833b316408c27083e5a8042006cdcf116d8212fa25207c303"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 45,
      "offset": 3,
      "length": 67,
      "code": {
        "startLine": 43,
        "length": 67,
        "offset": 39,
        "surroundingCode": "\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = 'Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d715c7f6609a37a8c6daebc8b575fd6a4e82449fd401f1ca9280fe7c75b10393"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 47,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 45,
        "length": 3,
        "offset": 73,
        "surroundingCode": "  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = 'Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid'\n\n  p = gtest_test_utils.Subprocess(command)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "501c16e8420bdef7322ef161ba627a795a79e1adc7bc8c9bc8b95d1c9ca26691"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 49,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 47,
        "length": 1,
        "offset": 72,
        "surroundingCode": "  err = 'Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid'\n\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "669c907ae0c45e6b7aa4c7d28191ea505096c80bbbd351f90c1c7f392bf2e51f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 50,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 48,
        "length": 6,
        "offset": 46,
        "surroundingCode": "\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n\n  # Verify the output message contains appropriate output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9e9df8b76685541a1825d2c2597d42561844854d7b0b43adb78a3b4592e4d5df"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 52,
      "offset": 3,
      "length": 55,
      "code": {
        "startLine": 50,
        "length": 55,
        "offset": 36,
        "surroundingCode": "  Assert(p.terminated_by_signal)\n\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f8d0e862814958e84c106f03ef0b3b46293955360128d47218192c0fb223167c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 53,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 61,
        "surroundingCode": "\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d79de3e3364a2ebefba3d90687eb9618f0727d697823c830d1e627bf8749686a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 56,
        "length": 3,
        "offset": 68,
        "surroundingCode": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "056dbdc03e53c210eff13034bdf6d7eca7457a7a67c17e7d9d899b364aca0d0f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 61,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d64085db7f1ba832e9deeccdd5de494ecbc567ee5850744491b0ea567861d7e2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 75,
      "offset": 3,
      "length": 13,
      "code": {
        "startLine": 73,
        "length": 13,
        "offset": 31,
        "surroundingCode": "\nif SUPPORTS_SEH_EXCEPTIONS:\n  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output\n\nEX_BINARY_OUTPUT = gtest_test_utils.Subprocess("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b060d0562c5df295e738f47d81cb422edc908e59966c50497472c39c4e99f0e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 85,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 83,
        "length": 5,
        "offset": 31,
        "surroundingCode": "if SUPPORTS_SEH_EXCEPTIONS:\n\n  class CatchSehExceptionsTest(gtest_test_utils.TestCase):\n    \"\"\"Tests exception-catching behavior.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6d145a4e6f9224137d673de2d9dc9f48bad028abaca9b236666bec268abcdd51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 89,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 87,
        "length": 4,
        "offset": 53,
        "surroundingCode": "\n    def TestSehExceptions(self, test_output):\n      self.assertIn(\n          (\n              'SEH exception with code 0x2a thrown '"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9552f88de10c8b479fdc82e79f54a1a2ba6c438ee6a4848270741eaf43a8066f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 96,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 94,
        "length": 4,
        "offset": 37,
        "surroundingCode": "          test_output,\n      )\n      self.assertIn(\n          (\n              'SEH exception with code 0x2a thrown '"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "159d9e608ca8144f884feade357034b54c2a9dbd3a54f9106241b0bbeae001b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 103,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 101,
        "length": 4,
        "offset": 37,
        "surroundingCode": "          test_output,\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in SetUpTestSuite()', test_output\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4eaff17856197426de136998ea44a1cc84e6a4af35c29b5fff1a8551644f06ab"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 106,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 104,
        "length": 4,
        "offset": 95,
        "surroundingCode": "          'SEH exception with code 0x2a thrown in SetUpTestSuite()', test_output\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in TearDownTestSuite()',\n          test_output,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "52a819154c90345abc44001546ad4d609bcf0693493e1626e6662269c79c958c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 110,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 108,
        "length": 4,
        "offset": 37,
        "surroundingCode": "          test_output,\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in SetUp()', test_output\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f80361ff5281249ed755fcb7707177bd239ac66c4415b033a26ed73a094b8d70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 113,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 111,
        "length": 4,
        "offset": 86,
        "surroundingCode": "          'SEH exception with code 0x2a thrown in SetUp()', test_output\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in TearDown()', test_output\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7b0761aea7a50dcaa46a5bb56788af104be0e8f6817a1553bf76e12b52607d94"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 116,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 114,
        "length": 4,
        "offset": 89,
        "surroundingCode": "          'SEH exception with code 0x2a thrown in TearDown()', test_output\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in the test body', test_output\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "832a573355c985b1abc108c50d4d30949fcd5538548783bb17ad8f0f0969a160"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 121,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 119,
        "length": 4,
        "offset": 71,
        "surroundingCode": "\n    def testCatchesSehExceptionsWithCxxExceptionsEnabled(self):\n      self.TestSehExceptions(EX_BINARY_OUTPUT)\n\n    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bf5db0f98530a321c9d3651fc4e121bfd72d6bfbe2140d41071c2678cfdabdef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 124,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 122,
        "length": 4,
        "offset": 72,
        "surroundingCode": "\n    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):\n      self.TestSehExceptions(BINARY_OUTPUT)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e31c4d5e1152b7e3586d0efde3b3b05fdd5f51a6758581cfaef5bde1b6dbc2cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 128,
      "offset": 3,
      "length": 41,
      "code": {
        "startLine": 126,
        "length": 41,
        "offset": 60,
        "surroundingCode": "\nclass CatchCxxExceptionsTest(gtest_test_utils.TestCase):\n  \"\"\"Tests C++ exception-catching behavior.\n\n  Tests in this test case verify that:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5d7a2dbb6703d43923f2d45c557bd1e8075a5c8d7cc2befb968fb1af5cfc030a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 136,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 134,
        "length": 3,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  def testCatchesCxxExceptionsInFixtureConstructor(self):\n    self.assertTrue(\n        'C++ exception with description '"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9316bf0c1a64633267f39dbffd6bbc83516ef98c013f5fb3eaf3adc2f191f5c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 153,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 151,
        "length": 2,
        "offset": 9,
        "surroundingCode": "    )\n\n  if (\n      'CxxExceptionInDestructorTest.ThrowsExceptionInDestructor'\n      in EX_BINARY_OUTPUT"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c997d60f6c5e1aa1a84fffe2f3c218dca7086102936fefa8acfe926edcca8cd5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 159,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 157,
        "length": 4,
        "offset": 66,
        "surroundingCode": "\n    def testCatchesCxxExceptionsInFixtureDestructor(self):\n      self.assertTrue(\n          'C++ exception with description '\n          '\"Standard C++ exception\" thrown '"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "902e2f771948a617f15137da4f52e1c8ef8f28b6759800a128c23d66f7301300"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 166,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 164,
        "length": 4,
        "offset": 42,
        "surroundingCode": "          EX_BINARY_OUTPUT,\n      )\n      self.assertTrue(\n          'CxxExceptionInDestructorTest::TearDownTestSuite() '\n          'called as expected.'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "769dfd0dde91dc565a42000531c87983330039cceea0db85233504ccf9a49a2b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 173,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 171,
        "length": 3,
        "offset": 11,
        "surroundingCode": "      )\n\n  def testCatchesCxxExceptionsInSetUpTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1f44b685f3e673722147ed752c027b65e1eccf63b5eb55d29a57d5e885220d7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 211,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 209,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInTearDownTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4f5a39ddbeba5640119adb680caac4e6f9cc8aa1ad17e45ebe4c930a8d0f72cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 219,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 217,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInSetUp(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "26b77d8b449bb2386f9fcf18835ac4283c27db80e3a15a3b5669e91f2a847a45"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 250,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 248,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInTearDown(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "74560f7ae090524c8d84dd2f9292ba74c6271e97f3aad65c2c4aa6fdd76d561f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 268,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 266,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesCxxExceptionsInTestBody(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c866a01f44868b427d7f882c207e4cabfca7e2471f4a133a68ba4f9030e5ac4f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 291,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 289,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testCatchesNonStdCxxExceptions(self):\n    self.assertTrue(\n        'Unknown C++ exception thrown in the test body' in EX_BINARY_OUTPUT,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9724b8af11d52befc4111c1f4007f775edc5c4a27a3dce193a48eb78f82087b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 297,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 295,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testUnhandledCxxExceptionsAbortTheProgram(self):\n    # Filters out SEH exception tests on Windows. Unhandled SEH exceptions\n    # cause tests to show pop-up windows there."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "20a71728dbced469e263a651677208ae2c50d43e9a841a35d4640aca85d76e7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
      "language": "Python",
      "line": 315,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 313,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "12eb50f015bead0faeb0602dbf94d30a851413e552750d0d119dcce1ac0382e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 40,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 38,
        "length": 2,
        "offset": 26,
        "surroundingCode": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "47253c35177bf80e4981d283893884a82ddc6db3882e84c1a2602f5b70e574fa"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 45,
      "offset": 3,
      "length": 67,
      "code": {
        "startLine": 43,
        "length": 67,
        "offset": 39,
        "surroundingCode": "\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = \"Duplicate parameterized test name 'a'\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "782b03a0fcc537e6ecdbe88c69f314869e30dca615cf7362f426dee148bae51a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 47,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 45,
        "length": 3,
        "offset": 73,
        "surroundingCode": "  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = \"Duplicate parameterized test name 'a'\"\n\n  p = gtest_test_utils.Subprocess(command)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "53cc46a59969eba84043af5ede4c6d8f8d90a33971540fd3504447408cb633c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 49,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 47,
        "length": 1,
        "offset": 51,
        "surroundingCode": "  err = \"Duplicate parameterized test name 'a'\"\n\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ee506604cfe9435cd566fe86616fc8c3907642bb2fe3206373194eedadecbc18"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 50,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 48,
        "length": 6,
        "offset": 46,
        "surroundingCode": "\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n\n  # Check for appropriate output"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ada50fecbbc339f01e2835fc42b4fd6a8bce662d411e74269e84605f1a197652"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 52,
      "offset": 3,
      "length": 30,
      "code": {
        "startLine": 50,
        "length": 30,
        "offset": 36,
        "surroundingCode": "  Assert(p.terminated_by_signal)\n\n  # Check for appropriate output\n  Assert(err in p.output)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0bf21b59ace900a1d553571fce8a13b1c91720ddc6327c73cd13783ccfa99495"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 53,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 36,
        "surroundingCode": "\n  # Check for appropriate output\n  Assert(err in p.output)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "967490b42354f267e9a0c1dae58efa2158541d5979e5597928d3751e8d4a873e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 56,
        "length": 3,
        "offset": 68,
        "surroundingCode": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "69cc3282e5e09d56d2b7af6d7418d6c6516087ce7b5aa53cb4b253124432ca40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 61,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c20ece41a0fb14d92f49e1bc6418dfe21dd712764fc8fe0680e0ee59e14b0b92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 20,
      "code": {
        "startLine": 59,
        "length": 20,
        "offset": 29,
        "surroundingCode": "\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\n  STACK_TRACE_ENTITY_TEMPLATE = ''\nelse:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c63e29899c74a2a60802a416b25fb264fbd1b44674aa4dbd591fa000123e9e93"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 62,
      "offset": 3,
      "length": 27,
      "code": {
        "startLine": 60,
        "length": 27,
        "offset": 73,
        "surroundingCode": "if SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\n  STACK_TRACE_ENTITY_TEMPLATE = ''\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "33f5914689f1f500b3cf4cf3f6d86cdcc576457e9596d474855d8c668dd226d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 64,
      "offset": 3,
      "length": 20,
      "code": {
        "startLine": 62,
        "length": 20,
        "offset": 43,
        "surroundingCode": "  STACK_TRACE_ENTITY_TEMPLATE = ''\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'\n  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "26c1c15292726bfe39259faa4845da3a2d27115e2987a8f6df7b68f626c5a72c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 65,
      "offset": 3,
      "length": 27,
      "code": {
        "startLine": 63,
        "length": 27,
        "offset": 38,
        "surroundingCode": "else:\n  STACK_TRACE_TEMPLATE = '\\n'\n  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e15048d15110ebd0ddd7c003b7bdfa0f1b804a95996c67c6217a96c8e063080f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 66,
      "offset": 3,
      "length": 44,
      "code": {
        "startLine": 64,
        "length": 44,
        "offset": 73,
        "surroundingCode": "  STACK_TRACE_TEMPLATE = '\\n'\n  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d170ce14a790ea8a219bc1a29d33f0e0a7afec06b585fa6b6a36be642083c5e5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 67,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 65,
        "length": 3,
        "offset": 90,
        "surroundingCode": "  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d3cae2010f4575230bc70d57b6afbd968ae2fa6e836ea9bf4550c62434820c02"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (160 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 72,
      "offset": 121,
      "length": 40,
      "code": {
        "startLine": 70,
        "length": 40,
        "offset": 359,
        "surroundingCode": "<testsuites tests=\"26\" failures=\"5\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88ca764248bcbefd87ba83330115980a1691d17018459e2407a9657c6a441845"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (152 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 75,
      "offset": 121,
      "length": 32,
      "code": {
        "startLine": 73,
        "length": 32,
        "offset": 249,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"61\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"FailedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5e023bda469b6066335428323c0680f1ebac4a84fc7b4e1cfac132a4edd18bec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (179 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 76,
      "offset": 121,
      "length": 59,
      "code": {
        "startLine": 74,
        "length": 59,
        "offset": 387,
        "surroundingCode": "  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"61\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"FailedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "653898fbb0687672f6f3aba345f2c24410cd9942d2f673fbf192b083ef78dd8d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (161 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 83,
      "offset": 121,
      "length": 41,
      "code": {
        "startLine": 81,
        "length": 41,
        "offset": 254,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"MixedResultTest\" tests=\"3\" failures=\"1\" disabled=\"1\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"88\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"93\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b7c4470504802d76c419149091e5e22541fe83126d3bc043447d9a5447261ae3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (157 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 84,
      "offset": 121,
      "length": 37,
      "code": {
        "startLine": 82,
        "length": 37,
        "offset": 401,
        "surroundingCode": "  <testsuite name=\"MixedResultTest\" tests=\"3\" failures=\"1\" disabled=\"1\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"88\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"93\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f384c3fb538007cb5e8f3625d4d01ada54f61cb982fdac440a724dbe52417f9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (179 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 85,
      "offset": 121,
      "length": 59,
      "code": {
        "startLine": 83,
        "length": 59,
        "offset": 440,
        "surroundingCode": "    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"88\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"93\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "23367c4dddc0fc65d66179f351bec01c011487f201b533f4b940d35b829ef10a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (179 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 89,
      "offset": 121,
      "length": 59,
      "code": {
        "startLine": 87,
        "length": 59,
        "offset": 150,
        "surroundingCode": "  1\n  2%(stack)s]]></failure>\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  2&#x0A;  3%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  2"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4f95d070ad09c784418592372a4c837ed7707d013df5c541874620b453731837"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (170 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 94,
      "offset": 121,
      "length": 50,
      "code": {
        "startLine": 92,
        "length": 50,
        "offset": 162,
        "surroundingCode": "  3%(stack)s]]></failure>\n    </testcase>\n    <testcase name=\"DISABLED_test\" file=\"gtest_xml_output_unittest_.cc\" line=\"98\" status=\"notrun\" result=\"suppressed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n  </testsuite>\n  <testsuite name=\"XmlQuotingTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "83764d8cd2537cdaa1cfebdd3acbed6939855017eccf9e6eb43629ee7d010f34"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (164 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 97,
      "offset": 121,
      "length": 44,
      "code": {
        "startLine": 95,
        "length": 44,
        "offset": 253,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"XmlQuotingTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"OutputsCData\" file=\"gtest_xml_output_unittest_.cc\" line=\"102\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"XmlQuotingTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;XML output: &lt;?xml encoding=&quot;utf-8&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "11a4b308efb8958f482d450506133086b12b66baf854dc197c52caaf6a920e58"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (241 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 98,
      "offset": 121,
      "length": 121,
      "code": {
        "startLine": 96,
        "length": 121,
        "offset": 403,
        "surroundingCode": "  <testsuite name=\"XmlQuotingTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"OutputsCData\" file=\"gtest_xml_output_unittest_.cc\" line=\"102\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"XmlQuotingTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;XML output: &lt;?xml encoding=&quot;utf-8&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed\nXML output: <?xml encoding=\"utf-8\"><top><![CDATA[cdata text]]>]]&gt;<![CDATA[</top>%(stack)s]]></failure>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ae7078fa93127c8f890455d7a3d4c369ff41740746cad75231b5f07c194cd54d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 103,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 101,
        "length": 4,
        "offset": 151,
        "surroundingCode": "    </testcase>\n  </testsuite>\n  <testsuite name=\"InvalidCharactersTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"InvalidCharactersInMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"109\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "11ab6dad7794947db11b0cee4102cf02ba5b47dc1651fde618f00d3e3549f2a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (185 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 104,
      "offset": 121,
      "length": 65,
      "code": {
        "startLine": 102,
        "length": 65,
        "offset": 260,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"InvalidCharactersTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"InvalidCharactersInMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"109\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "90d4d941c91b7a72f46f725a14cd4c0a639b96f0163d4f50c1692302ee232ee1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (172 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 105,
      "offset": 121,
      "length": 52,
      "code": {
        "startLine": 103,
        "length": 52,
        "offset": 431,
        "surroundingCode": "  <testsuite name=\"InvalidCharactersTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"InvalidCharactersInMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"109\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed\nInvalid characters in brackets []%(stack)s]]></failure>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5441cdedf649760f9cdae7f58d32cf96401f9a752de2b0afab6df477a76663b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (175 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 111,
      "offset": 121,
      "length": 55,
      "code": {
        "startLine": 109,
        "length": 55,
        "offset": 251,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"DisabledTest\" tests=\"1\" failures=\"0\" disabled=\"1\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"DISABLED_test_not_run\" file=\"gtest_xml_output_unittest_.cc\" line=\"68\" status=\"notrun\" result=\"suppressed\" time=\"*\" timestamp=\"*\" classname=\"DisabledTest\"/>\n  </testsuite>\n  <testsuite name=\"SkippedTest\" tests=\"3\" failures=\"1\" disabled=\"0\" skipped=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "aebbcf5cc37ae95ad3158fbb7942e23d74f13721d5d016e95280203dc27c058a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (153 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 114,
      "offset": 121,
      "length": 33,
      "code": {
        "startLine": 112,
        "length": 33,
        "offset": 250,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"SkippedTest\" tests=\"3\" failures=\"1\" disabled=\"0\" skipped=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Skipped\" status=\"run\" file=\"gtest_xml_output_unittest_.cc\" line=\"75\" result=\"skipped\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\n%(stack)s]]></skipped>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9a4cf854641aabceebec0a9ec501ebd9ae15d3ab8249d3962ee2275bb5ca1e77"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (164 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 118,
      "offset": 121,
      "length": 44,
      "code": {
        "startLine": 116,
        "length": 44,
        "offset": 159,
        "surroundingCode": "%(stack)s]]></skipped>\n    </testcase>\n    <testcase name=\"SkippedWithMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"79\" status=\"run\" result=\"skipped\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;It is good practice to tell why you skip a test.%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\nIt is good practice to tell why you skip a test.%(stack)s]]></skipped>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7a5b93e979a94f57f47ecdfbaffa94192a34d43feff1feb0f9f5bed2ef715c07"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (167 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 119,
      "offset": 121,
      "length": 47,
      "code": {
        "startLine": 117,
        "length": 47,
        "offset": 301,
        "surroundingCode": "    </testcase>\n    <testcase name=\"SkippedWithMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"79\" status=\"run\" result=\"skipped\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;It is good practice to tell why you skip a test.%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\nIt is good practice to tell why you skip a test.%(stack)s]]></skipped>\n    </testcase>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "aa3e163f984b3b589899a4e34ba81c3a35b592f2e7d3ef20696ddbaa4dd456b0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (167 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 122,
      "offset": 121,
      "length": 47,
      "code": {
        "startLine": 120,
        "length": 47,
        "offset": 207,
        "surroundingCode": "It is good practice to tell why you skip a test.%(stack)s]]></skipped>\n    </testcase>\n    <testcase name=\"SkippedAfterFailure\" file=\"gtest_xml_output_unittest_.cc\" line=\"83\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "eb70102f55377172b9538918172972f88b414b9e08f6fc44c159af247600d331"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (179 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 123,
      "offset": 121,
      "length": 59,
      "code": {
        "startLine": 121,
        "length": 59,
        "offset": 304,
        "surroundingCode": "    </testcase>\n    <testcase name=\"SkippedAfterFailure\" file=\"gtest_xml_output_unittest_.cc\" line=\"83\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "071cbeeac94806e2f3717666fbe26c70fd346b2e1ec4f95d3fb015525e4c9f64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (167 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 127,
      "offset": 121,
      "length": 47,
      "code": {
        "startLine": 125,
        "length": 47,
        "offset": 150,
        "surroundingCode": "  1\n  2%(stack)s]]></failure>\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;It is good practice to tell why you skip a test.%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\nIt is good practice to tell why you skip a test.%(stack)s]]></skipped>\n    </testcase>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "43c32ad2a5a8d7d534ea6a968d53e278a56feebb43f0b92105d485e14c331d01"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (169 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 132,
      "offset": 121,
      "length": 49,
      "code": {
        "startLine": 130,
        "length": 49,
        "offset": 136,
        "surroundingCode": "\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"OneProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"121\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b8353b79f557e51e31c2621f2b9b443af3b294a2ed8e2fad16bb5dd93c7296c7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (170 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 133,
      "offset": 121,
      "length": 50,
      "code": {
        "startLine": 131,
        "length": 50,
        "offset": 305,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"OneProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"121\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a4b171bf4a577bc287da8ee7021ec4c6c9238bf48d89d2975f365a11ea959754"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (176 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 138,
      "offset": 121,
      "length": 56,
      "code": {
        "startLine": 136,
        "length": 56,
        "offset": 156,
        "surroundingCode": "      </properties>\n    </testcase>\n    <testcase name=\"IntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"125\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_int\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7c015396726cc30189fae70c5fe71dce23cef6ec8e411a650545693cc373f748"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (174 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 143,
      "offset": 121,
      "length": 54,
      "code": {
        "startLine": 141,
        "length": 54,
        "offset": 156,
        "surroundingCode": "      </properties>\n    </testcase>\n    <testcase name=\"ThreeProperties\" file=\"gtest_xml_output_unittest_.cc\" line=\"129\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5acc335a8f88c489750246268ac6d1a0c0fcb7e50a2f1a867a7b4a5a91d5d81d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (190 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 150,
      "offset": 121,
      "length": 70,
      "code": {
        "startLine": 148,
        "length": 70,
        "offset": 156,
        "surroundingCode": "      </properties>\n    </testcase>\n    <testcase name=\"TwoValuesForOneKeyUsesLastValue\" file=\"gtest_xml_output_unittest_.cc\" line=\"135\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"2\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "27e90074c5243ddb8a5c1244c01faf95a8c3567b7930c522d9868496835bc956"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (166 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 157,
      "offset": 121,
      "length": 46,
      "code": {
        "startLine": 155,
        "length": 46,
        "offset": 252,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"NoFixtureTest\" tests=\"3\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n     <testcase name=\"RecordProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"140\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6543e3439564efc1919876af9e541dae5c3387041368e805eed1147831d39dd8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (199 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 162,
      "offset": 121,
      "length": 79,
      "code": {
        "startLine": 160,
        "length": 79,
        "offset": 158,
        "surroundingCode": "       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordIntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"153\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_int\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "60de5f58c2e13cd7968a996d6342ba88bedff40617ea90f230f04555ff6a0d40"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (202 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 167,
      "offset": 121,
      "length": 82,
      "code": {
        "startLine": 165,
        "length": 82,
        "offset": 158,
        "surroundingCode": "       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordStringValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"157\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_string\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f7044ee4b57e4cea9b327361b742fa85291ca1f8005f4b602023e39fde0541f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 173,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 171,
        "length": 4,
        "offset": 152,
        "surroundingCode": "     </testcase>\n  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1b6899c5116dc617611985ee32df71cc88064c08ae190d327eda11b6e27f6ebd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (202 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 174,
      "offset": 121,
      "length": 82,
      "code": {
        "startLine": 172,
        "length": 82,
        "offset": 260,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6f4876efd3fbb27d1aa54cc7f5114021b6be1849c0e24c3f0cda7d68bf99b59e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (202 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 175,
      "offset": 121,
      "length": 82,
      "code": {
        "startLine": 173,
        "length": 82,
        "offset": 448,
        "surroundingCode": "  <testsuite name=\"Single/ValueParamTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88b36bf667dbe98e6195df5ccef5aea2aea896ce2cc446112ebe5a487ba45366"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (217 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 176,
      "offset": 121,
      "length": 97,
      "code": {
        "startLine": 174,
        "length": 97,
        "offset": 526,
        "surroundingCode": "    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a8c14f4bb9cb4984fd4c84366cd4f45864d49f6affbb5b6063bd5ff944ba9ea4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (217 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 177,
      "offset": 121,
      "length": 97,
      "code": {
        "startLine": 175,
        "length": 97,
        "offset": 541,
        "surroundingCode": "    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>\n  <testsuite name=\"TypedTest/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "405c8b5601df3c724dcb4381c662b8552e415826cd1c6ea068071244330d4d7d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (187 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 180,
      "offset": 121,
      "length": 67,
      "code": {
        "startLine": 178,
        "length": 67,
        "offset": 250,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"TypedTest/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"173\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/0\" />\n  </testsuite>\n  <testsuite name=\"TypedTest/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bd2922a8a90e144566a1f89f5b4a087fa8935c8bfe7c7078fdad3b5aef80afc5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (187 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 183,
      "offset": 121,
      "length": 67,
      "code": {
        "startLine": 181,
        "length": 67,
        "offset": 250,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"TypedTest/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"173\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/1\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "302fd8cbcfc3409dd937c744e0564cde0dc91d8dfe6030a20331d3e4a10bfcd6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (138 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 185,
      "offset": 121,
      "length": 18,
      "code": {
        "startLine": 183,
        "length": 18,
        "offset": 323,
        "surroundingCode": "    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"173\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/1\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />\n  </testsuite>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7df7aa921030e0e2585a5d721e152df2429f4e074f404d60da5fc847da0f46da"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (211 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 186,
      "offset": 121,
      "length": 91,
      "code": {
        "startLine": 184,
        "length": 91,
        "offset": 274,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fe032fc313a44edcc7ec6670464a3cf5021aaa773d00ffa44d43b5a507aa2b60"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (138 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 188,
      "offset": 121,
      "length": 18,
      "code": {
        "startLine": 186,
        "length": 18,
        "offset": 347,
        "surroundingCode": "    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/1\" />\n  </testsuite>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "65b185b52da2e9c6654cab7bb9c713fa80fae0308c5644450d4acc621655d67f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (211 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 189,
      "offset": 121,
      "length": 91,
      "code": {
        "startLine": 187,
        "length": 91,
        "offset": 274,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/1\" />\n  </testsuite>\n</testsuites>\"\"\" % {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "768fda920fda15d49e95fdb6f87dc3f0f02029e4eac1b5d99a6a15916b66138e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (160 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 201,
      "offset": 121,
      "length": 40,
      "code": {
        "startLine": 199,
        "length": 40,
        "offset": 251,
        "surroundingCode": "  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\"\n             errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n</testsuites>\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "efa22726eb60d7acd66bf6b6c889c057a881756612d13d134e1618ee9c011520"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (160 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 208,
      "offset": 121,
      "length": 40,
      "code": {
        "startLine": 206,
        "length": 40,
        "offset": 358,
        "surroundingCode": "<testsuites tests=\"3\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1988bf670496cc7fc076cae3c7fe10ab0049dae8bfe2e0d82378dae94fff7b20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (169 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 210,
      "offset": 121,
      "length": 49,
      "code": {
        "startLine": 208,
        "length": 49,
        "offset": 296,
        "surroundingCode": "    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"IntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"125\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2108461411f4abbee2752898e536ee707997982edde29260864c5d7b4d1749b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (176 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 211,
      "offset": 121,
      "length": 56,
      "code": {
        "startLine": 209,
        "length": 56,
        "offset": 305,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"IntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"125\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_int\" value=\"1\"/>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "152eeae8c23fe87ccf40644721f6056e479530b0545e8461c159dde5593e0eb0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (124 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 217,
      "offset": 121,
      "length": 4,
      "code": {
        "startLine": 215,
        "length": 4,
        "offset": 151,
        "surroundingCode": "    </testcase>\n  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "640f2e885e706f09e042ce68c0389c8995301388b229c80626709ca3d64b5a52"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (202 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 218,
      "offset": 121,
      "length": 82,
      "code": {
        "startLine": 216,
        "length": 82,
        "offset": 260,
        "surroundingCode": "  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>\n</testsuites>\"\"\""
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2371927f9ad305b1131a926d50a4e6b71b683ef7a7b2e8964670627ed31ac30e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (122 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 225,
      "offset": 121,
      "length": 2,
      "code": {
        "startLine": 223,
        "length": 2,
        "offset": 231,
        "surroundingCode": "<testsuites tests=\"0\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\"\n            timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"NonTestSuiteFailure\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"\">\n      <failure message=\"gtest_no_test_unittest.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_no_test_unittest.cc:*"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8fb6bf558b2f16c1248f7f5277dc02360161fe5d4dfb04f2c46056ae6c4f24ef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E501 line too long (171 > 120 characters)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 227,
      "offset": 121,
      "length": 51,
      "code": {
        "startLine": 225,
        "length": 51,
        "offset": 334,
        "surroundingCode": "  <testsuite name=\"NonTestSuiteFailure\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"\">\n      <failure message=\"gtest_no_test_unittest.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_no_test_unittest.cc:*\nExpected equality of these values:\n  1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88ac192eff1e73e59d0696b70a8901aba323489a9972c9018e825c537697c866"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 249,
      "offset": 3,
      "length": 59,
      "code": {
        "startLine": 247,
        "length": 59,
        "offset": 72,
        "surroundingCode": "\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0d39a76cad333f9d59c36d9d31ca49ecfb85e4f61e124e0e82b648d8a33ea19b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 251,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 249,
        "length": 71,
        "offset": 65,
        "surroundingCode": "  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0f968986b460e5da2a194f04b923bf6d76725d1179bdf802ec038a53df66b166"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 252,
      "offset": 3,
      "length": 58,
      "code": {
        "startLine": 250,
        "length": 58,
        "offset": 77,
        "surroundingCode": "\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7bcde00de26efe445459504ca26c2bc03b1b7bc29dca3787f219b39dd5598966"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 253,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 251,
        "length": 2,
        "offset": 137,
        "surroundingCode": "  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyXmlOutput(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8bbbfce3fde7638c5a81717fd527d872aaf2651f86ca3c87e810612bee48230e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 256,
      "offset": 7,
      "length": 71,
      "code": {
        "startLine": 254,
        "length": 71,
        "offset": 44,
        "surroundingCode": "\n    def testNonEmptyXmlOutput(self):\n      \"\"\"Generates non-empty XML and verifies it matches the expected output.\n\n      Runs a test program that generates a non-empty XML output, and"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5eb077c4c4695de6242e1649fe774f8eb95fb670a686dd949765fb48ab146b43"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 261,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 259,
        "length": 4,
        "offset": 61,
        "surroundingCode": "      tests that the XML output is expected.\n      \"\"\"\n      self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)\n\n  def testNoTestXmlOutput(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a84e8ad558332bb386ea5394dbda2ce97ae04934339481d567ccdb335b2fe865"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 263,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 261,
        "length": 3,
        "offset": 76,
        "surroundingCode": "      self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)\n\n  def testNoTestXmlOutput(self):\n    \"\"\"Verifies XML output for a Google Test binary without actual tests.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3598b293d1a994facfd033239bd99c59361f6cb86ff28a0e552843f5360ab7ec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 272,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 270,
        "length": 3,
        "offset": 78,
        "surroundingCode": "    self._TestXmlOutput('gtest_no_test_unittest', EXPECTED_NO_TEST_XML, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the XML output is valid.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "23f1e616acfc8a641cb5ff1e859ec697d1b47dadb61638da2efb136447c95aa9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 300,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 298,
        "length": 3,
        "offset": 23,
        "surroundingCode": "    actual.unlink()\n\n  def testDefaultOutputFile(self):\n    \"\"\"Tests XML file with default name is created when name is not specified.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "00185a43fac92e6667d17641144f49279911ff46859439231ebd79befaf06beb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 313,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 311,
        "length": 2,
        "offset": 21,
        "surroundingCode": "    )\n    try:\n      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "80163d96321fb83100baf0a69d16f5ee888e973a162f5d48f8d09230435b13d0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 315,
      "offset": 7,
      "length": 1,
      "code": {
        "startLine": 313,
        "length": 1,
        "offset": 55,
        "surroundingCode": "      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b86475e61a230b66a3e134f6dcc94a3e8424b8d97acb4ef340fb2177521f6aac"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 316,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 314,
        "length": 2,
        "offset": 54,
        "surroundingCode": "    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "46378180b763f7aeb6d433b6591de687152f4caf52527fc8ad021067bad244dd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 327,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 325,
        "length": 3,
        "offset": 52,
        "surroundingCode": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedXmlOutput(self):\n    \"\"\"Verifies XML output is suppressed if default listener is shut down.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c936714ea1fe1dd9a71ed1405eb8efa20ea9aec903156ede3dcb83f9d248fb8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 338,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 336,
        "length": 2,
        "offset": 45,
        "surroundingCode": "    )\n    if os.path.isfile(xml_path):\n      os.remove(xml_path)\n\n    command = ["
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a04593f51f66eb7a0447f6715c3458c4b06be8bdd7ec0fb30e6062fdec4b4faf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 347,
      "offset": 7,
      "length": 63,
      "code": {
        "startLine": 345,
        "length": 63,
        "offset": 82,
        "surroundingCode": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "63910089f63e84b6749cf923069334e3b0f8050b248544799563ac827d65e096"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 348,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 346,
        "length": 4,
        "offset": 107,
        "surroundingCode": "    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "af25288b19bfc5739818cc25a1a90d7d113ad3d6d0ba912d01d30fa7e534170e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 353,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 351,
        "length": 4,
        "offset": 24,
        "surroundingCode": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "201e5b702504539a26fea2e4260cbbb6cf1f3de986f649ca17fdc07b8fa1b45d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 354,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 352,
        "length": 4,
        "offset": 48,
        "surroundingCode": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1bd213639798ed5523afe7ee5be85ff6653e12e2b62a9ba77fd3ca6ac009da87"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 363,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 361,
        "length": 3,
        "offset": 50,
        "surroundingCode": "    self.assertFalse(os.path.isfile(xml_path))\n\n  def testFilteredTestXmlOutput(self):\n    \"\"\"Verifies XML output when a filter is applied.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0cf9133bcd96f28e3582c8414131c128c7048d97f41451380ce0e8b8290f1972"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 377,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 375,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def testShardedTestXmlOutput(self):\n    \"\"\"Verifies XML output when run using multiple shards.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ca64e59abc9c50f99cf9473a550a90054b73d8f5001aa394728bf4e53cc9ea5b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 391,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 389,
        "length": 3,
        "offset": 9,
        "surroundingCode": "    )\n\n  def _GetXmlOutput(\n      self, gtest_prog_name, extra_args, extra_env, expected_exit_code\n  ):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b3e0ea73fabced992f80e93764dcdec7f60e5f1ed63f000d14931d8e3be18144"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 415,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 413,
        "length": 12,
        "offset": 61,
        "surroundingCode": "    environ_copy = os.environ.copy()\n    if extra_env:\n      environ_copy.update(extra_env)\n    p = gtest_test_utils.Subprocess(command, env=environ_copy)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ea7fbb0fde0581dbca44c6268a631bc982a788caede329d1ba1f91ce1b302eaf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 419,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 417,
        "length": 4,
        "offset": 38,
        "surroundingCode": "\n    if p.terminated_by_signal:\n      self.assertTrue(\n          False, '%s was killed by signal %d' % (gtest_prog_name, p.signal)\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a172ff591be58f5ca4896a6b285a9d979440bebf3056874bcbdbb35277aa528e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 423,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 421,
        "length": 4,
        "offset": 24,
        "surroundingCode": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "67e795041bc018a239dce889156269c3993b021046acb4dadce3c8eb39cc6260"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 424,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 422,
        "length": 4,
        "offset": 48,
        "surroundingCode": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,\n          p.exit_code,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d81e976dcb85b6d028030c045c6a242ecf99d54304884de8e9ac150c576aec90"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 434,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 432,
        "length": 3,
        "offset": 21,
        "surroundingCode": "    return actual\n\n  def _TestXmlOutput(\n      self,\n      gtest_prog_name,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7b0e0718fe260fcff71dcbda691ff648596e1769c2be8071bb32abc0f96d1688"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 468,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 466,
        "length": 2,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ad8b90f041d894fdc1bccb564a1f5ec6ee7265c93b2b8afeb617ade14b013c6e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
      "language": "Python",
      "line": 469,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 467,
        "length": 16,
        "offset": 75,
        "surroundingCode": "if __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7df68c1f07a5f8db200d0e681dfb57acb1be23fd98eb9bede5a884754a8e0eb3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 78,
      "offset": 3,
      "length": 77,
      "code": {
        "startLine": 76,
        "length": 77,
        "offset": 21,
        "surroundingCode": "\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n\n  p = gtest_test_utils.Subprocess(command, env=environ)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "77a9b092276adfa8f118c84ae56e1b46c5638a7a838c03641555a5e76deb7a11"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 80,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 78,
        "length": 1,
        "offset": 83,
        "surroundingCode": "  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n\n  p = gtest_test_utils.Subprocess(command, env=environ)\n  if p.terminated_by_signal:\n    return 1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3b3eceabbfe49805b3b6ecd2b1293bd2004f9f4c1be52b49340b52da6f8bb121"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 81,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 79,
        "length": 2,
        "offset": 59,
        "surroundingCode": "\n  p = gtest_test_utils.Subprocess(command, env=environ)\n  if p.terminated_by_signal:\n    return 1\n  else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e7c8f9c827cbf6162903c9a7b39a78e25eddade5e10ccd4c1cf3a071ef43efd1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 83,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 81,
        "length": 4,
        "offset": 44,
        "surroundingCode": "  if p.terminated_by_signal:\n    return 1\n  else:\n    return 0\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0159aff53abcb9dfdd566b76ab2e27efea19bba4f533ac180d952b6d2e1d2ef8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 91,
      "offset": 3,
      "length": 53,
      "code": {
        "startLine": 89,
        "length": 53,
        "offset": 65,
        "surroundingCode": "\nclass GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's break-on-failure mode.\n\n  Tests using the GTEST_BREAK_ON_FAILURE environment variable or"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "59b7c70d919075580aeaa89b5c74a191c0db2ea821c67f1fbfd28e006d4463f1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 98,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 96,
        "length": 3,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):\n    \"\"\"Runs googletest-break-on-failure-unittest_ and verifies its behavior.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1798b87f19f048da0b74e53acc31f26e54ae3fed2fe0d8630fc4968447d51e37"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 116,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 114,
        "length": 17,
        "offset": 37,
        "surroundingCode": "\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "070257e91e1068ff3dbca56fa858e856613231db80166785c61243fa53c75330"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 118,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 116,
        "length": 17,
        "offset": 56,
        "surroundingCode": "      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "400b084db2d610baa494ee70e3ef1b238e5876437eb21b734eb991f0958ebfc7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 121,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 119,
        "length": 4,
        "offset": 34,
        "surroundingCode": "\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "426314c387cfc20fc2f4624a978090b23b810fd170ca9d14cf3e0a0f83353b8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 123,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 121,
        "length": 4,
        "offset": 50,
        "surroundingCode": "      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ed618a0de96a6fabb20210ea62ba112d985aaa0185c68ede8b01dc1d17994bf2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 125,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 123,
        "length": 4,
        "offset": 62,
        "surroundingCode": "      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG\n\n    command = [EXE_PATH]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2751893401f92d4a463b352a8dc3012078738f41197c88820ef63f31c2dd6e70"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 129,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 127,
        "length": 7,
        "offset": 44,
        "surroundingCode": "    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if expect_seg_fault:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "78c4778a33ea9b8cbac6fea4424d5ed9bcb6132903dd126da60c9037040b08e9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 132,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 130,
        "length": 13,
        "offset": 32,
        "surroundingCode": "\n    if expect_seg_fault:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e326ef73a526ca7be868b2202f01506860a04514ccd695c6c89070469579a78d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 134,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 132,
        "length": 13,
        "offset": 47,
        "surroundingCode": "      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'\n\n    has_seg_fault = Run(command)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "28086631adba306d8f566ca0319f48d0427b8e84445da596119ef236119eea49"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 148,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 146,
        "length": 3,
        "offset": 63,
        "surroundingCode": "    self.assertTrue(has_seg_fault == expect_seg_fault, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2737ee2e782d20326ae6f79f59bd21acf7408580a04881ec09bc0a64b96ced1f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 153,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 151,
        "length": 3,
        "offset": 82,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value=None, expect_seg_fault=0)\n\n  def testEnvVar(self):\n    \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4e3fdaf4a47605dabf9b10f6c6e8397b81fbd0f05e917a6bc15675c07b9fedbb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 159,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 157,
        "length": 3,
        "offset": 81,
        "surroundingCode": "    self.RunAndVerify(env_var_value='1', flag_value=None, expect_seg_fault=1)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_break_on_failure flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e0b70f738fc07d2a810b75e2343180049405b1021289afa14801287ece3b8f89"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 165,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 163,
        "length": 3,
        "offset": 81,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the flag overrides the environment variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "48f909465626901f217b41aa862dbb2ac18c546494bb15e0496305ee06533d71"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 173,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 171,
        "length": 3,
        "offset": 80,
        "surroundingCode": "    self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n\n  def testBreakOnFailureOverridesThrowOnFailure(self):\n    \"\"\"Tests that gtest_break_on_failure overrides gtest_throw_on_failure.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b1b650dac4dcc5fdfc57a568f3d286ddda54d17a27457092b09cf5d75c508697"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 178,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 176,
        "length": 4,
        "offset": 60,
        "surroundingCode": "    SetEnvVar(THROW_ON_FAILURE_ENV_VAR, '1')\n    try:\n      self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n    finally:\n      SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9c00b8e845306365bda110ff1848c0dd3910884cd1b9dcf81a7a0d8dcdf0fcc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 180,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 178,
        "length": 9,
        "offset": 99,
        "surroundingCode": "      self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n    finally:\n      SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)\n\n  if IS_WINDOWS:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b03a5fe806129e8ac18455cd7b173c42dfbe8d4576f71d0d6b6ea51ac880ddc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 182,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 180,
        "length": 2,
        "offset": 51,
        "surroundingCode": "      SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)\n\n  if IS_WINDOWS:\n\n    def testCatchExceptionsDoesNotInterfere(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6a5b701df3a2386b918831a21522cfef08bf240f165d4de3f863100323bba7cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 185,
      "offset": 7,
      "length": 58,
      "code": {
        "startLine": 183,
        "length": 58,
        "offset": 58,
        "surroundingCode": "\n    def testCatchExceptionsDoesNotInterfere(self):\n      \"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\"\n\n      SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "881c8194d5acf4e77f4a49ce251d6832ab921a0b8cf2136187fe732e504f4ef0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 187,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 185,
        "length": 9,
        "offset": 72,
        "surroundingCode": "      \"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\"\n\n      SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')\n      try:\n        self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6f23ff7e1d6b965ae5a3fd8a8e2348e218bb8b0576a2371cc280c0c37e2d0ed4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 188,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 186,
        "length": 3,
        "offset": 54,
        "surroundingCode": "\n      SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')\n      try:\n        self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n      finally:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1515a5a1d55982bde481e0d5cf2fb1c9dac0ef19c473bbccc1150e871536339d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 190,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 188,
        "length": 7,
        "offset": 98,
        "surroundingCode": "      try:\n        self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n      finally:\n        SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, None)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1148347577ea38c9cb51b8520ff802d19a3c3052b30cd4ba5a354e18f8c410c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
      "language": "Python",
      "line": 195,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 193,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8d954d27d22a45432440c05077d35fd905a270c8328c0a6c1da58694900a02bd"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E402 module level import not at top of file",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 42,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 27,
        "surroundingCode": "IS_OS2 = os.name == 'os2'\n\nimport atexit\nimport shutil\nimport tempfile"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9f28b2f4e879cd0f5ab7a70f2689b603af8bbba9be7512a5f048bca451f09b64"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E402 module level import not at top of file",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 43,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 15,
        "surroundingCode": "\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7967806460562e7e95dc2fa10c2e99ed47b86601b06abda6e350a7260d0a07c2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E402 module level import not at top of file",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 44,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\n# pylint: enable=g-import-not-at-top"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f8cb4321f5cdc1c45e9e107c1e684f9ae17476dd0545d3fc6c5f7c096ae2d4d7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E402 module level import not at top of file",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 45,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 43,
        "length": 6,
        "offset": 30,
        "surroundingCode": "import shutil\nimport tempfile\nimport unittest as _test_module\n# pylint: enable=g-import-not-at-top\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7f9ceb4e1e002df419496bbf18156a710234416286e5c3141dac5270039f871a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 57,
      "offset": 3,
      "length": 59,
      "code": {
        "startLine": 55,
        "length": 59,
        "offset": 34,
        "surroundingCode": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n\n  if value is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "13e16f6be88b9251e2acf54f3144a62fcba5098b83df659c7446bc212d9544f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 59,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 57,
        "length": 2,
        "offset": 65,
        "surroundingCode": "  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dd15ec1c461bb301ff1b9485343c99e232c20e7ada53e973f7248d7444966384"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 59,
        "length": 4,
        "offset": 55,
        "surroundingCode": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1acd06944698f8504704510df4b04d06f28165f602b2522e725276b6b842673f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 79,
      "offset": 3,
      "length": 73,
      "code": {
        "startLine": 77,
        "length": 73,
        "offset": 39,
        "surroundingCode": "\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n\n  global _gtest_flags_are_parsed"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "944a5d5638e78af25e3be31ee5b8633d182c4685a294e0f3d4ebeaddce0f14e8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 81,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 79,
        "length": 6,
        "offset": 79,
        "surroundingCode": "  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n\n  global _gtest_flags_are_parsed\n  if _gtest_flags_are_parsed:\n    return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0ba54ae205b85f95d0ba3b12086cad62f225f66c14dd21f744332c27e52d2d08"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 82,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 80,
        "length": 2,
        "offset": 36,
        "surroundingCode": "\n  global _gtest_flags_are_parsed\n  if _gtest_flags_are_parsed:\n    return\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7a651cb077939b39a8c6e1ccee4319237d40e479193b167040283d8aeebbd0e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 85,
      "offset": 3,
      "length": 23,
      "code": {
        "startLine": 83,
        "length": 23,
        "offset": 14,
        "surroundingCode": "    return\n\n  _gtest_flags_are_parsed = True\n  for flag in _flag_map:\n    # The environment variable overrides the default value."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6537c7d56ea199c7c1a92ad1c725331627a76272af0c661ba055027d015e557b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 86,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 84,
        "length": 3,
        "offset": 36,
        "surroundingCode": "\n  _gtest_flags_are_parsed = True\n  for flag in _flag_map:\n    # The environment variable overrides the default value.\n    if flag.upper() in os.environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e94c30b3b5064dd6bd65d60c3ee5ecbb81e8b1c75ed8fe98c8107345d74fbd22"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 89,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 87,
        "length": 9,
        "offset": 101,
        "surroundingCode": "    # The environment variable overrides the default value.\n    if flag.upper() in os.environ:\n      _flag_map[flag] = os.environ[flag.upper()]\n\n    # The command line flag overrides the environment variable."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "49c56ede3531c6ba4bcbd120710ea7c9a7d2d0efda2a227883a5f7f53be04c87"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 94,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 92,
        "length": 6,
        "offset": 68,
        "surroundingCode": "    i = 1  # Skips the program name.\n    while i < len(argv):\n      prefix = '--' + flag + '='\n      if argv[i].startswith(prefix):\n        _flag_map[flag] = argv[i][len(prefix) :]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "72b331acc9af27f95d84090b20012a37195d182a6198f592f9b21ed09c55e2d1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 95,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 93,
        "length": 2,
        "offset": 64,
        "surroundingCode": "    while i < len(argv):\n      prefix = '--' + flag + '='\n      if argv[i].startswith(prefix):\n        _flag_map[flag] = argv[i][len(prefix) :]\n        del argv[i]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d76ee5fa823fcf1dde6100815766fbc806e6f56b539001d96339b5a16dd59c17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E203 whitespace before ':'",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 96,
      "offset": 46,
      "length": 1,
      "code": {
        "startLine": 94,
        "length": 1,
        "offset": 115,
        "surroundingCode": "      prefix = '--' + flag + '='\n      if argv[i].startswith(prefix):\n        _flag_map[flag] = argv[i][len(prefix) :]\n        del argv[i]\n        break"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6d7a23eae069545d4f30ca1b0dbb3c165b95ddd55c31ad6ec18e14ec5f66b0e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 99,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 97,
        "length": 4,
        "offset": 40,
        "surroundingCode": "        del argv[i]\n        break\n      else:\n        # We don't increment i in case we just found a --gtest_* flag\n        # and removed it from argv."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "68c3fc23b734de090a0a628431e1c65097bf34a803026bed9dafa2fafb04b42c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 106,
      "offset": 3,
      "length": 42,
      "code": {
        "startLine": 104,
        "length": 42,
        "offset": 22,
        "surroundingCode": "\ndef GetFlag(flag):\n  \"\"\"Returns the value of the given flag.\"\"\"\n\n  # In case GetFlag() is called before Main(), we always call"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cba2f1d1a026c5ec02130999ee7c23f90d8c1e485127ba3532216d331aa11a66"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 108,
      "offset": 3,
      "length": 59,
      "code": {
        "startLine": 106,
        "length": 59,
        "offset": 48,
        "surroundingCode": "  \"\"\"Returns the value of the given flag.\"\"\"\n\n  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0cf3a1094ecf3bd34cade03c457d24b086964ab881bb9a5d464c68642b28adc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 109,
      "offset": 3,
      "length": 66,
      "code": {
        "startLine": 107,
        "length": 66,
        "offset": 65,
        "surroundingCode": "\n  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "02ea6c52fcafb1438fb9287de00f268403799103be667aa1bc858a8216335c96"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 110,
      "offset": 3,
      "length": 13,
      "code": {
        "startLine": 108,
        "length": 13,
        "offset": 133,
        "surroundingCode": "  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ce5acee797f7b2e8378f22e3d84db1c83b5129c85afa57c3a325fd0e8f45f88b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 111,
      "offset": 3,
      "length": 24,
      "code": {
        "startLine": 109,
        "length": 24,
        "offset": 87,
        "surroundingCode": "  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)\n\n  return _flag_map[flag]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "09046cfcd4d661e5a6e5991a616fd5b0b9af3ff20d4ceccd84bbb2e593a3ca88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 113,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 111,
        "length": 6,
        "offset": 40,
        "surroundingCode": "  _ParseAndStripGTestFlags(sys.argv)\n\n  return _flag_map[flag]\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bcc9b6d3754421eacb29eab0f73c7a385f409a6fb6d1947e9bbc4c54f0ed3453"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 117,
      "offset": 3,
      "length": 73,
      "code": {
        "startLine": 115,
        "length": 73,
        "offset": 23,
        "surroundingCode": "\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return os.path.abspath(GetFlag('source_dir'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "fbe7a9d84765138a303a81cb6987f80d6bad17c1d27e9bee6fc7617769319fff"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 119,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 117,
        "length": 6,
        "offset": 79,
        "surroundingCode": "  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return os.path.abspath(GetFlag('source_dir'))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c599f519af80ae28022c9625df0281446ba74b8242503684dae39dde81d87e03"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 123,
      "offset": 3,
      "length": 77,
      "code": {
        "startLine": 121,
        "length": 77,
        "offset": 22,
        "surroundingCode": "\ndef GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n\n  return os.path.abspath(GetFlag('build_dir'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "48d60ab1dec4af1abad75401abc2f989660dae2a52a39153c0116a933791963f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 125,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 123,
        "length": 6,
        "offset": 83,
        "surroundingCode": "  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n\n  return os.path.abspath(GetFlag('build_dir'))\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "86f4f8f5c08912468434bb8b0ca2dc693bc29cd358d262d630984a731c74673f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E302 expected 2 blank lines, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 130,
      "offset": 1,
      "length": 21,
      "code": {
        "startLine": 128,
        "length": 21,
        "offset": 18,
        "surroundingCode": "_temp_dir = None\n\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "78652865852e441771b2c46ca92ffd1a6886ea9ba393f39e67f235f762f87f5b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 131,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 129,
        "length": 2,
        "offset": 25,
        "surroundingCode": "\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "14b8f10e72bc222448657f521f59fa543e2205bf15f9ac7ce6bfba1135af3a2d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 134,
      "offset": 1,
      "length": 31,
      "code": {
        "startLine": 132,
        "length": 31,
        "offset": 50,
        "surroundingCode": "    shutil.rmtree(_temp_dir, ignore_errors=True)\n\natexit.register(_RemoveTempDir)\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "51c5d264d18264071c57e689ce0a11d5bc0e4317514b672bf216b20541633e7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 138,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 136,
        "length": 6,
        "offset": 21,
        "surroundingCode": "\ndef GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2a3306bb0674786bf49d39a2e40289975624d284552e4cce8650f5702adc3afe"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 139,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 137,
        "length": 2,
        "offset": 39,
        "surroundingCode": "def GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b22b49d6333390706f1be788fb3bec003e8dd7896a12ca8f1fd87689101a7ac0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 141,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 139,
        "length": 6,
        "offset": 57,
        "surroundingCode": "  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "88e01b52636b7584744035682a0accada49f71aef23f30d427037c558ad6016a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 145,
      "offset": 3,
      "length": 63,
      "code": {
        "startLine": 143,
        "length": 63,
        "offset": 63,
        "surroundingCode": "\ndef GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n\n  The function will print a message and abort the program if the resulting file"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8dbb0b7b96b53771a748812dec9364fc86b7e2b6d5243731537d303ea2cf7c2e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 159,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 157,
        "length": 4,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  path = os.path.abspath(\n      os.path.join(build_dir or GetBuildDir(), executable_name)\n  )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c7ca63a64c6a72569336c5d94d3899129372ba7a0968abe8829ffd789cd8c346"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 162,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 160,
        "length": 2,
        "offset": 70,
        "surroundingCode": "      os.path.join(build_dir or GetBuildDir(), executable_name)\n  )\n  if (IS_WINDOWS or IS_CYGWIN or IS_OS2) and not path.endswith('.exe'):\n    path += '.exe'\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c9f3207d617145141117084048a0ac149a32a15d4be0a9fd783859f038b5077"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 165,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 163,
        "length": 2,
        "offset": 22,
        "surroundingCode": "    path += '.exe'\n\n  if not os.path.exists(path):\n    message = (\n        'Unable to find the test binary \"%s\". Please make sure to provide\\n'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "af8c4e3acb7ed537270eddf8d2143865507f8d145e071d67c49d0dca6be46d83"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 174,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 172,
        "length": 6,
        "offset": 19,
        "surroundingCode": "    sys.exit(1)\n\n  return path\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "73cfa64ffd9c3ec6fa237d4d52169ee8b00fbf581153609d89dc3633d08dba18"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 178,
      "offset": 3,
      "length": 65,
      "code": {
        "startLine": 176,
        "length": 65,
        "offset": 33,
        "surroundingCode": "\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "31e32beabf99b8daa745d2085f134c631cb0cc0750158d0dca6b91bd2b8c782d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 184,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 182,
        "length": 2,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "41b3ad0fb36cf6578fd9661212d6cad6865e6c93329f5ce3cc85b6741b4f085a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 188,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 186,
        "length": 4,
        "offset": 62,
        "surroundingCode": "    # the argument to exit() directly.\n    return exit_code\n  else:\n    # On Unix, os.WEXITSTATUS() must be used to extract the exit status\n    # from the result of os.system()."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0eb83ac3c466c36a044622aaaccaa74863c813497f3f97d2f2c0746ccebb9c67"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 192,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 190,
        "length": 6,
        "offset": 76,
        "surroundingCode": "    # from the result of os.system().\n    if os.WIFEXITED(exit_code):\n      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "50af60b6cb767e7491f7aa5682ae34fbe387fba4b7af7036c939422c5e0d00a6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 194,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 192,
        "length": 6,
        "offset": 55,
        "surroundingCode": "      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1ad53a59d265b7f9188d0ded8948f563dfa779312d3be818337a75b2e7a87d80"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 199,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 197,
        "length": 3,
        "offset": 21,
        "surroundingCode": "class Subprocess:\n\n  def __init__(self, command, working_dir=None, capture_stderr=True, env=None):\n    \"\"\"Changes into a specified directory, if provided, and executes a command.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "eabf64fd9848cf2d19cf9a173538e0d3a6c6b0c1a57363640344e669572aaf5a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 224,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 222,
        "length": 6,
        "offset": 30,
        "surroundingCode": "\n    if capture_stderr:\n      stderr = subprocess.STDOUT\n    else:\n      stderr = subprocess.PIPE"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f6dabd0ad6e448216701cee6497014f673fe2d27b1836cbb08538c9184f03a1c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 226,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 224,
        "length": 6,
        "offset": 49,
        "surroundingCode": "      stderr = subprocess.STDOUT\n    else:\n      stderr = subprocess.PIPE\n\n    p = subprocess.Popen("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0bc3b6a057c355bbefd82226e1db4a1c7fe1c00214b8109991d349c9e4e75202"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 242,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 240,
        "length": 4,
        "offset": 52,
        "surroundingCode": "\n    if bool(self._return_code & 0x80000000):\n      self.terminated_by_signal = True\n      self.exited = False\n    else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ba0d795587f6ab5559679937b3e49876847701d53c1baf3e9c34c9714ecf1eeb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 243,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 241,
        "length": 4,
        "offset": 90,
        "surroundingCode": "    if bool(self._return_code & 0x80000000):\n      self.terminated_by_signal = True\n      self.exited = False\n    else:\n      self.terminated_by_signal = False"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "90c35fc060bb3b6b2fcdedf66b119efd237e677cb8eb1b342e4e283bb0d1fb23"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 245,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 243,
        "length": 4,
        "offset": 42,
        "surroundingCode": "      self.exited = False\n    else:\n      self.terminated_by_signal = False\n      self.exited = True\n      self.exit_code = self._return_code"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6086858299a353583a75ce03d2dfe3f42886269815d87c1f4aa1ede7a8c4bea1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 246,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 244,
        "length": 4,
        "offset": 56,
        "surroundingCode": "    else:\n      self.terminated_by_signal = False\n      self.exited = True\n      self.exit_code = self._return_code\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f18091b8c599afa4abb2f27fcc02272b0815b0b9c3da446e3d03d28935092f8f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 247,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 245,
        "length": 4,
        "offset": 71,
        "surroundingCode": "      self.terminated_by_signal = False\n      self.exited = True\n      self.exit_code = self._return_code\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b2a0dc08985423f547371cd98e4152dd2a8ac1a76a0e05ccbe7f78de3fc95a82"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 251,
      "offset": 3,
      "length": 25,
      "code": {
        "startLine": 249,
        "length": 25,
        "offset": 15,
        "surroundingCode": "\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n\n  # We must call _ParseAndStripGTestFlags() before calling"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "54b6e31601831f1b58d2e5a32753c9df8787188b571656279359ea1d116124b6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 253,
      "offset": 3,
      "length": 56,
      "code": {
        "startLine": 251,
        "length": 56,
        "offset": 31,
        "surroundingCode": "  \"\"\"Runs the unit test.\"\"\"\n\n  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cbd7a70d82139ac65d006c554ac27c1c839f012682d450981fa1c833fc3a68c3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 254,
      "offset": 3,
      "length": 64,
      "code": {
        "startLine": 252,
        "length": 64,
        "offset": 62,
        "surroundingCode": "\n  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "7fafdf25c1a7b566cc5ddcdc3eec34c64f0dbca83698093035d079a9e2901056"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 255,
      "offset": 3,
      "length": 18,
      "code": {
        "startLine": 253,
        "length": 18,
        "offset": 128,
        "surroundingCode": "  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0088a02eaa920fcbb99101c88ae719e004b9ea048c4b9b819853ba4ab4b9dee4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 256,
      "offset": 3,
      "length": 24,
      "code": {
        "startLine": 254,
        "length": 24,
        "offset": 90,
        "surroundingCode": "  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "29b7baee6bf795bb6bdb95f00893e99220cec98e50fa2c83c573e9ff0d4b801e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 257,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 255,
        "length": 71,
        "offset": 60,
        "surroundingCode": "  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4d0ca71cad870ea9b078669a8e6f8621b6e26d35d5a2ef5679e115fa6db91c9d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 258,
      "offset": 3,
      "length": 38,
      "code": {
        "startLine": 256,
        "length": 38,
        "offset": 113,
        "surroundingCode": "  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c827f69260a55ef33a89f46fb5b680a3970a3dee7dbb1b0fe9a5004cae60d02d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 259,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 257,
        "length": 2,
        "offset": 117,
        "surroundingCode": "  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "71cdfcd315e971ef9ad3046cba92c674dacfb648ac037a512f79ab6c596c65f4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 262,
      "offset": 3,
      "length": 12,
      "code": {
        "startLine": 260,
        "length": 12,
        "offset": 45,
        "surroundingCode": "    del os.environ[GTEST_OUTPUT_VAR_NAME]\n\n  _test_module.main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "73879b567cf94cfff4648ea8f0e2285a56f4959e33a32c5851576ca20ff2aed2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 32,
      "code": {
        "startLine": 56,
        "length": 32,
        "offset": 34,
        "surroundingCode": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable.\n\n  Sets an environment variable to a given value; unsets it when the"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9e7992b43af4d694e34e401a79b78344eeb6aec71cab1261382b4b2c233fb0f6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 68,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 66,
        "length": 7,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4fa3a5a5b92095e13e47456e203aad3bd7d87d3a2b4715659dd7eafc1af137e3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 69,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 67,
        "length": 2,
        "offset": 31,
        "surroundingCode": "\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a30c375077c431410f067fd427e62b059fbdb741abb05d3dd2903dd99e00f81b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 71,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 69,
        "length": 4,
        "offset": 58,
        "surroundingCode": "  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "793167b3702da65af7c474f3193e2f425e220a303e7007e467cf92cb9958c24a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 76,
      "offset": 3,
      "length": 69,
      "code": {
        "startLine": 74,
        "length": 69,
        "offset": 21,
        "surroundingCode": "\ndef Run(command):\n  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n\n  print('Running \"%s\". . .' % ' '.join(command))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ef64afaae6efdea5dd9a78334c3e799f1fdbfa6042f9f801763f1ad4dfe601c5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 78,
      "offset": 3,
      "length": 5,
      "code": {
        "startLine": 76,
        "length": 5,
        "offset": 75,
        "surroundingCode": "  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n\n  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "386e8c7427008cbc38595b253ddade762db77d0c9fb877cf4277e00d7e6028f9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 79,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 77,
        "length": 1,
        "offset": 52,
        "surroundingCode": "\n  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "dc148482dd241b4df4f9215124c215a8da5b207fe973dcbd8e6eafa5e21b4aa9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 80,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 78,
        "length": 6,
        "offset": 94,
        "surroundingCode": "  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "670212dff50d8d7ff321db304fe1eba0b0651086c8b17aa3aed04fb397f76fc5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 85,
      "offset": 3,
      "length": 38,
      "code": {
        "startLine": 83,
        "length": 38,
        "offset": 68,
        "surroundingCode": "# The tests.\nclass ThrowOnFailureTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the throw-on-failure mode.\"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c0822870303c5007ad60a0816e1a9445bdced6522a44887fba0f2bb68904bcef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 87,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 85,
        "length": 3,
        "offset": 44,
        "surroundingCode": "  \"\"\"Tests the throw-on-failure mode.\"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies its behavior.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "23c055ebdebff46c1036a61e353379814af7f3f0b9987ecd9bdf58207fff0dc0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 104,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 102,
        "length": 17,
        "offset": 37,
        "surroundingCode": "\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3de58d1da85ba5f9303378a3b625cd532386e5832b3f9a2a3dbf4860fb8040eb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 106,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 104,
        "length": 17,
        "offset": 56,
        "surroundingCode": "      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3cb11ac1addc85862df560072604d9883ae66de6aad8d001b65f09a7b2869573"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 109,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 107,
        "length": 4,
        "offset": 34,
        "surroundingCode": "\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "50a64d394b9452f829ef4b9d13a19807dc7699ac5d58f0865a19bd1befb245b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 111,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 109,
        "length": 4,
        "offset": 50,
        "surroundingCode": "      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "24165fdfc0479d4937c2d1269f6c2615a0f379453685365dc8f3e1929ee74cc2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 113,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 111,
        "length": 4,
        "offset": 57,
        "surroundingCode": "      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE\n\n    command = [EXE_PATH]"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1639843e9322d1db3b173ce43493ffc102099528fbfd172b28fde2885c86f982"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 117,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 115,
        "length": 7,
        "offset": 44,
        "surroundingCode": "    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if should_fail:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "613408292cd4e34fd828db7c1faf60b663f111e95225ad2451a3b95555074d07"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 120,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 118,
        "length": 13,
        "offset": 27,
        "surroundingCode": "\n    if should_fail:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "17015b15804cffcf66c7070abf5301bcf2aacdf7621dfb099827d66591b849e0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 122,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 120,
        "length": 13,
        "offset": 47,
        "surroundingCode": "      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'\n\n    failed = not Run(command)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c5b4efe9bc64941da1e9dbc66812aba52757c4345c9611dff3933e060e6518e7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 139,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 137,
        "length": 3,
        "offset": 51,
        "surroundingCode": "    self.assertTrue(failed == should_fail, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ff9cf3f535e6c706bcf3c02f11a361ed80c713c186bd53337171068f563eefb4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 144,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 142,
        "length": 3,
        "offset": 81,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value=None, should_fail=False)\n\n  def testThrowOnFailureEnvVar(self):\n    \"\"\"Tests using the GTEST_THROW_ON_FAILURE environment variable.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0bb699e466948167412e3544b156bf7f92fdfb53b4b50c852a8cb616f0eac19d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 150,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 148,
        "length": 3,
        "offset": 79,
        "surroundingCode": "    self.RunAndVerify(env_var_value='1', flag_value=None, should_fail=True)\n\n  def testThrowOnFailureFlag(self):\n    \"\"\"Tests using the --gtest_throw_on_failure flag.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b4a7de3e64d8d9778d6385a827af144372693c20f139b31ad092cb2e01a74f4b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 156,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 154,
        "length": 3,
        "offset": 79,
        "surroundingCode": "    self.RunAndVerify(env_var_value=None, flag_value='1', should_fail=True)\n\n  def testThrowOnFailureFlagOverridesEnvVar(self):\n    \"\"\"Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "55d69c0a477e82708377092dc565caa6981a47f591df884d336145a697f38b4d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
      "language": "Python",
      "line": 166,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 164,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "bc8878c910172da76f95df95d647fa982b0252a2421eae33b7230dfb16df4d41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 36,
      "offset": 3,
      "length": 27,
      "code": {
        "startLine": 34,
        "length": 27,
        "offset": 23,
        "surroundingCode": "\ndef normalize(obj):\n  \"\"\"Normalize output object.\n\n  Args:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "23b064dfe0ad48fffad5d5bf340c70bb9067b56c11e13d32f451aa2ae5fec203"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 46,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 44,
        "length": 3,
        "offset": 9,
        "surroundingCode": "  \"\"\"\n\n  def _normalize(key, value):\n    if key == 'time':\n      return re.sub(r'^\\d+(\\.\\d+)?s$', '*', value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2c2b2a767b154422e08191ef568afe346e5232a9702035f2fec328d21ee6d514"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 48,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 46,
        "length": 6,
        "offset": 58,
        "surroundingCode": "  def _normalize(key, value):\n    if key == 'time':\n      return re.sub(r'^\\d+(\\.\\d+)?s$', '*', value)\n    elif key == 'timestamp':\n      return re.sub(r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$', '*', value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "35b36075325e758995075648dfdb742a26719b1d80eb491cb7b31cb3e37b4a92"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 50,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 48,
        "length": 6,
        "offset": 86,
        "surroundingCode": "      return re.sub(r'^\\d+(\\.\\d+)?s$', '*', value)\n    elif key == 'timestamp':\n      return re.sub(r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$', '*', value)\n    elif key == 'failure':\n      value = re.sub(r'^.*[/\\\\](.*:)\\d+\\n', '\\\\1*\\n', value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "285ec519ee9dbc829bd6c41d92412fb9c046226fb04642a1bcc00ef71987fa10"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 52,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 50,
        "length": 5,
        "offset": 103,
        "surroundingCode": "      return re.sub(r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$', '*', value)\n    elif key == 'failure':\n      value = re.sub(r'^.*[/\\\\](.*:)\\d+\\n', '\\\\1*\\n', value)\n      return re.sub(r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', value)\n    elif key == 'file':"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "aa2333fc896bbe9d17a338ad106bc6eada4c77f1499592a8a8e87d09ab16244e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 53,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 94,
        "surroundingCode": "    elif key == 'failure':\n      value = re.sub(r'^.*[/\\\\](.*:)\\d+\\n', '\\\\1*\\n', value)\n      return re.sub(r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', value)\n    elif key == 'file':\n      return re.sub(r'^.*[/\\\\](.*)', '\\\\1', value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ac146bce452f1fb1dc344b73b1597406771d9235823cc86550d15622290b5415"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 55,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 53,
        "length": 6,
        "offset": 102,
        "surroundingCode": "      return re.sub(r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', value)\n    elif key == 'file':\n      return re.sub(r'^.*[/\\\\](.*)', '\\\\1', value)\n    else:\n      return normalize(value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c599581c4b84d005b362d21994ed426e3bc851d7d355d63ea122af732136554d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 57,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 55,
        "length": 6,
        "offset": 67,
        "surroundingCode": "      return re.sub(r'^.*[/\\\\](.*)', '\\\\1', value)\n    else:\n      return normalize(value)\n\n  if isinstance(obj, dict):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "889e917b542b3a3332b85ad470d7f8a8d9141baf7c731e45142b698ece0b65b1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 59,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 57,
        "length": 2,
        "offset": 33,
        "surroundingCode": "      return normalize(value)\n\n  if isinstance(obj, dict):\n    return {k: _normalize(k, v) for k, v in obj.items()}\n  if isinstance(obj, list):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "774918162d4b17d6c7521e33f27baac7754ac19cc30b7f162864b762b2cb2e09"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 59,
        "length": 2,
        "offset": 87,
        "surroundingCode": "  if isinstance(obj, dict):\n    return {k: _normalize(k, v) for k, v in obj.items()}\n  if isinstance(obj, list):\n    return [normalize(x) for x in obj]\n  else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "74fa39e680b6296bb9283d36bc8ede3e95a0ae096bebcf389a9281b774666a00"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_json_test_utils.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 61,
        "length": 4,
        "offset": 69,
        "surroundingCode": "  if isinstance(obj, list):\n    return [normalize(x) for x in obj]\n  else:\n    return obj\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cfaab170cac916a33a3832ef7bfe8233889f663392df43857465871d432466d9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 45,
      "offset": 3,
      "length": 71,
      "code": {
        "startLine": 43,
        "length": 71,
        "offset": 34,
        "surroundingCode": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f85453797ad6c49e44a7966aee4b1095d1e6c383f385ff5e77c4b2f1bd3e9a88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 47,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 45,
        "length": 2,
        "offset": 77,
        "surroundingCode": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b1fb7c42039a32b4b182da9d87d4461f8aa9b38629cc468c81117cd1355244be"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 49,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 58,
        "surroundingCode": "  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "484da6e828b4e065d1122bb07b682ba8bce4d2f0b1a04d695fbf8786ac06a8fb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 54,
      "offset": 3,
      "length": 60,
      "code": {
        "startLine": 52,
        "length": 60,
        "offset": 51,
        "surroundingCode": "\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n\n  SetEnvVar('TERM', term)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "53410b18ef3e150ec033e05699362c5497d5659944b29ea9972dfb2f7548a876"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 56,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 54,
        "length": 9,
        "offset": 66,
        "surroundingCode": "  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a3f958e5a1c47e1b6fa02358d9edff396312669a5a38bb5f6f25bc9ad0a11103"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 57,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 55,
        "length": 9,
        "offset": 29,
        "surroundingCode": "\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n\n  if color_flag is None:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f26f75eea98a2be8eff1c98a24840ff67e5aac8f6b764fb335569ff097060319"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 59,
      "offset": 3,
      "length": 2,
      "code": {
        "startLine": 57,
        "length": 2,
        "offset": 45,
        "surroundingCode": "  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n\n  if color_flag is None:\n    args = []\n  else:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cfadc0cd0cffcf28f3cbbd31715295627d65e0d4e8ba247811e3737f2e0a771e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 61,
      "offset": 3,
      "length": 4,
      "code": {
        "startLine": 59,
        "length": 4,
        "offset": 41,
        "surroundingCode": "  if color_flag is None:\n    args = []\n  else:\n    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "62c7924a5dc62dfd17bac06e5cbb6a64343c47420fc807462fe1c07055ff0a7a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 63,
      "offset": 3,
      "length": 1,
      "code": {
        "startLine": 61,
        "length": 1,
        "offset": 60,
        "surroundingCode": "  else:\n    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)\n  return not p.exited or p.exit_code\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "61444b8a82f3be419142aeb58e5e4d5e132dbeeee224be1d1f62d3f4be064ba7"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 64,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 104,
        "surroundingCode": "    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)\n  return not p.exited or p.exit_code\n\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d1e316792efa669f98e2a16fe42219337649ceb76d9a3bce0f60ed8a6a6ddfef"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 69,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 67,
        "length": 3,
        "offset": 52,
        "surroundingCode": "class GTestColorTest(gtest_test_utils.TestCase):\n\n  def testNoEnvVarNoFlag(self):\n    \"\"\"Tests the case when there's neither GTEST_COLOR nor --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "5617fc552ed638949ad75726711506fe57ae41e89f84d3dcc0f97ff2d8ca4a20"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 73,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 71,
        "length": 4,
        "offset": 30,
        "surroundingCode": "\n    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('dumb', None, None))\n      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4143388a47d9a58d3b2c29d24ab6dd40e3159311d7ea913dd97acd46a0f0a9b2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 74,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 72,
        "length": 4,
        "offset": 86,
        "surroundingCode": "    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('dumb', None, None))\n      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e7559e0e1fa6647ec9f886821dab9ece4cff229b8d1dce9b79229c23d4016dec"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 75,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 73,
        "length": 4,
        "offset": 121,
        "surroundingCode": "      self.assertTrue(not UsesColor('dumb', None, None))\n      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))\n      self.assertTrue(not UsesColor(None, None, None))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e02a5ddb20b6b263d52c4ed91d401bdafaf5583c4fd89c418ed9a8f70fa5ba3f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 76,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 127,
        "surroundingCode": "      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))\n      self.assertTrue(not UsesColor(None, None, None))\n    self.assertTrue(UsesColor('linux', None, None))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "2be60443d96e26384c4696f2558015d5aac35b8b382636c75bab7e0522eb75cf"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 77,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 75,
        "length": 4,
        "offset": 129,
        "surroundingCode": "      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))\n      self.assertTrue(not UsesColor(None, None, None))\n    self.assertTrue(UsesColor('linux', None, None))\n    self.assertTrue(UsesColor('cygwin', None, None))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1055a8f2c1bde3d0b8c23a9e2a9aed2f2d77075259042c8d0e2c2701c395e73e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 85,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 83,
        "length": 3,
        "offset": 64,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm-256color', None, None))\n\n  def testFlagOnly(self):\n    \"\"\"Tests the case when there's --gtest_color but not GTEST_COLOR.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "aa3f63c4e600f8a913b93ae53c957272b5b49f1edf13ee7d600b3d3246d65902"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 91,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 89,
        "length": 4,
        "offset": 91,
        "surroundingCode": "    self.assertTrue(not UsesColor('xterm-color', None, 'no'))\n    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('emacs', None, 'auto'))\n    self.assertTrue(UsesColor('xterm', None, 'auto'))\n    self.assertTrue(UsesColor('dumb', None, 'yes'))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "3a56b68edf681d1331ad187ee556819f9c9ad7c85575d17c3b9f92998a3f8968"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 96,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 94,
        "length": 3,
        "offset": 56,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm', None, 'yes'))\n\n  def testEnvVarOnly(self):\n    \"\"\"Tests the case when there's GTEST_COLOR but not --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f95e9e85e84387b9a238ae740f26c1882e886ca1feb5ed31c694cc9990fd57a9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 102,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 100,
        "length": 4,
        "offset": 91,
        "surroundingCode": "    self.assertTrue(not UsesColor('xterm-color', 'no', None))\n    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('dumb', 'auto', None))\n    self.assertTrue(UsesColor('xterm-color', 'auto', None))\n    self.assertTrue(UsesColor('dumb', 'yes', None))"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6399d6e2c692960261e8d0571dc424daa76dff2503cd8e755ebeb8b09fcb9a42"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 107,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 105,
        "length": 3,
        "offset": 62,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm-color', 'yes', None))\n\n  def testEnvVarAndFlag(self):\n    \"\"\"Tests the case when there are both GTEST_COLOR and --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d104146604b6cec8087390c46d1d9242ea7e1a00c36961fafa1b64d33be636b9"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 114,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 112,
        "length": 3,
        "offset": 63,
        "surroundingCode": "    self.assertTrue(UsesColor('xterm-color', 'no', 'auto'))\n\n  def testAliasesOfYesAndNo(self):\n    \"\"\"Tests using aliases in specifying --gtest_color.\"\"\"\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "a1f2721a930e9558db55dc43eec89edaf2535c72329e35cf47556b9a211815b8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-color-test.py",
      "language": "Python",
      "line": 129,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 127,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "89e1b82643c94d7abf4019b672090dd1c42a4fdc5e003f0beaafabdaf2d7e00d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-setuptestsuite-test.py",
      "language": "Python",
      "line": 43,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 41,
        "length": 3,
        "offset": 61,
        "surroundingCode": "class GTestSetUpTestSuiteTest(gtest_test_utils.TestCase):\n\n  def testSetupErrorAndTearDownError(self):\n    p = gtest_test_utils.Subprocess(COMMAND)\n    self.assertNotEqual(p.exit_code, 0, msg=p.output)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "955617fce09c23070277801df28c1e58ae8d68b2989c163588fd954efb6b4e51"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-setuptestsuite-test.py",
      "language": "Python",
      "line": 58,
      "offset": 3,
      "length": 16,
      "code": {
        "startLine": 56,
        "length": 16,
        "offset": 30,
        "surroundingCode": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e66d2c33725b9405d72c97ca24671bdf2b0c2c948e4de8b456e81b22a1b8a7cc"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 40,
      "offset": 3,
      "length": 69,
      "code": {
        "startLine": 38,
        "length": 69,
        "offset": 54,
        "surroundingCode": "\nclass GTestXMLTestCase(gtest_test_utils.TestCase):\n  \"\"\"Base class for tests of Google Test's XML output functionality.\"\"\"\n\n  def AssertEquivalentNodes(self, expected_node, actual_node):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ee1ff04ae3c4a68bf8fe0aa5fb4f771b87fdd770dd995ddc0c566a7287879f98"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 42,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 40,
        "length": 3,
        "offset": 75,
        "surroundingCode": "  \"\"\"Base class for tests of Google Test's XML output functionality.\"\"\"\n\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9ea12bb0d1fd8c019098ae455da5d2bdcca3ba2c558473ee0c53f84cc8e551f2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 67,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 65,
        "length": 4,
        "offset": 65,
        "surroundingCode": "\n    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n      self.assertEqual(Node.CDATA_SECTION_NODE, actual_node.nodeType)\n      self.assertEqual(expected_node.nodeValue, actual_node.nodeValue)\n      return"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "af43e85436b86a16a57f6742a3af4192bfde21f142586710fb42c08105032199"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 68,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 66,
        "length": 4,
        "offset": 134,
        "surroundingCode": "    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n      self.assertEqual(Node.CDATA_SECTION_NODE, actual_node.nodeType)\n      self.assertEqual(expected_node.nodeValue, actual_node.nodeValue)\n      return\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "d69c37ee1414219d4b2b8b4e10b31d1b41049b517482d36c89adcc67aea41a6c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 69,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 67,
        "length": 6,
        "offset": 147,
        "surroundingCode": "      self.assertEqual(Node.CDATA_SECTION_NODE, actual_node.nodeType)\n      self.assertEqual(expected_node.nodeValue, actual_node.nodeValue)\n      return\n\n    self.assertEqual(Node.ELEMENT_NODE, actual_node.nodeType)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "186838038a63b54a16909d1c853a711ea26ac821b893b9d1edd8e551924bd27d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 88,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 86,
        "length": 13,
        "offset": 60,
        "surroundingCode": "    )\n    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "78a41e6d3686b81b7075717a0f9409bb1de3eaa451408f7d0e6b59fcac7ff928"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 89,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 87,
        "length": 11,
        "offset": 104,
        "surroundingCode": "    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8c8a4332a6220b107d4f5cdd1d2f7ad48db0d247d0b2f8fe9f95ddcb747271a3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 90,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 88,
        "length": 4,
        "offset": 118,
        "surroundingCode": "      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,\n          'expected attribute %s not found in element %s'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b3ee55018511ff6c7cbc591fa6b74b65b19b542081ba042e7db36c9a4b9b97cb"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 95,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 93,
        "length": 4,
        "offset": 69,
        "surroundingCode": "          % (expected_attr.name, actual_node.tagName),\n      )\n      self.assertEqual(\n          expected_attr.value,\n          actual_attr.value,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "57297e1091277b98b326d9be64a61e2195bd8333673e8ae36756a7be9d29bde1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 115,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 113,
        "length": 4,
        "offset": 66,
        "surroundingCode": "    )\n    for child_id, child in expected_children.items():\n      self.assertTrue(\n          child_id in actual_children,\n          '<%s> is not in <%s> (in element %s)'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "68876e11cf7a799c1c58681dc67e1b2d9c44cc0f11296e37760bf43be3f308d8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 120,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 118,
        "length": 4,
        "offset": 76,
        "surroundingCode": "          % (child_id, actual_children, actual_node.tagName),\n      )\n      self.AssertEquivalentNodes(child, actual_children[child_id])\n\n  identifying_attribute = {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "083f26e98465df135a6fb0345d56d3a34ab940b36d44fdca82a53545a541b633"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 122,
      "offset": 3,
      "length": 21,
      "code": {
        "startLine": 120,
        "length": 21,
        "offset": 70,
        "surroundingCode": "      self.AssertEquivalentNodes(child, actual_children[child_id])\n\n  identifying_attribute = {\n      'testsuites': 'name',\n      'testsuite': 'name',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ca058c4415761f36946ed49698ecdffd8e26b627efdc843c4d1248cd2ca1da13"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 131,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 129,
        "length": 3,
        "offset": 7,
        "surroundingCode": "  }\n\n  def _GetChildren(self, element):\n    \"\"\"Fetches all of the child nodes of element, a DOM Element object.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f0c5b52739ee39489baf785b63591007a26b4dce47ed95e7150dcd4ec2975b88"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 154,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 152,
        "length": 2,
        "offset": 61,
        "surroundingCode": "    children = {}\n    for child in element.childNodes:\n      if child.nodeType == Node.ELEMENT_NODE:\n        if child.tagName == 'properties':\n          self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "978e5b0c6579ddde9080111d31d49bc1594fbcf270e59d35d875d5d64d55ec8e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 156,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 154,
        "length": 4,
        "offset": 98,
        "surroundingCode": "      if child.nodeType == Node.ELEMENT_NODE:\n        if child.tagName == 'properties':\n          self.assertTrue(\n              child.parentNode is not None,\n              'Encountered <properties> element without a parent',"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "b166d6ca060d41b962cfc44b4174dc45d157658e03a994063e83264cb232c1d3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 160,
      "offset": 11,
      "length": 8,
      "code": {
        "startLine": 158,
        "length": 8,
        "offset": 89,
        "surroundingCode": "              'Encountered <properties> element without a parent',\n          )\n          child_id = child.parentNode.getAttribute('name') + '-properties'\n        else:\n          self.assertTrue("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "66a27d8dde142e2d1bfd8ccc7bed93c409b2633a877471dc02daf6ea204e38c0"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 162,
      "offset": 11,
      "length": 4,
      "code": {
        "startLine": 160,
        "length": 4,
        "offset": 99,
        "surroundingCode": "          child_id = child.parentNode.getAttribute('name') + '-properties'\n        else:\n          self.assertTrue(\n              child.tagName in self.identifying_attribute,\n              'Encountered unknown element <%s>' % child.tagName,"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "58c42f6f3b1bd5977086286a2d72324086e70093943a79cb7967978f7bd969c8"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 166,
      "offset": 11,
      "length": 8,
      "code": {
        "startLine": 164,
        "length": 8,
        "offset": 88,
        "surroundingCode": "              'Encountered unknown element <%s>' % child.tagName,\n          )\n          child_id = child.getAttribute(\n              self.identifying_attribute[child.tagName]\n          )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ed48c2a1aad4067cdfd32a27aa5703bfb612891d02e832916b87074a4d46e22d"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 171,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 169,
        "length": 4,
        "offset": 86,
        "surroundingCode": "        self.assertNotIn(child_id, children)\n        children[child_id] = child\n      elif child.nodeType in [Node.TEXT_NODE, Node.CDATA_SECTION_NODE]:\n        if 'detail' not in children:\n          if ("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "090001f4cced121fb4fcd7e8bb2002f21e4668ea0b78f23ed6cb9f7b3421e469"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 173,
      "offset": 11,
      "length": 2,
      "code": {
        "startLine": 171,
        "length": 2,
        "offset": 119,
        "surroundingCode": "      elif child.nodeType in [Node.TEXT_NODE, Node.CDATA_SECTION_NODE]:\n        if 'detail' not in children:\n          if (\n              child.nodeType == Node.CDATA_SECTION_NODE\n              or not child.nodeValue.isspace()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cd741227727628601df43267b87e9388d8fc64ff82903f6e60dc51d68d612d17"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 181,
      "offset": 11,
      "length": 8,
      "code": {
        "startLine": 179,
        "length": 8,
        "offset": 38,
        "surroundingCode": "            )\n        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "911c6f4765e6d5a254eaca834bf9cfea3cb1fd6ae6195f418d38b30f2bf84bc6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 182,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 180,
        "length": 4,
        "offset": 78,
        "surroundingCode": "        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)\n    return children"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1b1027e0878a7f481133fd123941251f1debccbcbbc506a48e185567afc11827"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 186,
      "offset": 3,
      "length": 3,
      "code": {
        "startLine": 184,
        "length": 3,
        "offset": 23,
        "surroundingCode": "    return children\n\n  def NormalizeXml(self, element):\n    \"\"\"Normalizes XML that may change from run to run.\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "e2fe864865d3b1cd2cee535c62ba168adac00d53cd03ef13e4595dce271e4846"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 211,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 209,
        "length": 11,
        "offset": 45,
        "surroundingCode": "\n    if element.tagName == 'testcase':\n      source_file = element.getAttributeNode('file')\n      if source_file:\n        source_file.value = re.sub(r'^.*[/\\\\](.*)', '\\\\1', source_file.value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9f27c575426995a447e86c4596eb39420459542bb506c2727e64af5999aa2a41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 212,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 210,
        "length": 2,
        "offset": 97,
        "surroundingCode": "    if element.tagName == 'testcase':\n      source_file = element.getAttributeNode('file')\n      if source_file:\n        source_file.value = re.sub(r'^.*[/\\\\](.*)', '\\\\1', source_file.value)\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "844d5c33d58d372a326056bfeb7fb9e026759d41e183f211ffacd7f2c0e33dce"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 215,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 213,
        "length": 9,
        "offset": 151,
        "surroundingCode": "        source_file.value = re.sub(r'^.*[/\\\\](.*)', '\\\\1', source_file.value)\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      timestamp = element.getAttributeNode('timestamp')\n      timestamp.value = re.sub(\n          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f738040ccdf377fc016045d0dd1a28c4392d1debefe019390946dd2a29e57af1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 216,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 214,
        "length": 9,
        "offset": 129,
        "surroundingCode": "    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      timestamp = element.getAttributeNode('timestamp')\n      timestamp.value = re.sub(\n          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value\n      )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0e61f27a64200f257b9ff0207166498f628f31978896eb0cf6276fdbd1d59481"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 220,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 218,
        "length": 4,
        "offset": 81,
        "surroundingCode": "      )\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "9e3557e5bd201fce65e3687fd0ec0131164a51a6e5c868294e71dd9b22a40a3a"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 221,
      "offset": 7,
      "length": 73,
      "code": {
        "startLine": 219,
        "length": 73,
        "offset": 119,
        "surroundingCode": "    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "da2c67cea684f892eea77c08f0e82daa6ac8f2a797e73ca8459b9b1934e320e4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 222,
      "offset": 7,
      "length": 18,
      "code": {
        "startLine": 220,
        "length": 18,
        "offset": 132,
        "surroundingCode": "      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "8b5104e730ab3b41ce0d2befc44836ec3254034be9e61a4d238fee9817d108f3"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 223,
      "offset": 7,
      "length": 4,
      "code": {
        "startLine": 221,
        "length": 4,
        "offset": 111,
        "surroundingCode": "      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')\n      if type_param and type_param.value:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "ef75b43b02a8ce2de6641427565751cdc2e912c4886486d26c58a7b6d3994ee2"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 224,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 222,
        "length": 10,
        "offset": 92,
        "surroundingCode": "      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')\n      if type_param and type_param.value:\n        type_param.value = '*'"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "1a68f92c426dcab1b359dcd3163c3b1c9b86608faec121598122a1f6ef1c1b75"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 225,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 223,
        "length": 2,
        "offset": 125,
        "surroundingCode": "      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')\n      if type_param and type_param.value:\n        type_param.value = '*'\n    elif element.tagName == 'failure' or element.tagName == 'skipped':"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c22a71e6055851ee732f57c407eb32e344f3ff73d6f027928444459967bb3b5c"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 228,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 226,
        "length": 15,
        "offset": 108,
        "surroundingCode": "        type_param.value = '*'\n    elif element.tagName == 'failure' or element.tagName == 'skipped':\n      source_line_pat = r'^.*[/\\\\](.*:)\\d+\\n'\n      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "cfe5ae9de018d5b5d5fd499b2aab278c7658617886555721d1f3aa8f2cb33763"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 229,
      "offset": 7,
      "length": 62,
      "code": {
        "startLine": 227,
        "length": 62,
        "offset": 123,
        "surroundingCode": "    elif element.tagName == 'failure' or element.tagName == 'skipped':\n      source_line_pat = r'^.*[/\\\\](.*:)\\d+\\n'\n      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "4ccdfd01e82c111b161683d4b510bb2ee61e215dfbc1b3d81ff96b4363b6a7c1"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 230,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 228,
        "length": 7,
        "offset": 121,
        "surroundingCode": "      source_line_pat = r'^.*[/\\\\](.*:)\\d+\\n'\n      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)\n      for child in element.childNodes:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "de235bf1adf6d5a6ca52ea3c53471b86ebdd298b648ddd7776f492855a6a8b4f"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 231,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 229,
        "length": 7,
        "offset": 127,
        "surroundingCode": "      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)\n      for child in element.childNodes:\n        if child.nodeType == Node.CDATA_SECTION_NODE:"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "30c57bf707f1993ffffc7a5b0e3d91fb38129ca22019fb8736509fcec3836787"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 232,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 230,
        "length": 3,
        "offset": 129,
        "surroundingCode": "      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)\n      for child in element.childNodes:\n        if child.nodeType == Node.CDATA_SECTION_NODE:\n          # Replaces the source line information with a normalized form."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "00226f5bfe4f9aa67e831a57b82c87cdc7add58b8b7e6309d3d20dadeb845d0b"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 234,
      "offset": 11,
      "length": 62,
      "code": {
        "startLine": 232,
        "length": 62,
        "offset": 103,
        "surroundingCode": "      for child in element.childNodes:\n        if child.nodeType == Node.CDATA_SECTION_NODE:\n          # Replaces the source line information with a normalized form.\n          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace."
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f2e6388fe3d1fef4e43cc2dd0ce6efc96d698f02c3677045b752df46e9380c12"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 235,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 233,
        "length": 5,
        "offset": 137,
        "surroundingCode": "        if child.nodeType == Node.CDATA_SECTION_NODE:\n          # Replaces the source line information with a normalized form.\n          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace.\n          child.nodeValue = re.sub("
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "f00a9a62e7efd2148793512d5a2669427685bd9ad4bfcc581ebc96234efe5990"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 236,
      "offset": 11,
      "length": 33,
      "code": {
        "startLine": 234,
        "length": 33,
        "offset": 152,
        "surroundingCode": "          # Replaces the source line information with a normalized form.\n          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace.\n          child.nodeValue = re.sub(\n              r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', cdata"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "6c8a40c8a8a96531053fec06f6d35add213f2ec92fae6c217f8c5751ad172527"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 237,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 235,
        "length": 5,
        "offset": 123,
        "surroundingCode": "          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace.\n          child.nodeValue = re.sub(\n              r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', cdata\n          )"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "0c965568527b41441cbfd371142bc5926253f3615c1d31739eb01bb00f9d7fc4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "PEP 8 coding style violation",
  "tags": [
    "Python"
  ],
  "severity": "Moderate",
  "comment": "PEP 8: E111 indentation is not a multiple of 4",
  "detailsInfo": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool.",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
      "language": "Python",
      "line": 241,
      "offset": 7,
      "length": 2,
      "code": {
        "startLine": 239,
        "length": 2,
        "offset": 55,
        "surroundingCode": "          )\n    for child in element.childNodes:\n      if child.nodeType == Node.ELEMENT_NODE:\n        self.NormalizeXml(child)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyPep8Inspection",
    "baselineState": "new"
  },
  "hash": "c700846dc890a2fb819b5323deb1817e6ddfd71cc530579a7baa4be555813201"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'str' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googlemock/test/gmock_output_test.py",
      "language": "Python",
      "line": 184,
      "offset": 23,
      "length": 6,
      "code": {
        "startLine": 182,
        "length": 6,
        "offset": 131,
        "surroundingCode": "    (output, _) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'wb')\n    golden_file.write(output)\n    golden_file.close()\n    # Suppress the error \"googletest was imported but a call to its main()"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "04c1ca51d30dd8f638b7ffdc6fb83ffd2200c956fd2787230b1091791d8cb3b4"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 403,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 401,
        "length": 4,
        "offset": 107,
        "surroundingCode": "    \"\"\"Tests the behavior without the filter, with sharding enabled.\"\"\"\n\n    self.RunAndVerifyWithSharding(None, 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "d0e4d22497733c449a832ee4bc118076d3eb61cc27b0672a7171ba3988acf710"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 404,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 402,
        "length": 4,
        "offset": 92,
        "surroundingCode": "\n    self.RunAndVerifyWithSharding(None, 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "57268884d3941f434fd5f393e63bf6e394b7db089bfd0c5c84e1e7fa61ceabb5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 405,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 403,
        "length": 4,
        "offset": 148,
        "surroundingCode": "    self.RunAndVerifyWithSharding(None, 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "f52f19eb4662ed5a6c532ce5d1dece54319c3323207da797c7032e4ad40c0ba5"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 406,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 404,
        "length": 4,
        "offset": 168,
        "surroundingCode": "    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "8aef36f5ca231fa0c804c95106c178f25a9d0896401021796e2bdee23ccc446e"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Expected type '{__ne__}', got 'None' instead",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/googletest-filter-unittest.py",
      "language": "Python",
      "line": 407,
      "offset": 35,
      "length": 4,
      "code": {
        "startLine": 405,
        "length": 4,
        "offset": 184,
        "surroundingCode": "    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n\n  def testEmptyFilter(self):"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "4a4afe5b03dc22880ffd94fcaaffd3c06858aaf3f6ec1304ccbc5a936b0a0d41"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Incorrect type",
  "tags": [
    "Python"
  ],
  "severity": "High",
  "comment": "Unexpected type(s): (None, bool) Possible type(s): (str | bytes | PathLike[str] | PathLike[bytes], bool) (str | bytes | PathLike[str] | PathLike[bytes], bool)",
  "detailsInfo": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```",
  "sources": [
    {
      "type": "file",
      "path": "lib/googletest/googletest/test/gtest_test_utils.py",
      "language": "Python",
      "line": 132,
      "offset": 18,
      "length": 31,
      "code": {
        "startLine": 130,
        "length": 31,
        "offset": 55,
        "surroundingCode": "def _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\n\natexit.register(_RemoveTempDir)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyTypeCheckerInspection",
    "baselineState": "new"
  },
  "hash": "9e20d59cdbc0313975f808134858795c5ab39ff2f27bb825881cb66a4f31879c"
}]}