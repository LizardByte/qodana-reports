{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDPY",
          "fullName": "Qodana for Python",
          "version": "231.8866.71",
          "rules": [],
          "taxa": [
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Jupyter",
              "name": "Jupyter"
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "Google App Engine (Python)",
              "name": "Google App Engine (Python)"
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "Django",
              "name": "Django"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 14,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 16,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 14,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "Dependency analysis",
              "name": "Dependency analysis"
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 14,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Ini files",
              "name": "Ini files"
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Pyramid",
              "name": "Pyramid"
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "231.8866",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'.",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Pythonid",
            "version": "231.8866",
            "rules": [
              {
                "id": "JupyterPackageInspection",
                "shortDescription": {
                  "text": "The 'jupyter' package is not installed"
                },
                "fullDescription": {
                  "text": "Reports cases when the 'jupyter' package is not installed for the selected Python interpreter. Without a properly installed 'jupyter' package, you cannot execute Jupyter notebooks. Click the corresponding link on the warning banner to install the missing package. You can also install the package in the Project Settings/Preferences or in the Python Packages tool window. See Installing Python package for more details.",
                  "markdown": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n When the quick-fix is applied, the code changes to: def do_mult(a, b):\n    c = a * b\n    return {c, a, b}",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n```\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n```\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Query_index_required",
                "shortDescription": {
                  "text": "Query does not have the required index"
                },
                "fullDescription": {
                  "text": "Reports GQL queries for which an index is not defined in 'index.yaml'. Such queries will fail on the production server. The quick-fix allows you to add the necessary index definitions.",
                  "markdown": "Reports GQL queries for which an index is not defined in `index.yaml`.\nSuch queries will fail on the production server.\nThe quick-fix allows you to add the necessary index definitions."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: class Book(object):\n    def __init__(self):\n        pass\n When the quick-fix is applied, the missing comment is added: # coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n```\nclass Book(object):\n    def __init__(self):\n        pass\n```\n\nWhen the quick-fix is applied, the missing comment is added:\n\n```\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example:     class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n When the quick-fix is applied, the code sample changes to:     class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. t = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n```\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n```\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedUrlInspection",
                "shortDescription": {
                  "text": "Django {% url %} tag arguments are unresolved"
                },
                "fullDescription": {
                  "text": "Reports a missing url in the 'url' tag. Example: {% url 'url_name' %}\n The IDE shows a warning if 'url_name' is not defined in the 'urls' file.",
                  "markdown": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n```\n{% url 'url_name' %}\n```\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedStaticReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved static reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to static resources. Example: {% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n In this example, 'style.css' is highlighted if there is no such a file in the 'static/poll' directory.",
                  "markdown": "Reports unresolved references to static resources.\n\n**Example:**\n\n```\n{% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n```\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n```\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n```\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndBlockNamesInspection",
                "shortDescription": {
                  "text": "Django endblock name doesn't match the block name"
                },
                "fullDescription": {
                  "text": "Reports incorrect names of the closing blocks. Example:   {% block my_block %}\n  {% endblock not_correct %}",
                  "markdown": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n```\n  {% block my_block %}\n  {% endblock not_correct %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n```\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: def func(s, cache={}):\n    cache[s] = None\n When the quick-fix is applied, the code changes to: def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: def len(a, b, c):\n    d = a + b + c\n    return d\n In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: def func(s):\n    if s.isdigit() == True:\n        return int(s)\n With the quick-fix applied, the code fragment will be simplified to: def func(s):\n    if s.isdigit():\n        return int(s)",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n```\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n```\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n```\ndef func(s):\n    if s.isdigit():\n        return int(s)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n```\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n```\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n```\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: async def bar():\n    pass\n\n\nasync def foo():\n    bar()\n After the quick-fix is applied, the code changes to: async def bar():\n    pass\n\n\nasync def foo():\n    await bar()",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: a = 2\n\n\nif a == None:\n    print(\"Success\")\n Once the quick-fix is applied, the code changes to: a = 2\n\n\nif a is None:\n    print(\"Success\")",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: if True:\n    print('Yes')\nelse:\n    print('No')\n As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: class Movie:\n\n   def show():\n       pass\n When the quick-fix is applied, the code changes to: class Movie:\n\n   def show(self):\n       pass\n The inspection also reports naming issues in class methods. Example: class Movie:\n    @classmethod\n    def show(abc):\n        pass\n Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoBrokenLineCommentInspection",
                "shortDescription": {
                  "text": "Broken line comment"
                },
                "fullDescription": {
                  "text": "Reports '#}' line comment ends in Django templates that do not have a matching line comment start. Example: comment #}\n The IDE highlights '#}' as it requires the corresponding '{#' token.",
                  "markdown": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n```\ncomment #}\n```\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: def foo():\n    global bar\n    print(bar)\n\nfoo()\n As a fix, you can move the global variable declaration: global bar\n\n\ndef foo():\n    print(bar)",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n```\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n```\n\nAs a fix, you can move the global variable declaration:\n\n```\nglobal bar\n\n\ndef foo():\n    print(bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n```\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n```\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: class MyClass(object):\n    def my_method(self, x):\n        print(x)\n If a Make function from method quick-fix is applied, the code changes to: def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n If you select the Make method static quick-fix, the '@staticmethod' decorator is added: class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: t = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n```\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n```\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: class Book():\n    pass\n The quick-fix adds the '__init__' method: class Book():\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n```\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CythonUsageBeforeDeclarationInspection",
                "shortDescription": {
                  "text": "Cython variable is used before its declaration"
                },
                "fullDescription": {
                  "text": "Reports Cython variables being referenced before declaration. Example: cdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0",
                  "markdown": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n```\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassVarInspection",
                "shortDescription": {
                  "text": "Invalid usage of ClassVar variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of ClassVar annotations. Example: from typing import ClassVar\n\n\nclass Cat:\n    color: ClassVar[str] = \"white\"\n    weight: int\n\n    def __init__(self, weight: int):\n        self.weight = weight\n\n\nCat.color = \"black\"  # OK\nmy_cat = Cat(5)\nmy_cat.color = \"gray\"  # Error, setting class variable on instance",
                  "markdown": "Reports invalid usages of [ClassVar](https://docs.python.org/3/library/typing.html#typing.ClassVar) annotations.\n\n**Example:**\n\n```\nfrom typing import ClassVar\n\n\nclass Cat:\n    color: ClassVar[str] = \"white\"\n    weight: int\n\n    def __init__(self, weight: int):\n        self.weight = weight\n\n\nCat.color = \"black\"  # OK\nmy_cat = Cat(5)\nmy_cat.color = \"gray\"  # Error, setting class variable on instance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: dic = {}\ndic['var'] = 1\n When the quick-fix is applied, the code changes to: dic = {'var': 1}",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: \"Hello {1}\".format(\"people\")\n Example 2: def bar():\n    return 1\n\n\n\"%s %s\" % bar()\n As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n```\n\"Hello {1}\".format(\"people\")\n```\n\n**Example 2:**\n\n```\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n```\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: class A:\n    pass\n\n\ndef me_exception():\n    raise A()\n The proposed quick-fix changes the code to: class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n```\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n```\n\nThe proposed quick-fix changes the code to:\n\n```\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop:     for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  It also warns you if a variable declared in the 'with' statement is redeclared inside of the statement body:     with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop:\n\n```\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  \n```\n\nIt also warns you if a variable declared in the `with` statement is redeclared inside of the statement body:\n\n```\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedFilterInspection",
                "shortDescription": {
                  "text": "Unresolved filter"
                },
                "fullDescription": {
                  "text": "Reports unresolved filters in Django templates. Example:   {{ my_value|cool_filter:\"arg\" }}",
                  "markdown": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n```\n  {{ my_value|cool_filter:\"arg\" }}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AppEngineThreadsafeCGIHandlerInspection",
                "shortDescription": {
                  "text": "Threadsafe cannot be enabled with the CGI handler"
                },
                "fullDescription": {
                  "text": "Reports cases when threadsafe is not enabled with the CGI handler.",
                  "markdown": "Reports cases when threadsafe is not enabled with the CGI handler."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoRelationInspection",
                "shortDescription": {
                  "text": "Incorrect comparison expression in Django templates"
                },
                "fullDescription": {
                  "text": "Reports missing whitespaces before and after comparison operators in Django templates. Example: {% if my_var==1 %}\n{% endif %}",
                  "markdown": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n```\n{% if my_var==1 %}\n{% endif %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTagInspection",
                "shortDescription": {
                  "text": "Unresolved tag"
                },
                "fullDescription": {
                  "text": "Reports unresolved tags in Django templates. Example: <h1>{{ question.question_text }}</h1>\n<start>\n The IDE highlights '<start>'. You can either remove the tag or apply the quick-fix to add '<start>' to custom HTML tags.",
                  "markdown": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n```\n<h1>{{ question.question_text }}</h1>\n<start>\n```\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: a = 1\nfrom __future__ import print_function\nprint()\n When the quick-fix is applied, the code changes to: from __future__ import print_function\n\na = 1\nprint()",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n```\na = 1\nfrom __future__ import print_function\nprint()\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nfrom __future__ import print_function\n\na = 1\nprint()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: def print_string(s):\n  print(s.abc())\n In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n```\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n```\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoOrmInspection",
                "shortDescription": {
                  "text": "Django ORM error"
                },
                "fullDescription": {
                  "text": "Reports several methods that may not be called due to some ORM reasons. Example: class Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n The 'remove' function can not be called if the foreign key has 'null=False'.",
                  "markdown": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n```\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n```\n\nThe `remove` function can not be called if the foreign key has `null=False`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTemplateReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved template reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in string literals of 'extends'> and 'include'> Django tags. Example: {% extends \"../DjangoApp/templatetags/base.html\"%}\n In this example, the 'base.html' tag is highlighted, because it is not available in the specified location.",
                  "markdown": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n```\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n```\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: class A(object):\n# №5\n    def __init__(self):\n        pass\n In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: # coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n```\nclass A(object):\n# №5\n    def __init__(self):\n        pass\n```\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n```\n# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Restricted_Python_calls",
                "shortDescription": {
                  "text": "Feature is not supported in the App Engine sandbox"
                },
                "fullDescription": {
                  "text": "Reports usages of Python features that are restricted by the Google App Engine sandbox and will cause a failure on the production server.",
                  "markdown": "Reports usages of Python features that are restricted by the Google App\nEngine sandbox and will cause a failure on the production server."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: def my_func(a):\n    c = a ** 2;\n    return c\n IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: def my_func(a):\n    c = a ** 2\n    return c",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n```\ndef my_func(a):\n    c = a ** 2;\n    return c\n```\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n```\ndef my_func(a):\n    c = a ** 2\n    return c\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoIncompatibleInspection",
                "shortDescription": {
                  "text": "Incompatible code in Django templates"
                },
                "fullDescription": {
                  "text": "Reports features that are not available in the current Django version. Example: {% if my_var is True %}\n{% endif %}\n Available since 1.10. The IDE shows warning when discovered in the earlier versions.",
                  "markdown": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n```\n{% if my_var is True %}\n{% endif %}\n```\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsTagPositionInspection",
                "shortDescription": {
                  "text": "Misplaced {% extends %} tag"
                },
                "fullDescription": {
                  "text": "Reports the '{% extends %}' tag that is not the first tag in a Django template. Example: {% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n In this example, the '{% extends %}' tag is highlighted, because it should be placed before the '{% load %}' tag.",
                  "markdown": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n```\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n```\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Query_bound_parameters",
                "shortDescription": {
                  "text": "Query does not have required bound parameters"
                },
                "fullDescription": {
                  "text": "Reports GQL queries with bound parameters that don't have the necessary parameters passed to the query method call.",
                  "markdown": "Reports GQL queries with bound parameters that don't have the necessary\nparameters passed to the query method call."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n The correct code fragment looks at follows: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n With the quick-fix, you can modify the problematic types: def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n```\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n`s = b'№5'`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: a = 23\nb = 3\na = a + b\n After the quick-fix is applied, the code changes to: a = 23\nb = 3\na += b",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n```\na = 23\nb = 3\na = a + b\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\na = 23\nb = 3\na += b\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n```\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: a = ('first', \\\n     'second', 'third')\n When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n```\na = ('first', \\\n     'second', 'third')\n```\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: def x(): pass\n\n\nx = 2\n It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: def outer(p):\n    def inner(p):\n        pass\n As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n```\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyramidSetupInspection",
                "shortDescription": {
                  "text": "Project is not installed for development"
                },
                "fullDescription": {
                  "text": "Reports cases when no 'python setup.py develop' command was executed for the Pyramid project. You need to execute this command to install the newly created project for development.",
                  "markdown": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pyramid",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoCloseTagInspection",
                "shortDescription": {
                  "text": "Mismatched opening and closing tags"
                },
                "fullDescription": {
                  "text": "Reports cases when opening tags in Django templates are not correctly matched by closing tags. Example: {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n The IDE reports an error on the 'strong' tag not being closed.",
                  "markdown": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n```\n{% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n```\n\nThe IDE reports an error on the `strong` tag not being closed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: x = 0\nif x > 10:\n    b = 3\nprint(b)\n The IDE reports a problem for 'print(b)'. A possible fix is: x = 0\nif x > 10:\n    b = 3\n    print(b)",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n As a fix, place the field with the default value after the fields without default values: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n```\n\nAs a fix, place the field with the default value after the fields without default values:\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n When the quick-fix is applied, the code changes to: def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n```\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n```\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n```\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n```\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Query_restricted",
                "shortDescription": {
                  "text": "Query does not comply with the query restrictions"
                },
                "fullDescription": {
                  "text": "Reports GQL queries that do not comply with the restrictions for queries allowed on the Google App Engine server. See the App Engine documentation for more information.",
                  "markdown": "Reports GQL queries that do not comply with the restrictions for queries allowed\non the Google App Engine server.\nSee the [App Engine documentation](http://code.google.com/appengine/docs/python/datastore/queriesandindexes.html#Restrictions_on_Queries) for more information."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring def demo(a):\n    c = a ** 2\n Example of an empty docstring def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n When the quick-fix is applied, the code fragments change to: def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n```\ndef demo(a):\n    c = a ** 2\n```\n\n**Example of an empty docstring**\n\n```\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n```\n\nWhen the quick-fix is applied, the code fragments change to:\n\n```\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n```\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBlockNamesInspection",
                "shortDescription": {
                  "text": "Duplicated block names"
                },
                "fullDescription": {
                  "text": "Reports duplicated block names in Django templates. Example: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>",
                  "markdown": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n```\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AppEngineThreadsafeInspection",
                "shortDescription": {
                  "text": "Threadsafe is not available or set inappropriately"
                },
                "fullDescription": {
                  "text": "Reports cases when threadsafe is not present or it is not set to either 'yes' or 'no'.",
                  "markdown": "Reports cases when threadsafe is not present or it is not set to either `yes` or `no`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedLoadInspection",
                "shortDescription": {
                  "text": "Unresolved library inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Django load tags. Example:   {% load something_nonexistent %}",
                  "markdown": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n```\n  {% load something_nonexistent %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: dic = {\"a\": [1, 2], \"a\": [3, 4]}",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n```\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n```\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n```\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n```\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n```\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: class A:\n    pass\n With quick-fixes provided by the IDE, this code fragment changes to: class A(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n```\nclass A:\n    pass\n```\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n```\nclass A(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUrlArgumentsInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in the ' {% url %}' tag"
                },
                "fullDescription": {
                  "text": "Reports missing parameters in the template file if the 'url()' function has parameters in its URL path. Example: In the 'url.py' file url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n In the template file {% url 'polls:detail' %}",
                  "markdown": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n```\nurl(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n```\n\nIn the template file\n\n```\n{% url 'polls:detail' %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n\n**Example:**\n\n```\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n```\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function.     def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: l = [1]\nl.append(2)\n When the quick-fix is applied, the code changes to: l = [1, 2]",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "231.8866",
            "rules": [
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, 'AS t1(s VARCHAR)'). This requirement does not apply to scalar functions. Example (PostgreSQL): 'CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;' The 'AS s (c1 INT)' has a typed alias, while 'AS s (c1)' and 'AS t1' do not. In this case, the second call of 'produce_a_table()' and 'DBLINK()' will be highlighted.",
                  "markdown": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes.",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;'",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);'",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "Reports paths that start with the tilde character in LOAD statements. Example (MySQL): 'CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;' Instead of the tilde character, use a full path to the file.",
                  "markdown": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);'",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);'",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlSpaceAfterFunctionNameInspection",
                "shortDescription": {
                  "text": "Whitespace between the function name and the open parenthesis"
                },
                "fullDescription": {
                  "text": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default. Example (MySQL): 'SELECT MAX (qty) FROM orders;'",
                  "markdown": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "Reports truncations of string arguments in ISNULL functions. The ISNULL syntax is 'ISNULL(check_expression, replacement_value)'. According to ISNULL at docs.microsoft.com, 'replacement_value' will be truncated if 'replacement_value' is longer than 'check_expression'. Example (Microsoft SQL Server): 'DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);'",
                  "markdown": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;'",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out.",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'.",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names.",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page.",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action.",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;'",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);'",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical.",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);'",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;'",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;'",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out.",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "Reports usages when the 'ORDER BY' clause is used without 'TOP', 'OFFSET', or 'FOR XML' in views, inline functions, derived tables, subqueries, and common table expressions. For more information about usages of 'ORDER BY', see SELECT - ORDER BY Clause (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL server): 'CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89\nORDER BY b) ALIAS;' In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery. Alternatively, use the Delete element quick-fix to delete the ORDER BY section. After the quick-fix is applied: 'SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89) ALIAS;'",
                  "markdown": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;'",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode.",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;'",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;'",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa).",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;'",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct.",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant.",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four.",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantConditionInspection",
                "shortDescription": {
                  "text": "Constant condition"
                },
                "fullDescription": {
                  "text": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';' The ''Cat' = 'Cat'' is always true and will be reported.",
                  "markdown": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect.",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted.",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);'",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;'",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);'",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of UNION in queries. The inspection works in MySQL versions that are earlier than 8.0. Example (MySQL): 'SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;'",
                  "markdown": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported.",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;'",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix.",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE.",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table.",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors.",
                  "markdown": "Reports type-related errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "Reports invalid cases of subprogram overloading in Oracle. Example (Oracle): 'DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;' You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading, see Restrictions on Overloading at docs.oracle.com.",
                  "markdown": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed.",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "Reports package and object type specifications that are missing body declarations. Package specifications and object types that declare routines as well as package specifications with cursors must have body declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are invoked in program code. Example (Oracle): 'CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;'",
                  "markdown": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "Reports declarations of procedures and functions that are missing their implementation in code. In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names of such procedures or functions that are left without implementation. Example (Oracle): 'DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;' The 'foo' procedure is declared but is missing implementation. We can add the implementation to get rid of the error. 'DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;'",
                  "markdown": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted.",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;'",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database).",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted.",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;'",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;'",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out.",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Example: 'db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()' The 'non_existing_collection' collection does not exist in the database and will be reported.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause.",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNullComparisonInspection",
                "shortDescription": {
                  "text": "Null comparison"
                },
                "fullDescription": {
                  "text": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators. Example (Microsoft SQL Server): 'CREATE TABLE foo ( id int );\n\nSELECT * FROM foo WHERE NULL = NULL;\nSELECT * FROM foo WHERE NULL != NULL;' The 'NULL = NULL' can be replaced with 'IS NULL', the 'NULL != NULL' comparison with 'IS NOT NULL'. To do this replacement, you can use Use IS NULL operator or Use IS NOT NULL operator quick-fixes. 'SELECT * FROM foo WHERE NULL IS NULL;\nSELECT * FROM foo WHERE NULL IS NOT NULL;'",
                  "markdown": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "231.8866",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool.",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "231.8866.71",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These kinds of issues are usually always highlighted when you open the file in the editor and can't be configured (unlike inspections). The options below are controlling the analysis level of this inspection: Option \"Highlight syntax errors\" allows to report parser-related issues. Option \"Run language annotators\" allows to report issues found by annotators configured for this language. See Custom Language Support: Annotators for details. Option \"Run language-specific highlight visitors\" allows to report issues inherent to this file language (e.g., type mismatches or unreported exceptions etc.). See Custom Language Support: Highlighting for details.",
                  "markdown": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These kinds of issues are usually always highlighted when you open the file in the editor and can't be configured (unlike inspections). The options below are controlling the analysis level of this inspection:\n\n* Option \"**Highlight syntax errors**\" allows to report parser-related issues.\n* Option \"**Run language annotators** \" allows to report issues found by annotators configured for this language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Run language-specific highlight visitors** \" allows to report issues inherent to this file language (e.g., type mismatches or unreported exceptions etc.). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection",
                  "markdown": "Custom Regex Inspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO",
                    "qodanaSeverity": "Low"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "231.8866",
            "rules": [
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "231.8866",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports properties whose keys or values end with a whitespace.",
                  "markdown": "Reports properties whose keys or values end with a whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not referenced outside of the .properties file they are contained in.",
                  "markdown": "Reports properties that are not referenced outside of the .properties file they are contained in."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "231.8866",
            "rules": [
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly.",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px'",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, '@import' rules must precede all other types of rules, except '@charset' rules.",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element.",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule.",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter.",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function.",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}'",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration.",
                  "markdown": "Reports a missing semicolon at the end of a declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px'",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement.",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'.",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }'",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value.",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}'",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value.",
                  "markdown": "Reports an incorrect CSS property value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data.",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation.",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element.",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'.",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value.",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'.",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "231.8866",
            "rules": [
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37.",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image.",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44.",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73.",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57.",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background.",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64.",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25.",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute.",
                  "markdown": "Reports an obsolete HTML5 attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.plugins.dependencyAnalysis",
            "version": "231.8866",
            "rules": [
              {
                "id": "CheckThirdPartySoftwareList",
                "shortDescription": {
                  "text": "Check third party software list"
                },
                "fullDescription": {
                  "text": "Check project for possible problems: user's third party software list does not match the collected project metadata",
                  "markdown": "Check project for possible problems: user's third party software list does not match the collected project metadata"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDependencyLicenses",
                "shortDescription": {
                  "text": "Check dependency licenses"
                },
                "fullDescription": {
                  "text": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues",
                  "markdown": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckModuleLicenses",
                "shortDescription": {
                  "text": "Check module licenses"
                },
                "fullDescription": {
                  "text": "Check module licenses for possible problems: missing licenses or other compliance issues",
                  "markdown": "Check module licenses for possible problems: missing licenses or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "231.8866",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.ini4idea",
            "version": "231.8866",
            "rules": [
              {
                "id": "DuplicateKeyInSection",
                "shortDescription": {
                  "text": "Duplicate directive in section"
                },
                "fullDescription": {
                  "text": "Reports duplicate properties in the 'ini' file section.",
                  "markdown": "Reports duplicate properties in the `ini` file section."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateSectionInFile",
                "shortDescription": {
                  "text": "Duplicate section in file"
                },
                "fullDescription": {
                  "text": "Reports duplicate sections in the 'ini' file.",
                  "markdown": "Reports duplicate sections in the `ini` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "231.8866",
            "rules": [
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar.",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "GRAMMAR_ERROR",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "231.8866",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 255,
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Reporting from [\"Unresolved references\"] 'sanity' inspections was suspended due to high problems count."
              },
              "level": "error"
            }
          ],
          "exitCodeDescription": "Qodana reached failThreshold",
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/LizardByte/Sunshine.git",
          "revisionId": "eeb5d48dc5bdc37bd1c872ce275b08465f672198",
          "branch": "ci(tests)-add-initial-tests",
          "properties": {
            "repoUrl": "https://github.com/LizardByte/Sunshine.git",
            "lastAuthorName": "ReenigneArcher",
            "vcsType": "Git",
            "lastAuthorEmail": "42013603+reenignearcher@users.noreply.github.com"
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'original_env' might be referenced before assignment",
            "markdown": "Local variable 'original_env' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 20,
                  "charOffset": 7905,
                  "charLength": 12,
                  "snippet": {
                    "text": "original_env"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 236,
                  "startColumn": 1,
                  "charOffset": 7855,
                  "charLength": 65,
                  "snippet": {
                    "text": "  finally:\n    environ.clear()\n    environ.update(original_env)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20775858f431ce0138aed985adfcb3a9bce6bfde1bb1392f759a409931f9c33d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'output' might be referenced before assignment",
            "markdown": "Local variable 'output' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 33,
                  "charOffset": 21374,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 683,
                  "startColumn": 1,
                  "charOffset": 21286,
                  "charLength": 168,
                  "snippet": {
                    "text": "      # opposed to running them.\n      self.assertTrue(\n          '[==========]' not in output,\n          (\n              'Unexpected output during test enumeration.\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4d46f010b1b165b0e0ff70a9b31f0834b82b33adc40092a03734610a14f9cb0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'tests' might be referenced before assignment",
            "markdown": "Local variable 'tests' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 7,
                  "charOffset": 3257,
                  "charLength": 5,
                  "snippet": {
                    "text": "tests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3192,
                  "charLength": 144,
                  "snippet": {
                    "text": "      test_iterations.append(tests)\n    elif line.strip():\n      tests.append(line.strip())  # 'TestCaseName.TestName'\n\n  return test_iterations"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d837982052a851e440d0c97e49d52b3bd1a5084efe6bcd28f8e4b6603aec81d6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 25,
                  "charOffset": 2782,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 2645,
                  "charLength": 240,
                  "snippet": {
                    "text": "  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d11ee055d234f170eda001c2891543d5556a16306bba8c7c0a9af35767e16f0c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\:' in RegExp",
            "markdown": "Redundant character escape `\\:` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 31,
                  "charOffset": 3281,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\:"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3244,
                  "charLength": 76,
                  "snippet": {
                    "text": "  \"\"\"\n\n  return re.sub(r'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:', 'FILE:#:', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12f68405544471d88ada96fcf74fd9c2a5ca290ebb4db39c8ff530619d77698f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicated code",
            "markdown": "Duplicated code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 5,
                  "charOffset": 4279,
                  "charLength": 517,
                  "snippet": {
                    "text": "SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, env_var_value)\n\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG\n\n    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if expect_seg_fault:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4275,
                  "charLength": 521,
                  "snippet": {
                    "text": "    SetEnvVar(BREAK_ON_FAILURE_ENV_VAR, env_var_value)\n\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG\n\n    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if expect_seg_fault:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 5,
                  "charOffset": 3476,
                  "charLength": 494,
                  "snippet": {
                    "text": "SetEnvVar(THROW_ON_FAILURE, env_var_value)\n\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE\n\n    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if should_fail:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3472,
                  "charLength": 498,
                  "snippet": {
                    "text": "    SetEnvVar(THROW_ON_FAILURE, env_var_value)\n\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE\n\n    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if should_fail:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de5ad679ab08f60c3fe7bbdc13eed89876a671a03329c555af67b729fa74a11f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\:' in RegExp",
            "markdown": "Redundant character escape `\\:` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 45,
                  "charOffset": 3295,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\:"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3244,
                  "charLength": 76,
                  "snippet": {
                    "text": "  \"\"\"\n\n  return re.sub(r'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:', 'FILE:#:', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2311c505016320e35121afde5e56d05ad2d59824117c699bd5b77c5354d7281e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\-' in RegExp",
            "markdown": "Redundant character escape `\\-` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 35,
                  "charOffset": 4610,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\-"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 4512,
                  "charLength": 193,
                  "snippet": {
                    "text": "\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n\n# Regex for parsing test names from Google Test's output."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5061eaff299c5f1a6607ba4bb1b148f9b4fa719f6ec3fe039043a26befe6286"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 38,
                  "charOffset": 4613,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 4512,
                  "charLength": 193,
                  "snippet": {
                    "text": "\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n\n# Regex for parsing test names from Google Test's output."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "144949ffd93cedbeec4f8907562fe7bd8d442847b5d81e23ac2516dba9eeeb34"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicated code",
            "markdown": "Duplicated code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 5,
                  "charOffset": 4818,
                  "charLength": 496,
                  "snippet": {
                    "text": "\"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4814,
                  "charLength": 500,
                  "snippet": {
                    "text": "    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 5,
                  "charOffset": 5349,
                  "charLength": 512,
                  "snippet": {
                    "text": "\"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 5345,
                  "charLength": 516,
                  "snippet": {
                    "text": "    \"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0dfcce21ca17798d0eb369543220b77c0aa668fc0b12940fbe25835b6646fd1e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 39,
                  "charOffset": 4744,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 4647,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n\n# Regex for parsing disabled banner from Google Test's output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3402c0c512d57cc9454d0531886b874901bc6c0a33fd09013078c573d686848e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 55,
                  "charOffset": 4882,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 4765,
                  "charLength": 202,
                  "snippet": {
                    "text": "\n# Regex for parsing disabled banner from Google Test's output\nDISABLED_BANNER_REGEX = re.compile(r'^\\[\\s*DISABLED\\s*\\] (.*)')\n\n# The command line flag to tell Google Test to output the list of tests it"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14b2f5f977d07419bc91b814bfd1b5980451dd3ca50337cf510a09e1f2311c2f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicated code",
            "markdown": "Duplicated code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "charOffset": 2487,
                  "charLength": 554,
                  "snippet": {
                    "text": "{\n            'name': 'SuccessfulTest',\n            'tests': 1,\n            'failures': 0,\n            'disabled': 0,\n            'errors': 0,\n            'time': '*',\n            'timestamp': '*',\n            'testsuite': [{\n                'name': 'Succeeds',\n                'file': 'gtest_xml_output_unittest_.cc',\n                'line': 53,\n                'status': 'RUN',\n                'result': 'COMPLETED',\n                'time': '*',\n                'timestamp': '*',\n                'classname': 'SuccessfulTest',\n            }],\n        }"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2479,
                  "charLength": 563,
                  "snippet": {
                    "text": "        {\n            'name': 'SuccessfulTest',\n            'tests': 1,\n            'failures': 0,\n            'disabled': 0,\n            'errors': 0,\n            'time': '*',\n            'timestamp': '*',\n            'testsuite': [{\n                'name': 'Succeeds',\n                'file': 'gtest_xml_output_unittest_.cc',\n                'line': 53,\n                'status': 'RUN',\n                'result': 'COMPLETED',\n                'time': '*',\n                'timestamp': '*',\n                'classname': 'SuccessfulTest',\n            }],\n        },"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 20,
                  "charOffset": 18956,
                  "charLength": 482,
                  "snippet": {
                    "text": "{\n        'name': 'SuccessfulTest',\n        'tests': 1,\n        'failures': 0,\n        'disabled': 0,\n        'errors': 0,\n        'time': '*',\n        'timestamp': '*',\n        'testsuite': [{\n            'name': 'Succeeds',\n            'file': 'gtest_xml_output_unittest_.cc',\n            'line': 53,\n            'status': 'RUN',\n            'result': 'COMPLETED',\n            'time': '*',\n            'timestamp': '*',\n            'classname': 'SuccessfulTest',\n        }],\n    }"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 554,
                  "startColumn": 1,
                  "charOffset": 18937,
                  "charLength": 503,
                  "snippet": {
                    "text": "    'testsuites': [{\n        'name': 'SuccessfulTest',\n        'tests': 1,\n        'failures': 0,\n        'disabled': 0,\n        'errors': 0,\n        'time': '*',\n        'timestamp': '*',\n        'testsuite': [{\n            'name': 'Succeeds',\n            'file': 'gtest_xml_output_unittest_.cc',\n            'line': 53,\n            'status': 'RUN',\n            'result': 'COMPLETED',\n            'time': '*',\n            'timestamp': '*',\n            'classname': 'SuccessfulTest',\n        }],\n    }],"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed31752f3f9ba7327bb6964745d60b6d4e71312d32014281e66b46a1be55a339"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\:' in RegExp",
            "markdown": "Redundant character escape `\\:` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 53,
                  "charOffset": 3949,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\:"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3879,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n  return re.sub(\n      r'.*[/\\\\]((googletest-output-test_|gtest).cc)(\\:\\d+|\\(\\d+\\))\\: ',\n      r'\\1:#: ',\n      test_output,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc9d87f6e6579acfeaa124300cd1875a1832476c53def3732b059a5c294d3d57"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\:' in RegExp",
            "markdown": "Redundant character escape `\\:` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 67,
                  "charOffset": 3963,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\:"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3879,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n  return re.sub(\n      r'.*[/\\\\]((googletest-output-test_|gtest).cc)(\\:\\d+|\\(\\d+\\))\\: ',\n      r'\\1:#: ',\n      test_output,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "941bfff2b924bfe8a8eed825432655b0c1301a5d234fd77d401443364ce8d8e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicated code",
            "markdown": "Duplicated code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 5,
                  "charOffset": 22185,
                  "charLength": 323,
                  "snippet": {
                    "text": "date_time_from_json = datetime.datetime(\n        year=int(match.group(1)),\n        month=int(match.group(2)),\n        day=int(match.group(3)),\n        hour=int(match.group(4)),\n        minute=int(match.group(5)),\n        second=int(match.group(6)),\n    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_json)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 661,
                  "startColumn": 1,
                  "charOffset": 22181,
                  "charLength": 327,
                  "snippet": {
                    "text": "    date_time_from_json = datetime.datetime(\n        year=int(match.group(1)),\n        month=int(match.group(2)),\n        day=int(match.group(3)),\n        hour=int(match.group(4)),\n        minute=int(match.group(5)),\n        second=int(match.group(6)),\n    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_json)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 5,
                  "charOffset": 17252,
                  "charLength": 321,
                  "snippet": {
                    "text": "date_time_from_xml = datetime.datetime(\n        year=int(match.group(1)),\n        month=int(match.group(2)),\n        day=int(match.group(3)),\n        hour=int(match.group(4)),\n        minute=int(match.group(5)),\n        second=int(match.group(6)),\n    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_xml)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 286,
                  "startColumn": 1,
                  "charOffset": 17248,
                  "charLength": 325,
                  "snippet": {
                    "text": "    date_time_from_xml = datetime.datetime(\n        year=int(match.group(1)),\n        month=int(match.group(2)),\n        day=int(match.group(3)),\n        hour=int(match.group(4)),\n        minute=int(match.group(5)),\n        second=int(match.group(6)),\n    )\n\n    time_delta = abs(datetime.datetime.now() - date_time_from_xml)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc4fbb489af28e319bd879e7a05dd3dc09c3fbc4d692a3b53fdb31eee0e1d5e6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 23,
                  "charOffset": 6594,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6547,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc102c27fc4e2556297b61f6e59e12e735faae608b75551dececbfc64fa28a32"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "DuplicatedCode",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Duplicated code",
            "markdown": "Duplicated code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 5,
                  "charOffset": 24043,
                  "charLength": 517,
                  "snippet": {
                    "text": "p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),\n      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,\n          \"'%s' exited with code %s, which doesn't match \"\n          'the expected exit code %s.' % (command, p.exit_code, 1),\n      )"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 722,
                  "startColumn": 1,
                  "charOffset": 24039,
                  "charLength": 521,
                  "snippet": {
                    "text": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),\n      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,\n          \"'%s' exited with code %s, which doesn't match \"\n          'the expected exit code %s.' % (command, p.exit_code, 1),\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 5,
                  "charOffset": 19118,
                  "charLength": 517,
                  "snippet": {
                    "text": "p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),\n      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,\n          \"'%s' exited with code %s, which doesn't match \"\n          'the expected exit code %s.' % (command, p.exit_code, 1),\n      )"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 19114,
                  "charLength": 521,
                  "snippet": {
                    "text": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),\n      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,\n          \"'%s' exited with code %s, which doesn't match \"\n          'the expected exit code %s.' % (command, p.exit_code, 1),\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "899cc854f323ce10bb46413c30ad9d8290ba3e084c880ca3f679bd7c0882e56f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRedundantEscape",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant character escape '\\]' in RegExp",
            "markdown": "Redundant character escape `\\]` in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 63,
                  "charOffset": 6634,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6547,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6e0053317331daf31d1b3afa8a80814c2cbac1da153ba32e201665c57c1d99d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'AdjustForParameterizedTests' may be 'static'",
            "markdown": "Method `AdjustForParameterizedTests` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 7,
                  "charOffset": 9005,
                  "charLength": 27,
                  "snippet": {
                    "text": "AdjustForParameterizedTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8942,
                  "charLength": 190,
                  "snippet": {
                    "text": "    self.assertEqual(set(set_var), set(full_partition))\n\n  def AdjustForParameterizedTests(self, tests_to_run):\n    \"\"\"Adjust tests_to_run in case value parameterized tests are disabled.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f4a75c5399ed62e18eb697e66eb644393c451e141dabc8b63631762749d7a45"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'setUp' may be 'static'",
            "markdown": "Method `setUp` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 7,
                  "charOffset": 12939,
                  "charLength": 5,
                  "snippet": {
                    "text": "setUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12883,
                  "charLength": 95,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def setUp(self):\n    \"\"\"Sets up test case.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "660126d4da0e10f574d620dfd004c98ab9604f3a46291a2fc7f1d67b0a0158d1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'testExitCodeAndOutput' may be 'static'",
            "markdown": "Method `testExitCodeAndOutput` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "charOffset": 2382,
                  "charLength": 21,
                  "snippet": {
                    "text": "testExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2318,
                  "charLength": 128,
                  "snippet": {
                    "text": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e92d6afe0a41b1daf270b75819697b63bd52446b276df9b5ecce2794e5b48f34"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'RemoveUnsupportedTests' may be 'static'",
            "markdown": "Method `RemoveUnsupportedTests` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 7,
                  "charOffset": 9135,
                  "charLength": 22,
                  "snippet": {
                    "text": "RemoveUnsupportedTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 9078,
                  "charLength": 198,
                  "snippet": {
                    "text": "class GTestOutputTest(gtest_test_utils.TestCase):\n\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89c4dc300b388ed7787befe854ca83b5924610a42ceb8e2aa85153d8f41912a6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'testEnvVarAffectsFlag' may be 'static'",
            "markdown": "Method `testEnvVarAffectsFlag` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 7,
                  "charOffset": 2814,
                  "charLength": 21,
                  "snippet": {
                    "text": "testEnvVarAffectsFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2757,
                  "charLength": 166,
                  "snippet": {
                    "text": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c09b82df0043df5b9f6ea31f968898de9114decca3a4cba287eb1dafe55d3dc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'testXmlOutputFile' may be 'static'",
            "markdown": "Method `testXmlOutputFile` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 7,
                  "charOffset": 3635,
                  "charLength": 17,
                  "snippet": {
                    "text": "testXmlOutputFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3580,
                  "charLength": 143,
                  "snippet": {
                    "text": "      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE affects the output flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02913222ec197e8bd1bd0ea347a9e00e06d41398fdc49e515d134fa9692c2de1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'testXmlOutputFileOverride' may be 'static'",
            "markdown": "Method `testXmlOutputFileOverride` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 7,
                  "charOffset": 3866,
                  "charLength": 25,
                  "snippet": {
                    "text": "testXmlOutputFileOverride"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3808,
                  "charLength": 161,
                  "snippet": {
                    "text": "    AssertEq('xml:tmp/bar.xml', GetFlag('output'))\n\n  def testXmlOutputFileOverride(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c091c7cba603ede65af391c6527a0200e313eb30a67eade38e6ad16b3e707689"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'setUp' may be 'static'",
            "markdown": "Method `setUp` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 7,
                  "charOffset": 5232,
                  "charLength": 5,
                  "snippet": {
                    "text": "setUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5195,
                  "charLength": 75,
                  "snippet": {
                    "text": "  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):\n    CalculateTestLists()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f1f03400f8dbc70562d2d514987944ce3777303ce844d8640e2fa17e11bee6c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'testExitCodeAndOutput' may be 'static'",
            "markdown": "Method `testExitCodeAndOutput` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "charOffset": 2279,
                  "charLength": 21,
                  "snippet": {
                    "text": "testExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2207,
                  "charLength": 136,
                  "snippet": {
                    "text": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "692de3a0070faf6ef6385a5613c47e3f73b09066046ddf8d0751a692b84eb744"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'testExitCodeAndOutput' may be 'static'",
            "markdown": "Method `testExitCodeAndOutput` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "charOffset": 2233,
                  "charLength": 21,
                  "snippet": {
                    "text": "testExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2161,
                  "charLength": 136,
                  "snippet": {
                    "text": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b030919d37d26daea634229b48a8308c728938df7c9b4297d8c81487f3b77e4e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Local variable 'test' value is not used",
            "markdown": "Local variable 'test' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 3,
                  "charOffset": 6870,
                  "charLength": 4,
                  "snippet": {
                    "text": "test"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 6834,
                  "charLength": 121,
                  "snippet": {
                    "text": "  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec1b317c1827b9228f3efd8fa23016a17cf3cf41e99de48d8880841a6a66840d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingBuiltinsInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows built-in name 'set'",
            "markdown": "Shadows built-in name 'set'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 27,
                  "charOffset": 2064,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 94,
                  "snippet": {
                    "text": "\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c2e116a99036db32d3e211dc913415fd4b305962af0a46ff84b436a5d32a154"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 33,
                  "charOffset": 2505,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2471,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9177e427ed0e5f2daca74108cd90df189359d56aaf0eeadfcc92a4e945ba2682"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "charOffset": 2596,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2514,
                  "charLength": 243,
                  "snippet": {
                    "text": "  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "827686b96030c7319166f7c90da9d50739dc02fce1a902ecf0a5d269c431facc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 3,
                  "charOffset": 2647,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2593,
                  "charLength": 224,
                  "snippet": {
                    "text": "\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2140492a5b9f41627473b588df0b23724e8ac0c51c6a8dc4547423f458aa7eb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "charOffset": 2699,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2594,
                  "charLength": 275,
                  "snippet": {
                    "text": "  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e4485d51de284da68f2443c4ff0039d13f2e61bf5258ab92323adc0397b5bb6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 3,
                  "charOffset": 2760,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 2645,
                  "charLength": 240,
                  "snippet": {
                    "text": "  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ce3f2376f43c5de558508e68e4d94a4ed54663bfec5b33ad20891978d653251"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "charOffset": 2820,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2697,
                  "charLength": 189,
                  "snippet": {
                    "text": "  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6a7e872aaffe378ea79a65c71767ac3989d97f433abaebad7e664f71ea1c853"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 21,
                  "charOffset": 2908,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2886,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "995cf7564cc74fc7057f4443ca9040f87124531cbfc3d8222f82d0699bb36b6e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 26,
                  "charOffset": 3346,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3319,
                  "charLength": 116,
                  "snippet": {
                    "text": "\n\ndef NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d074ab8bbfbf26288c282f2d078fa65560ffafebc6212899bf912e9d3d0d808"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 27,
                  "charOffset": 3515,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "charOffset": 3487,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05143d685c2b611681ee95bcfd4c7f384b5d32774ceb40b41e675295840c751f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 34,
                  "charOffset": 3656,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3621,
                  "charLength": 120,
                  "snippet": {
                    "text": "\n\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f28e4fc24eca8ed4716199027f650535caa6f75056434fa81e3a5545a25f3a5a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 19,
                  "charOffset": 3815,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3795,
                  "charLength": 90,
                  "snippet": {
                    "text": "\n\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "399eded603cf39e7721714ac7834ffa6d714f7c1100abfd2d5cfc4b93eceeecb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 38,
                  "charOffset": 4151,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 4112,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b03e3903509499bcbc78158b36fde899951123a90cbdc2888c696811f9d02696"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 3,
                  "charOffset": 4362,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 4353,
                  "charLength": 129,
                  "snippet": {
                    "text": "  \"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9081accf3889cf167c370013d2f8087d281656b8df3a2e4d638436181adbc8df"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 3,
                  "charOffset": 4398,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4359,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "967f1519d2be4275691847584cb20a4722eda0c8bb3ebde11a0cff730e1e246f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "charOffset": 4445,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4360,
                  "charLength": 198,
                  "snippet": {
                    "text": "  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37fe83347da4e55ac70e6a8b97d19b6b1396353cceb5c536b89f69e4b9479afb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "charOffset": 4485,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4396,
                  "charLength": 233,
                  "snippet": {
                    "text": "  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62bc1ab0351ca4a753493b6977338119ed19f76ef3125a113591d4b4e56d18ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 3,
                  "charOffset": 4520,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4443,
                  "charLength": 187,
                  "snippet": {
                    "text": "  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d181c3c013c50d518dc56b4408ce74785473fbe0daa20a2d9900b6335aebf2c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 6,
                  "charOffset": 5231,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 5201,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')\n    golden = golden_file.read().decode('utf-8')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "557b84fdf6d8eaf83917bcc360f7ef6459be34c88153d4b153c3a06e14eba865"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'golden_file' from outer scope",
            "markdown": "Shadows name 'golden_file' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 5,
                  "charOffset": 5307,
                  "charLength": 11,
                  "snippet": {
                    "text": "golden_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 5202,
                  "charLength": 214,
                  "snippet": {
                    "text": "  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')\n    golden = golden_file.read().decode('utf-8')\n    golden_file.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "066e6c56c384fcce98f7d304d2f6a84114e574b7b2793a4c7ecd004a8f02fd1f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 29,
                  "charOffset": 4039,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 4009,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\ndef RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d656840f2d7f26312e8f357cac1b3bc321397ef46d3601f353bb9b09aabe280b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 23,
                  "charOffset": 4290,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4266,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f42f6f2f79599853ddc3f85baaded6ec576ea626be9441d3f25491e759b1174b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 16,
                  "charOffset": 4506,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4489,
                  "charLength": 100,
                  "snippet": {
                    "text": "\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "074e0b6befc5484b2c64a03421ab6a5e408ca7a644fcbf215e255fd435666d6a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 22,
                  "charOffset": 5609,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 5586,
                  "charLength": 97,
                  "snippet": {
                    "text": "\n\ndef RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "41fb4c6e0fd6cfe8f5413ab7140cdcae9ef9e50a14b6ef0b42639a07147934c7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 3,
                  "charOffset": 5686,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5618,
                  "charLength": 229,
                  "snippet": {
                    "text": "  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0dd45b458ab9bbb413df5ce7b7188dbba8f4dc83d484ba17e1571cbc52c289ed"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 3,
                  "charOffset": 5766,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5683,
                  "charLength": 242,
                  "snippet": {
                    "text": "\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2a8ab7a8e0bd39c5ba3c4784d5095e419e19d58bf7c8f6b92a8adc8f8bbd715"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 3,
                  "charOffset": 5831,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5684,
                  "charLength": 245,
                  "snippet": {
                    "text": "  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1b712f834cc85b411d64eea6cd808bd352693e3e52ded21859e4d9dca3de6b0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 3,
                  "charOffset": 5932,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5848,
                  "charLength": 213,
                  "snippet": {
                    "text": "      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])', r'? tests from \\1', output)\n  return re.sub(r'\\d+ tests?\\.', '? tests.', output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35a8cac290fa67d3316e67b19a98dde7f1d7cd045d5b9ea4378c1a620a7f7eec"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 21,
                  "charOffset": 6786,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 6764,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n\ndef NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9181576807cd4f6d90b9824d71d0947f567d2d5d9a34290345b8fc4015ebd831"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 3,
                  "charOffset": 6869,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 6795,
                  "charLength": 185,
                  "snippet": {
                    "text": "  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "888b3c465c5de5e2a0262169f28a552258e0a2c4315e6c3bb18e3fa49daec715"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 3,
                  "charOffset": 6905,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 6866,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0723c440e2b3eda40c130b0cf13d3557673f7a1a9f335bfd9eb8e2308b39221"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 3,
                  "charOffset": 6940,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 6867,
                  "charLength": 159,
                  "snippet": {
                    "text": "  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1d6d98d9719ebd6f8f816387d52571452ca393746401973654cd1413ceeb92e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 3,
                  "charOffset": 6983,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "charOffset": 6903,
                  "charLength": 124,
                  "snippet": {
                    "text": "  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63635c0ae43c117c1804671f8ff0ed0a39e1d81f3571b01d088e6b33a29152a2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'output' from outer scope",
            "markdown": "Shadows name 'output' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 5,
                  "charOffset": 9977,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 305,
                  "startColumn": 1,
                  "charOffset": 9948,
                  "charLength": 105,
                  "snippet": {
                    "text": "\n  def testOutput(self):\n    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a49e318b82cf1c11c0cdb54643a88b5811bddbde7c0a705ffaad5b496f556234"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyShadowingNamesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Shadows name 'golden_file' from outer scope",
            "markdown": "Shadows name 'golden_file' from outer scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 5,
                  "charOffset": 10016,
                  "charLength": 11,
                  "snippet": {
                    "text": "golden_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 307,
                  "startColumn": 1,
                  "charOffset": 9973,
                  "charLength": 226,
                  "snippet": {
                    "text": "    output = GetOutputOfAllCommands()\n\n    golden_file = open(GOLDEN_PATH, 'rb')\n    # A mis-configured source control system can cause \\r appear in EOL\n    # sequences when we read the golden file irrespective of an operating"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "249767a14c10454bb5faad1b7f8b24d673c1e3855f3b2e8b10336d9c73938f18"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 5,
                  "charOffset": 2324,
                  "charLength": 16,
                  "snippet": {
                    "text": "ToUnixLineEnding"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2318,
                  "charLength": 99,
                  "snippet": {
                    "text": "\n\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6596a62c9b8ac0f52cfbaaeaa51415d053fa0ce556ab9b225a1e7b604dcb19dd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 5,
                  "charOffset": 2477,
                  "charLength": 27,
                  "snippet": {
                    "text": "RemoveReportHeaderAndFooter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2471,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2f85390cf97ff3e20641a413e836a459a5f87e64d0c728ca82a398f0ee19148"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "charOffset": 2892,
                  "charLength": 15,
                  "snippet": {
                    "text": "RemoveLocations"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2886,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4ac35a85f65d314da143c538e23c66998c502e1ee90eb50d8a4a696d7cb4f97"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "charOffset": 3325,
                  "charLength": 20,
                  "snippet": {
                    "text": "NormalizeErrorMarker"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3319,
                  "charLength": 116,
                  "snippet": {
                    "text": "\n\ndef NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab166bf6f94d8ec6818ff8d78d456548061d5bd5a36d27b27de3ceecaf5751b4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 5,
                  "charOffset": 3493,
                  "charLength": 21,
                  "snippet": {
                    "text": "RemoveMemoryAddresses"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "charOffset": 3487,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01f36006d20d38a7b3a63ab3d6c22a644e954b1215baa4631833fb4f791371b6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 5,
                  "charOffset": 3627,
                  "charLength": 28,
                  "snippet": {
                    "text": "RemoveTestNamesOfLeakedMocks"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3621,
                  "charLength": 120,
                  "snippet": {
                    "text": "\n\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e274b0ec252a51390d1372a6c31b64a03431469f15bcb563cbc1b8fc72b8639"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 5,
                  "charOffset": 3801,
                  "charLength": 13,
                  "snippet": {
                    "text": "GetLeakyTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3795,
                  "charLength": 90,
                  "snippet": {
                    "text": "\n\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea31865b9d2ea156d0e717c0be2575f7ef0a5d3d53268468baebe162d938369a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 5,
                  "charOffset": 4118,
                  "charLength": 32,
                  "snippet": {
                    "text": "GetNormalizedOutputAndLeakyTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 4112,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bee2111ab0851dff288b68e812ccc9374d69c77fd0085089322f7c72a5f124ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 5,
                  "charOffset": 4636,
                  "charLength": 21,
                  "snippet": {
                    "text": "GetShellCommandOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4630,
                  "charLength": 111,
                  "snippet": {
                    "text": "\n\ndef GetShellCommandOutput(cmd):\n  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e00aef0da572733bff96b12cb0424ff0c5469664aebc008cd69c001e9590ce92"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 5,
                  "charOffset": 4819,
                  "charLength": 39,
                  "snippet": {
                    "text": "GetNormalizedCommandOutputAndLeakyTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4813,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n\ndef GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91004d9db9a2597d739a4a9804ab1feff139d7e37bfd1fb00d17f0d5857981f8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 7,
                  "charOffset": 5208,
                  "charLength": 10,
                  "snippet": {
                    "text": "testOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 5151,
                  "charLength": 193,
                  "snippet": {
                    "text": "class GMockOutputTest(gmock_test_utils.TestCase):\n\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49d650b30943337dcc1ca3d3af611737a3d0f9f80452f43d56a31db6414be4d6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 7,
                  "charOffset": 2410,
                  "charLength": 30,
                  "snippet": {
                    "text": "testCatchesLeakedMockByDefault"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 2355,
                  "charLength": 128,
                  "snippet": {
                    "text": "class GMockLeakTest(gmock_test_utils.TestCase):\n\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e78405bfc7e38b07360215eb223ffb818dbcba40a2f7716d4f563c615dadb0a9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "charOffset": 2714,
                  "charLength": 38,
                  "snippet": {
                    "text": "testDoesNotCatchLeakedMockWhenDisabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2701,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n\n  def testDoesNotCatchLeakedMockWhenDisabled(self):\n    self.assertEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "299b4a1354fb116cd94fa6c6ef4072a604c3d735f40a8b294c6e3278ed60b9f7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 7,
                  "charOffset": 3134,
                  "charLength": 32,
                  "snippet": {
                    "text": "testCatchesLeakedMockWhenEnabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 3121,
                  "charLength": 88,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesLeakedMockWhenEnabled(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e3744acab77ffdeb171a573160608a6b1bc523124ff0609ae57e16c54535aac"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 7,
                  "charOffset": 3537,
                  "charLength": 52,
                  "snippet": {
                    "text": "testCatchesLeakedMockWhenEnabledWithExplictFlagValue"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3524,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesLeakedMockWhenEnabledWithExplictFlagValue(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd5f6781c1d2f886e4d746ab2a90540938bf0f339713e093138d7452a96f0844"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 7,
                  "charOffset": 3799,
                  "charLength": 30,
                  "snippet": {
                    "text": "testCatchesMultipleLeakedMocks"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3786,
                  "charLength": 86,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesMultipleLeakedMocks(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2b5e830b41da2cd54d588c355cbc710c3b9689873b7c1573c0eec258247f41f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 5,
                  "charOffset": 1676,
                  "charLength": 12,
                  "snippet": {
                    "text": "GetSourceDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1670,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e9a7dca8f2c317a8859c85362e93d5e205fd181e5cebe0b79d1dc39cfbdec9c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "charOffset": 1816,
                  "charLength": 21,
                  "snippet": {
                    "text": "GetTestExecutablePath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1810,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n\ndef GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee116de75f4ccbd3090f301b7188894e6bb01cd3265d2bc31ea06a267141eb1a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 5,
                  "charOffset": 2233,
                  "charLength": 13,
                  "snippet": {
                    "text": "GetExitStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2227,
                  "charLength": 100,
                  "snippet": {
                    "text": "\n\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45c1a2ccbaf649f2f10a75f46ed56c52ecbe293b64763a1bb13eb39489298ec4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 5,
                  "charOffset": 3045,
                  "charLength": 4,
                  "snippet": {
                    "text": "Main"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3039,
                  "charLength": 42,
                  "snippet": {
                    "text": "\n\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7876b014a9efe74973a314fa974f22bb28acfab65459753145af8a2f5e751e8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 7,
                  "charOffset": 3867,
                  "charLength": 5,
                  "snippet": {
                    "text": "setUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3797,
                  "charLength": 241,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "231a2639445d76b48a3f0327d8809a179fb836fd3f3904700fefa3e2d51fa69c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 7,
                  "charOffset": 4203,
                  "charLength": 8,
                  "snippet": {
                    "text": "tearDown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4167,
                  "charLength": 81,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a15d4647d3e8dd6e26a90c4472d5499b0c1ca02a6149cd57025f2c679594854b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 7,
                  "charOffset": 4255,
                  "charLength": 17,
                  "snippet": {
                    "text": "DeleteFilesAndDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4219,
                  "charLength": 148,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6008788468daf5dc857bef933bc400a041e7aef413d9311ecc106b9efd122212"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 7,
                  "charOffset": 4601,
                  "charLength": 12,
                  "snippet": {
                    "text": "testOutfile1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4583,
                  "charLength": 93,
                  "snippet": {
                    "text": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6686f22d4655fcb7deb28aca323b572124919cf9301fa65d4e3f1a0db3643cb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 7,
                  "charOffset": 4683,
                  "charLength": 12,
                  "snippet": {
                    "text": "testOutfile2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 4621,
                  "charLength": 137,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be56990959b3055a4f7d3d1dc7cc106f09bf3090d0dd93caa7ad634d13eb7e62"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 7,
                  "charOffset": 4765,
                  "charLength": 12,
                  "snippet": {
                    "text": "_TestOutFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4703,
                  "charLength": 251,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n\n  def _TestOutFile(self, test_name, expected):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, '--gtest_output=json:%s' % self.output_dir_]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d6084bbb14cbfb439d91762f941c433728eb4a7016433cbf73d68860a73b72e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 5,
                  "charOffset": 3323,
                  "charLength": 11,
                  "snippet": {
                    "text": "RunWithFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 3317,
                  "charLength": 73,
                  "snippet": {
                    "text": "\n\ndef RunWithFlag(flag):\n  \"\"\"Runs gtest_help_test_ with the given flag.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c89ede4470816f831579d7635080b187e7d4347fab980a0fb01e3dc0311ab80d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 7,
                  "charOffset": 3827,
                  "charLength": 12,
                  "snippet": {
                    "text": "TestHelpFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3764,
                  "charLength": 151,
                  "snippet": {
                    "text": "  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n\n  def TestHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when help flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfe85637c65f7469885b23af5ac37b00f7971587a007810a7ef464a01b0ea6b7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 7,
                  "charOffset": 4759,
                  "charLength": 25,
                  "snippet": {
                    "text": "TestUnknownFlagWithAbseil"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 4698,
                  "charLength": 168,
                  "snippet": {
                    "text": "      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)\n\n  def TestUnknownFlagWithAbseil(self, flag):\n    \"\"\"Verifies correct behavior when an unknown flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90de9f159aba656c7410d0bab244e8902d8ecfa31d6fd35482476ed2a208286b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 7,
                  "charOffset": 5186,
                  "charLength": 15,
                  "snippet": {
                    "text": "TestNonHelpFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 5117,
                  "charLength": 163,
                  "snippet": {
                    "text": "    self.assertIn('ERROR: Unknown command line flag', output)\n\n  def TestNonHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4fa88c848db7c3c96bafc0adb074e49095be84e9975cab13414b3c5ffc7e21f3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 7,
                  "charOffset": 5604,
                  "charLength": 26,
                  "snippet": {
                    "text": "testPrintsHelpWithFullFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5541,
                  "charLength": 129,
                  "snippet": {
                    "text": "    self.assertFalse(HELP_REGEX.search(output), output)\n\n  def testPrintsHelpWithFullFlag(self):\n    self.TestHelpFlag('--help')\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d64cb83cc1bdbeb8d4da356601abd73f8c9f75b8a3fb57fd6047e74fbf0839c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 7,
                  "charOffset": 5677,
                  "charLength": 28,
                  "snippet": {
                    "text": "testRunsTestsWithoutHelpFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5638,
                  "charLength": 140,
                  "snippet": {
                    "text": "    self.TestHelpFlag('--help')\n\n  def testRunsTestsWithoutHelpFlag(self):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aca1d5e7c3bce5443789c4f76e755f135247ae986921f3a1ae72ee284cb22c82"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 7,
                  "charOffset": 5935,
                  "charLength": 34,
                  "snippet": {
                    "text": "testRunsTestsWithGtestInternalFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 5897,
                  "charLength": 154,
                  "snippet": {
                    "text": "    self.TestNonHelpFlag(None)\n\n  def testRunsTestsWithGtestInternalFlag(self):\n    \"\"\"Verifies correct behavior when internal testing flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6cc2af6cbb58995f5f79ef2817c33a10a11e669dc014c2033da81af447250add"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 9,
                  "charOffset": 20880,
                  "charLength": 22,
                  "snippet": {
                    "text": "testNonEmptyJsonOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 627,
                  "startColumn": 1,
                  "charOffset": 20844,
                  "charLength": 144,
                  "snippet": {
                    "text": "  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a65d98d68757a27aaad7795dfb1bba4caeb0c8c2bddd49ae7cd72bded9c43132"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 7,
                  "charOffset": 21192,
                  "charLength": 20,
                  "snippet": {
                    "text": "testNoTestJsonOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 635,
                  "startColumn": 1,
                  "charOffset": 21115,
                  "charLength": 180,
                  "snippet": {
                    "text": "      self._TestJsonOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY, 1)\n\n  def testNoTestJsonOutput(self):\n    \"\"\"Verifies JSON output for a Google Test binary without actual tests.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5c53f16fb45749890fabd37ae6e36af511b5c308ec591bc16dd4c670a07619b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 7,
                  "charOffset": 21514,
                  "charLength": 18,
                  "snippet": {
                    "text": "testTimestampValue"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 644,
                  "startColumn": 1,
                  "charOffset": 21435,
                  "charLength": 180,
                  "snippet": {
                    "text": "    self._TestJsonOutput('gtest_no_test_unittest', EXPECTED_NO_TEST, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the JSON output is valid.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7949b188a66bac5e05516ad097b7aec8418b4be4fe0b4eac12d06ed42a3a10a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 7,
                  "charOffset": 22698,
                  "charLength": 21,
                  "snippet": {
                    "text": "testDefaultOutputFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 675,
                  "startColumn": 1,
                  "charOffset": 22685,
                  "charLength": 88,
                  "snippet": {
                    "text": "    )\n\n  def testDefaultOutputFile(self):\n    \"\"\"Verifies the default output file name.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "145711eee576b2ecaac5f108eab0b7b9c6dc8e79c396ebfb53179c3d80ce8d0c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 7,
                  "charOffset": 23526,
                  "charLength": 24,
                  "snippet": {
                    "text": "testSuppressedJsonOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 702,
                  "startColumn": 1,
                  "charOffset": 23470,
                  "charLength": 138,
                  "snippet": {
                    "text": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedJsonOutput(self):\n    \"\"\"Verifies that no JSON output is generated.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e579670e1be22cb64b803055173182dc2874c0dd3217b06aba059792554287c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 7,
                  "charOffset": 24620,
                  "charLength": 26,
                  "snippet": {
                    "text": "testFilteredTestJsonOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 738,
                  "startColumn": 1,
                  "charOffset": 24562,
                  "charLength": 146,
                  "snippet": {
                    "text": "    self.assertTrue(not os.path.isfile(json_path))\n\n  def testFilteredTestJsonOutput(self):\n    \"\"\"Verifies JSON output when a filter is applied.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a926e03c9cae88ba7207976378930f94df30bd546bcbd9e25f749030669df7b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 7,
                  "charOffset": 25017,
                  "charLength": 14,
                  "snippet": {
                    "text": "_GetJsonOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 752,
                  "startColumn": 1,
                  "charOffset": 25004,
                  "charLength": 165,
                  "snippet": {
                    "text": "    )\n\n  def _GetJsonOutput(self, gtest_prog_name, extra_args, expected_exit_code):\n    \"\"\"Returns the JSON output generated by running the program gtest_prog_name.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02de7e8ebfba1183adad1fa77c445c720bbfc053931a919aebb67fcda9d5f0fc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 7,
                  "charOffset": 26255,
                  "charLength": 15,
                  "snippet": {
                    "text": "_TestJsonOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 789,
                  "startColumn": 1,
                  "charOffset": 26230,
                  "charLength": 121,
                  "snippet": {
                    "text": "    return actual\n\n  def _TestJsonOutput(\n      self, gtest_prog_name, expected, expected_exit_code, extra_args=None\n  ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53c6b5b3a562d8e6e135691edf76aa366a6d0e20e9741dedf73d81a479cefdbb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 7,
                  "charOffset": 3891,
                  "charLength": 5,
                  "snippet": {
                    "text": "setUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 3822,
                  "charLength": 240,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ced7e38c597b16722ddd59c2f2fd0e27b04dceff3258b47a5246c4701b91fb5e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 7,
                  "charOffset": 4227,
                  "charLength": 8,
                  "snippet": {
                    "text": "tearDown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 4191,
                  "charLength": 81,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65161bfc14cd91089fde2949bb2a8e96ac9acf49960ec3d54d18dc5d35b83bf2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 7,
                  "charOffset": 4279,
                  "charLength": 17,
                  "snippet": {
                    "text": "DeleteFilesAndDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 4243,
                  "charLength": 147,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe976beebbce653f1835b8426c94b4465bf43a2b1f22881b62aef7447eafd637"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 7,
                  "charOffset": 4623,
                  "charLength": 12,
                  "snippet": {
                    "text": "testOutfile1"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4605,
                  "charLength": 97,
                  "snippet": {
                    "text": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0017fe6c1a740f9bcc86e56dc577f70ce733b139dd1b4b0384422cfc7b154e2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 7,
                  "charOffset": 4709,
                  "charLength": 12,
                  "snippet": {
                    "text": "testOutfile2"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 4643,
                  "charLength": 145,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9d21274d39a424c837ad510d174577df727e2dbbc14a1e98ddd4179eaae89032"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 7,
                  "charOffset": 4795,
                  "charLength": 12,
                  "snippet": {
                    "text": "_TestOutFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 4729,
                  "charLength": 258,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n\n  def _TestOutFile(self, test_name, expected_xml):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, \"--gtest_output=xml:%s\" % self.output_dir_]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a11c585d39fe271ad22cbd94d8ed55529470e0abd93aeb61b35767306bf1b20"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 7,
                  "charOffset": 7539,
                  "charLength": 7,
                  "snippet": {
                    "text": "testXml"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 7450,
                  "charLength": 174,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\"\n\n  def testXml(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9976e28833c7fd959f096d8639b02a73a40ae3774f7fec611d429c83e177db6f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 7,
                  "charOffset": 7789,
                  "charLength": 8,
                  "snippet": {
                    "text": "testJSON"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 7740,
                  "charLength": 135,
                  "snippet": {
                    "text": "    self._TestOutput('xml', EXPECTED_XML)\n\n  def testJSON(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bec6b12ea6839e475a628cd007f474f2d50cfda913d4e4eee38ebce406589304"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 7,
                  "charOffset": 8042,
                  "charLength": 10,
                  "snippet": {
                    "text": "_GetOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 7991,
                  "charLength": 174,
                  "snippet": {
                    "text": "    self._TestOutput('json', EXPECTED_JSON)\n\n  def _GetOutput(self, out_format):\n    file_path = os.path.join(\n        gtest_test_utils.GetTempDir(), 'test_out.' + out_format"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9be76e4d7b0e0a38e73acd42c2e1338232c6f1d5e6b908cb552f5373a81eaec8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 7,
                  "charOffset": 8773,
                  "charLength": 11,
                  "snippet": {
                    "text": "_TestOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 268,
                  "startColumn": 1,
                  "charOffset": 8748,
                  "charLength": 154,
                  "snippet": {
                    "text": "    return result\n\n  def _TestOutput(self, test_format, expected_output):\n    actual = self._GetOutput(test_format)\n    actual_lines = actual.splitlines()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8846fcfc9c4f9b7759bac011dedf8782ec6c290b019c2d9c7a7a0badda0c3dc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "CamelCase variable imported as lowercase",
            "markdown": "CamelCase variable imported as lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 27,
                  "charOffset": 2064,
                  "charLength": 3,
                  "snippet": {
                    "text": "set"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 94,
                  "snippet": {
                    "text": "\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9a6a36bb045d8afbfe095132a1a5a39fd513330646244b2d4078cd88b14beb3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 5,
                  "charOffset": 6247,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 6241,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f4baab879c479527ea1b56343b0281748f1a2e474b34657c50540f451a66379"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 5,
                  "charOffset": 6460,
                  "charLength": 18,
                  "snippet": {
                    "text": "RunAndReturnOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 6454,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2971d26085dc78ec8329d055cc6eab3e9a35ceb4da7e085500daccc54ddc964b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 5,
                  "charOffset": 6645,
                  "charLength": 21,
                  "snippet": {
                    "text": "RunAndExtractTestList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6639,
                  "charLength": 121,
                  "snippet": {
                    "text": "\n\ndef RunAndExtractTestList(args=None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e44513fbbadb3b7d535a60197d09909b8e730845d1f73f12862e666b87a3514"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 5,
                  "charOffset": 7209,
                  "charLength": 31,
                  "snippet": {
                    "text": "RunAndExtractDisabledBannerList"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 7203,
                  "charLength": 202,
                  "snippet": {
                    "text": "\n\ndef RunAndExtractDisabledBannerList(args=None):\n  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb0cf941755cb800352b512e17c90e822637caf2d9435f4e4fc3ece97351f697"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 5,
                  "charOffset": 7613,
                  "charLength": 21,
                  "snippet": {
                    "text": "InvokeWithModifiedEnv"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 7607,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b3bedcc9a3a06029cabf2bec27b4a50d5a6a60eb4e6105f7825b8c1bc701752"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 5,
                  "charOffset": 7925,
                  "charLength": 15,
                  "snippet": {
                    "text": "RunWithSharding"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 239,
                  "startColumn": 1,
                  "charOffset": 7919,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n\ndef RunWithSharding(total_shards, shard_index, command):\n  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc3149590b5fe9cd2848c55e6202b3c2f0d36cd7b50565004db07c77e26355e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 7,
                  "charOffset": 8417,
                  "charLength": 14,
                  "snippet": {
                    "text": "AssertSetEqual"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 8395,
                  "charLength": 97,
                  "snippet": {
                    "text": "  # Utilities.\n\n  def AssertSetEqual(self, lhs, rhs):\n    \"\"\"Asserts that two sets are equal.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d5df245c9b50a64c2653318693ea1f9368041806d59b8b486b5b3942bcee933"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 7,
                  "charOffset": 8665,
                  "charLength": 22,
                  "snippet": {
                    "text": "AssertPartitionIsValid"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "charOffset": 8597,
                  "charLength": 190,
                  "snippet": {
                    "text": "      self.assertTrue(elem in lhs, '%s in %s' % (elem, lhs))\n\n  def AssertPartitionIsValid(self, set_var, list_of_sets):\n    \"\"\"Asserts that list_of_sets is a valid partition of set_var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6000d3fb5467ab6272f544632dddf96cade854db1939909322664a629a0507ca"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 7,
                  "charOffset": 9005,
                  "charLength": 27,
                  "snippet": {
                    "text": "AdjustForParameterizedTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8942,
                  "charLength": 190,
                  "snippet": {
                    "text": "    self.assertEqual(set(set_var), set(full_partition))\n\n  def AdjustForParameterizedTests(self, tests_to_run):\n    \"\"\"Adjust tests_to_run in case value parameterized tests are disabled.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7046281806fb0562ec9506591ce38e4e7c2d0983281dddd093b50ed546f98827"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 7,
                  "charOffset": 9295,
                  "charLength": 12,
                  "snippet": {
                    "text": "RunAndVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 9262,
                  "charLength": 160,
                  "snippet": {
                    "text": "      return tests_to_run\n\n  def RunAndVerify(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for a given filter.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4d325508e5e9dd29d66b05af1f53193ffe0c949418228efa146275cae7ce396"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 7,
                  "charOffset": 10452,
                  "charLength": 24,
                  "snippet": {
                    "text": "RunAndVerifyWithSharding"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 314,
                  "startColumn": 1,
                  "charOffset": 10396,
                  "charLength": 113,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def RunAndVerifyWithSharding(\n      self,\n      gtest_filter,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ccd30438fb03ae8b8f8ad8b2863b1c583a4799793ee60e4fd3fd62a23118c498"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 7,
                  "charOffset": 12185,
                  "charLength": 28,
                  "snippet": {
                    "text": "RunAndVerifyAllowingDisabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 359,
                  "startColumn": 1,
                  "charOffset": 12130,
                  "charLength": 197,
                  "snippet": {
                    "text": "    # pylint: enable=g-explicit-bool-comparison\n\n  def RunAndVerifyAllowingDisabled(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for the given filter.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb37ad03fce1588132672302dc7f21fb5168d78221eb79f02919423813462efd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 7,
                  "charOffset": 12939,
                  "charLength": 5,
                  "snippet": {
                    "text": "setUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12883,
                  "charLength": 95,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def setUp(self):\n    \"\"\"Sets up test case.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf312a20389484f702bf835f73e9ae0d92db874fcfdea8f8fe2fe7778c201954"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 7,
                  "charOffset": 13279,
                  "charLength": 19,
                  "snippet": {
                    "text": "testDefaultBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 393,
                  "startColumn": 1,
                  "charOffset": 13264,
                  "charLength": 101,
                  "snippet": {
                    "text": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the filter.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bac3a6abebd46d9f8d1682d18c184dac84311f760acbafa3da88387436b838ee"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 7,
                  "charOffset": 13415,
                  "charLength": 29,
                  "snippet": {
                    "text": "testDefaultBehaviorWithShards"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 398,
                  "startColumn": 1,
                  "charOffset": 13366,
                  "charLength": 158,
                  "snippet": {
                    "text": "    self.RunAndVerify(None, ACTIVE_TESTS)\n\n  def testDefaultBehaviorWithShards(self):\n    \"\"\"Tests the behavior without the filter, with sharding enabled.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "064beb1fe7929646aa037f87b5f771dfaf4cfb45bde42908a6fdba9995156353"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 7,
                  "charOffset": 13873,
                  "charLength": 15,
                  "snippet": {
                    "text": "testEmptyFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 13789,
                  "charLength": 140,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n\n  def testEmptyFilter(self):\n    \"\"\"Tests an empty filter.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e51579ea7539587f5391c4c31fdde462fcd204d890d4be2dd78059551dcaf8c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 7,
                  "charOffset": 14057,
                  "charLength": 13,
                  "snippet": {
                    "text": "testBadFilter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 14005,
                  "charLength": 120,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding('', 2, [])\n\n  def testBadFilter(self):\n    \"\"\"Tests a filter that matches nothing.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9abeae35f79d330cc687046f6f4bd37acf1df148002ed6029956e60ca60a63ba"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 7,
                  "charOffset": 14227,
                  "charLength": 12,
                  "snippet": {
                    "text": "testFullName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 420,
                  "startColumn": 1,
                  "charOffset": 14165,
                  "charLength": 122,
                  "snippet": {
                    "text": "    self.RunAndVerifyAllowingDisabled('BadFilter', [])\n\n  def testFullName(self):\n    \"\"\"Tests filtering by full name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a7eb82187090cda97f55921816a538049b66516bd54ddf8d9a7e30ff82555dd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 7,
                  "charOffset": 14488,
                  "charLength": 20,
                  "snippet": {
                    "text": "testUniversalFilters"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 427,
                  "startColumn": 1,
                  "charOffset": 14412,
                  "charLength": 151,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding('FooTest.Xyz', 5, ['FooTest.Xyz'])\n\n  def testUniversalFilters(self):\n    \"\"\"Tests filters that match everything.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39569bfe0c22a0d149103ca3c2cf6dabccd325ca370c4f0c14e264c350739c08"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 7,
                  "charOffset": 14883,
                  "charLength": 20,
                  "snippet": {
                    "text": "testFilterByTestCase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 14800,
                  "charLength": 156,
                  "snippet": {
                    "text": "    self.RunAndVerifyAllowingDisabled('*.*', ACTIVE_TESTS + DISABLED_TESTS)\n\n  def testFilterByTestCase(self):\n    \"\"\"Tests filtering by test case name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2152ab15de3b96837fcd5166b0bf0213457c745c57c9f02de55e8967d0aced5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 5,
                  "charOffset": 15029,
                  "charLength": 9,
                  "snippet": {
                    "text": "BAZ_TESTS"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "charOffset": 14957,
                  "charLength": 222,
                  "snippet": {
                    "text": "    self.RunAndVerify('FooTest.*', ['FooTest.Abc', 'FooTest.Xyz'])\n\n    BAZ_TESTS = ['BazTest.TestOne', 'BazTest.TestA', 'BazTest.TestB']\n    self.RunAndVerify('BazTest.*', BAZ_TESTS)\n    self.RunAndVerifyAllowingDisabled("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46852d70634fd2fa313faa4074f5000f775cda60c5fe4055ac582d890b72ab62"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 7,
                  "charOffset": 15253,
                  "charLength": 16,
                  "snippet": {
                    "text": "testFilterByTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 447,
                  "startColumn": 1,
                  "charOffset": 15240,
                  "charLength": 77,
                  "snippet": {
                    "text": "    )\n\n  def testFilterByTest(self):\n    \"\"\"Tests filtering by test name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d9bf62b62e82272821f3a71dd84a4002114bbce918f837f0de294a4672748b6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 7,
                  "charOffset": 15400,
                  "charLength": 23,
                  "snippet": {
                    "text": "testFilterDisabledTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 452,
                  "startColumn": 1,
                  "charOffset": 15318,
                  "charLength": 162,
                  "snippet": {
                    "text": "    self.RunAndVerify('*.TestOne', ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testFilterDisabledTests(self):\n    \"\"\"Select only the disabled tests to run.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9dcd44b8e083ddd08e4789c1f94033aef337285e9e64aba120bfd7b601b0a343"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 7,
                  "charOffset": 16333,
                  "charLength": 26,
                  "snippet": {
                    "text": "testWildcardInTestCaseName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 484,
                  "startColumn": 1,
                  "charOffset": 16320,
                  "charLength": 101,
                  "snippet": {
                    "text": "    )\n\n  def testWildcardInTestCaseName(self):\n    \"\"\"Tests using wildcard in the test case name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4f937b2ab902c937a46196f585c60048095b89e6cc682a078b8db57998f9e8a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 7,
                  "charOffset": 16724,
                  "charLength": 22,
                  "snippet": {
                    "text": "testWildcardInTestName"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 501,
                  "startColumn": 1,
                  "charOffset": 16711,
                  "charLength": 92,
                  "snippet": {
                    "text": "    )\n\n  def testWildcardInTestName(self):\n    \"\"\"Tests using wildcard in the test name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72cec88f2005f61ead6cbf9e81e2853dd2cbd67a53f23421f61849c3476fff63"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 7,
                  "charOffset": 16876,
                  "charLength": 20,
                  "snippet": {
                    "text": "testFilterWithoutDot"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 506,
                  "startColumn": 1,
                  "charOffset": 16804,
                  "charLength": 148,
                  "snippet": {
                    "text": "    self.RunAndVerify('*.*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testFilterWithoutDot(self):\n    \"\"\"Tests a filter that has no '.' in it.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfb6eafcfab55b5af9ebc29c1a7794d4628b84f054ba4be7c62b93eb88884d0c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 7,
                  "charOffset": 17141,
                  "charLength": 15,
                  "snippet": {
                    "text": "testTwoPatterns"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 519,
                  "startColumn": 1,
                  "charOffset": 17128,
                  "charLength": 90,
                  "snippet": {
                    "text": "    )\n\n  def testTwoPatterns(self):\n    \"\"\"Tests filters that consist of two patterns.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f46c0b5d8bb3b62c51f3f25745ce984474b09d2d1261da66078ddaf7ff170a33"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 7,
                  "charOffset": 17487,
                  "charLength": 17,
                  "snippet": {
                    "text": "testThreePatterns"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 534,
                  "startColumn": 1,
                  "charOffset": 17416,
                  "charLength": 152,
                  "snippet": {
                    "text": "    self.RunAndVerify(':*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testThreePatterns(self):\n    \"\"\"Tests filters that consist of three patterns.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc37672f812501478d894cb1d0477f5aa640e946711cff1e13fbf3521efbcd44"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 7,
                  "charOffset": 18177,
                  "charLength": 19,
                  "snippet": {
                    "text": "testNegativeFilters"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 568,
                  "startColumn": 1,
                  "charOffset": 18164,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n\n  def testNegativeFilters(self):\n    self.RunAndVerify(\n        '*-BazTest.TestOne',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0d232d71ae91cee784b0b46e892ec340d41d1635882afdd3999f5f43d663031"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 7,
                  "charOffset": 19853,
                  "charLength": 23,
                  "snippet": {
                    "text": "testFlagOverridesEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 641,
                  "startColumn": 1,
                  "charOffset": 19840,
                  "charLength": 120,
                  "snippet": {
                    "text": "    )\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the filter flag overrides the filtering env. variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d7783b641f0ecdc7409f8c0f1a61c3f77a932f076b4a7acbe50335ed617e3f3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 7,
                  "charOffset": 20212,
                  "charLength": 28,
                  "snippet": {
                    "text": "testShardStatusFileIsCreated"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 651,
                  "startColumn": 1,
                  "charOffset": 20130,
                  "charLength": 198,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testShardStatusFileIsCreated(self):\n    \"\"\"Tests that the shard file is created if specified in the environment.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8fd8e5784cfd2c5996fdae47e9c4e2348b35b00c880b1160617c1cd8f0fbe99"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 668,
                  "startColumn": 7,
                  "charOffset": 20735,
                  "charLength": 41,
                  "snippet": {
                    "text": "testShardStatusFileIsCreatedWithListTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 666,
                  "startColumn": 1,
                  "charOffset": 20693,
                  "charLength": 166,
                  "snippet": {
                    "text": "      os.remove(shard_status_file)\n\n  def testShardStatusFileIsCreatedWithListTests(self):\n    \"\"\"Tests that the shard file is created with the \"list_tests\" flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b89986e49fc5babcb0eddbd3c55573006671be25487a839a124916c956d05ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 7,
                  "charOffset": 21711,
                  "charLength": 18,
                  "snippet": {
                    "text": "testDisabledBanner"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 694,
                  "startColumn": 1,
                  "charOffset": 21669,
                  "charLength": 204,
                  "snippet": {
                    "text": "      os.remove(shard_status_file)\n\n  def testDisabledBanner(self):\n    \"\"\"Tests that the disabled banner prints only tests that match filter.\"\"\"\n    make_filter = lambda s: ['--%s=%s' % (FILTER_FLAG, s)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fee797deabd669a719d34d8dbeb77a857fbf033b1f531c82489558d3854f9b74"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 9,
                  "charOffset": 22471,
                  "charLength": 31,
                  "snippet": {
                    "text": "testShardingWorksWithDeathTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 718,
                  "startColumn": 1,
                  "charOffset": 22435,
                  "charLength": 136,
                  "snippet": {
                    "text": "  if SUPPORTS_DEATH_TESTS:\n\n    def testShardingWorksWithDeathTests(self):\n      \"\"\"Tests integration with death tests and sharding.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ec675a67e3d9b7c45a20f23c7f93dd124d6c78893cfd11a005455280e5775a8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "charOffset": 1773,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1767,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2ef1b9b6ad2f6a927cb7385597523a538cde1345d7c19b263817fa7af5b1f8c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1843,
                  "charLength": 8,
                  "snippet": {
                    "text": "AssertEq"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1837,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "481089ead17a3110d550d8227b629f0032f0b5f339eeeae9cc7c204829e90d16"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 2005,
                  "charLength": 21,
                  "snippet": {
                    "text": "TestExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1999,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "970a7fb95d1440b3e8dda14f262895d688c71b574ce6a88b1aadbd8b15c18f0f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "charOffset": 2382,
                  "charLength": 21,
                  "snippet": {
                    "text": "testExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2318,
                  "charLength": 128,
                  "snippet": {
                    "text": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5462e66e675a06cf7520a9a7aa83b1e617d24a4d09f39548f31ababb72de57a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 5,
                  "charOffset": 3506,
                  "charLength": 3,
                  "snippet": {
                    "text": "Run"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3500,
                  "charLength": 101,
                  "snippet": {
                    "text": "\n\ndef Run(args):\n  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1b44883d4103704bf121ec04c6630b635ed5674b88d5e7be4e7087571cd8d6c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 7,
                  "charOffset": 3849,
                  "charLength": 12,
                  "snippet": {
                    "text": "RunAndVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 3775,
                  "charLength": 204,
                  "snippet": {
                    "text": "  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Run googletest-list-tests-unittest_ and verify the output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd422a88d25df8e65f187d239eb53237b0ecf06db9cfe708d6044e815bf2c450"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "charOffset": 5427,
                  "charLength": 19,
                  "snippet": {
                    "text": "testDefaultBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 5412,
                  "charLength": 92,
                  "snippet": {
                    "text": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d41c5b236cb73d26000c635edb851ba78f0f4c2931152ed7d9d0295ec0d552bf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 7,
                  "charOffset": 5593,
                  "charLength": 8,
                  "snippet": {
                    "text": "testFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5505,
                  "charLength": 155,
                  "snippet": {
                    "text": "    self.RunAndVerify(flag_value=None, expected_output_re=None, other_flag=None)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_list_tests flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1548f5ef0a5a220b267fc0bde4e06e6c04a7c471b8fddde31f221fe644fe3542"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 7,
                  "charOffset": 5883,
                  "charLength": 26,
                  "snippet": {
                    "text": "testOverrideNonFilterFlags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 5870,
                  "charLength": 119,
                  "snippet": {
                    "text": "    )\n\n  def testOverrideNonFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests overrides the non-filter flags.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cce0447220d92f4ab9429ac45e84dbb4bf7397f0250c453c08ba1d83381a602"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 7,
                  "charOffset": 6154,
                  "charLength": 19,
                  "snippet": {
                    "text": "testWithFilterFlags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 6141,
                  "charLength": 114,
                  "snippet": {
                    "text": "    )\n\n  def testWithFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests takes into account the filter flags.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9cdf3ad7e5f7e16bd382f3630d14ab77822368a56e54eabc63f7edb4c23adec6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "charOffset": 3353,
                  "charLength": 16,
                  "snippet": {
                    "text": "ToUnixLineEnding"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3347,
                  "charLength": 99,
                  "snippet": {
                    "text": "\n\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4973d30893043c5bef784ffb586ec3065c88b27655841b9188b0fa9bcfdfda8a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 5,
                  "charOffset": 3506,
                  "charLength": 15,
                  "snippet": {
                    "text": "RemoveLocations"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3500,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89d4099b3d275160ecaeb5293c89fbc8d24592935bf8f234c0e277b0eca6b852"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 5,
                  "charOffset": 4015,
                  "charLength": 23,
                  "snippet": {
                    "text": "RemoveStackTraceDetails"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 4009,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n\ndef RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2362fb78c495ed827c27435f2476da95009f6ae7469cd69cdb67610e17e74949"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 5,
                  "charOffset": 4272,
                  "charLength": 17,
                  "snippet": {
                    "text": "RemoveStackTraces"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4266,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c4f9f5d333ad343b4a29e2a14adba79a06e6070d4c5812c9f1c249dc53d53ff"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 5,
                  "charOffset": 4495,
                  "charLength": 10,
                  "snippet": {
                    "text": "RemoveTime"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4489,
                  "charLength": 100,
                  "snippet": {
                    "text": "\n\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50a5078778cad62612b261f0f6fecffc4508488097fd65c230245f6ef911e255"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 5,
                  "charOffset": 4642,
                  "charLength": 21,
                  "snippet": {
                    "text": "RemoveTypeInfoDetails"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4636,
                  "charLength": 118,
                  "snippet": {
                    "text": "\n\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f5f02ac285c445cd3f4facb11603815c8c356de1202dd26be4f375226f1ba95"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 5,
                  "charOffset": 5042,
                  "charLength": 26,
                  "snippet": {
                    "text": "NormalizeToCurrentPlatform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 5036,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n\ndef NormalizeToCurrentPlatform(test_output):\n  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ce19033b8b5702ffbbb6a3ee68f327df7ffde59dd72a462028d1340f700a497"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 5,
                  "charOffset": 5592,
                  "charLength": 16,
                  "snippet": {
                    "text": "RemoveTestCounts"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 5586,
                  "charLength": 97,
                  "snippet": {
                    "text": "\n\ndef RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ec046c9e8b29367f1df5f2b2c4dd8eef84ee2b7db13f56eadb861590877170bc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 5,
                  "charOffset": 6067,
                  "charLength": 19,
                  "snippet": {
                    "text": "RemoveMatchingTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6061,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n\ndef RemoveMatchingTests(test_output, pattern):\n  \"\"\"Removes output of specified tests from a Google Test program's output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f01938cde400069215c8ab8831c370fbbdf632ef152141a679413f84019d06f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 5,
                  "charOffset": 6770,
                  "charLength": 15,
                  "snippet": {
                    "text": "NormalizeOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 6764,
                  "charLength": 102,
                  "snippet": {
                    "text": "\n\ndef NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1000e2ac449d60448194143e20bfd0f3d16ff33e9256092945899bd68314829"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 5,
                  "charOffset": 7033,
                  "charLength": 21,
                  "snippet": {
                    "text": "GetShellCommandOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 7027,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n\ndef GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89ff34c07e475f9bdf3c83ad47481a2f579b2bf2890cf79dc260ae13af60a16c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 5,
                  "charOffset": 7676,
                  "charLength": 16,
                  "snippet": {
                    "text": "GetCommandOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 237,
                  "startColumn": 1,
                  "charOffset": 7670,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n\ndef GetCommandOutput(env_cmd):\n  \"\"\"Runs a command and returns output with all file location info stripped off.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "741af2c4d918a722b6237a1bb7654efe9f4e55566c02b2c4a254c9f255b17c48"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 5,
                  "charOffset": 8354,
                  "charLength": 22,
                  "snippet": {
                    "text": "GetOutputOfAllCommands"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 8348,
                  "charLength": 106,
                  "snippet": {
                    "text": "\n\ndef GetOutputOfAllCommands():\n  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05062d3b3f975d51ce440cb41388e76e7144ad05343b2b385878b253678a1088"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 7,
                  "charOffset": 9135,
                  "charLength": 22,
                  "snippet": {
                    "text": "RemoveUnsupportedTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 9078,
                  "charLength": 198,
                  "snippet": {
                    "text": "class GTestOutputTest(gtest_test_utils.TestCase):\n\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71230961ef9fd41ab83084e12cc1302fdeb9b91e2ea6682c4754863d0bab6605"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 7,
                  "charOffset": 9955,
                  "charLength": 10,
                  "snippet": {
                    "text": "testOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 304,
                  "startColumn": 1,
                  "charOffset": 9925,
                  "charLength": 86,
                  "snippet": {
                    "text": "    return test_output\n\n  def testOutput(self):\n    output = GetOutputOfAllCommands()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f67d6c68430a69372907298214d0491b53e40427239d8fcba1c5ab8a7b8422d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "charOffset": 1884,
                  "charLength": 8,
                  "snippet": {
                    "text": "AssertEq"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1878,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "831ef475362a67d146dcdedf68f7d056ef3e16c7ceb55f4c1a9ab5cd1a5ae5dd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 2046,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2040,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55e7fa7a662e54c8582355610bcd0d23d057f4d299ac90afc4a8dea144d87a88"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "charOffset": 2259,
                  "charLength": 7,
                  "snippet": {
                    "text": "GetFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2253,
                  "charLength": 83,
                  "snippet": {
                    "text": "\n\ndef GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "281246a285f5712679ecfbb4baa48a0c50d82e9fe21cc456eb5fbc4023c2c026"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 5,
                  "charOffset": 2467,
                  "charLength": 8,
                  "snippet": {
                    "text": "TestFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2461,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21aef52bde35249414865dcb2b8985ce120b1d8052102120657f94c122eab934"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 7,
                  "charOffset": 2814,
                  "charLength": 21,
                  "snippet": {
                    "text": "testEnvVarAffectsFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2757,
                  "charLength": 166,
                  "snippet": {
                    "text": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d04fa4f639be8c4178e185fa453bc4e4d15a8a5208c563b1b76efc3669cb35fc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 7,
                  "charOffset": 3635,
                  "charLength": 17,
                  "snippet": {
                    "text": "testXmlOutputFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3580,
                  "charLength": 143,
                  "snippet": {
                    "text": "      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE affects the output flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57b0a0382721c756f1332e6e7446e07b5ef7e35990691f092253d8e8a5cac42c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 7,
                  "charOffset": 3866,
                  "charLength": 25,
                  "snippet": {
                    "text": "testXmlOutputFileOverride"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3808,
                  "charLength": 161,
                  "snippet": {
                    "text": "    AssertEq('xml:tmp/bar.xml', GetFlag('output'))\n\n  def testXmlOutputFileOverride(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0b62b7e0a01af932ae3d1a2e5643189679fc585b3dcb039ccc5569497a8650f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "charOffset": 1951,
                  "charLength": 18,
                  "snippet": {
                    "text": "RunAndReturnOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1945,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3bf5e5216913b8483cb1d3b893a8d5da2ca1855b332811d6d4ac26cb2489de9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "charOffset": 2363,
                  "charLength": 25,
                  "snippet": {
                    "text": "testEnvironmentSetUpFails"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2308,
                  "charLength": 150,
                  "snippet": {
                    "text": "  \"\"\"Tests global test environment failures.\"\"\"\n\n  def testEnvironmentSetUpFails(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "432035563c7871ede27490b29b749340e8f8e5c22aca7acbf95091676aee1517"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 7,
                  "charOffset": 2919,
                  "charLength": 44,
                  "snippet": {
                    "text": "testEnvironmentSetUpAndTornDownForEachRepeat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2867,
                  "charLength": 172,
                  "snippet": {
                    "text": "    self.assertNotIn('Unexpected call', txt)\n\n  def testEnvironmentSetUpAndTornDownForEachRepeat(self):\n    \"\"\"Tests the behavior of test environments and gtest_repeat.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43207ca3baa11032a7144c82a309ca33eee9a49b7e1541ca92461d52ef92f6a8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 7,
                  "charOffset": 3882,
                  "charLength": 35,
                  "snippet": {
                    "text": "testEnvironmentSetUpAndTornDownOnce"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3831,
                  "charLength": 172,
                  "snippet": {
                    "text": "    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88670b866dc83a8911fae20ea11c7091c42350502c83b374ac5ddbf27ee6ff16"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_skip_check_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 7,
                  "charOffset": 2023,
                  "charLength": 29,
                  "snippet": {
                    "text": "testSkipEntireEnvironmentTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1956,
                  "charLength": 232,
                  "snippet": {
                    "text": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de72488b807f893e6e9fbea8d6a33d8e134e7fb01f0142c01dfa2e93ba969d95"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 5,
                  "charOffset": 3099,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 3093,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "402c73654a4f08491aede978e25d07dc0a28c4bf21aa79bbaa2ec5ff40ccc631"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 5,
                  "charOffset": 3312,
                  "charLength": 18,
                  "snippet": {
                    "text": "RunAndReturnOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 3306,
                  "charLength": 133,
                  "snippet": {
                    "text": "\n\ndef RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fa83c03a753823349d04ded4c5bd32abc96f056624c4843a7d7e43d81aa06236"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 7,
                  "charOffset": 4258,
                  "charLength": 19,
                  "snippet": {
                    "text": "testDefaultBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 4180,
                  "charLength": 167,
                  "snippet": {
                    "text": "  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21adbf554302d934ba1c0201cc2f22e4bf57950e24f1f19bce984ca5af2be5d3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 7,
                  "charOffset": 4430,
                  "charLength": 18,
                  "snippet": {
                    "text": "testGoogletestFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 4382,
                  "charLength": 189,
                  "snippet": {
                    "text": "    self.assertIn('22 FAILED TEST', txt)\n\n  def testGoogletestFlag(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSimpleTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2a3a0bbbba51654967c1e4c017b244399dfbe69c8c3840a97ce6344845f0cc5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "charOffset": 4786,
                  "charLength": 20,
                  "snippet": {
                    "text": "testGoogletestEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4737,
                  "charLength": 154,
                  "snippet": {
                    "text": "    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b0b382b77be06a6f957eee6d68c8806c2180b45cb79eda4f9ab31883f62a73d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 7,
                  "charOffset": 5322,
                  "charLength": 15,
                  "snippet": {
                    "text": "testBazelEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5274,
                  "charLength": 146,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testBazelEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb79fff9de8a1c5e41ab6510eccbc8e2a93dbc6c491cbb5bb6eb298c2b001a25"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 7,
                  "charOffset": 5869,
                  "charLength": 23,
                  "snippet": {
                    "text": "testFlagOverridesEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 5815,
                  "charLength": 134,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80df935ad156efbbe89ada0fd525795d5df34f0a509df425a3fd8e855cc52d9e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 7,
                  "charOffset": 6208,
                  "charLength": 40,
                  "snippet": {
                    "text": "testGoogletestEnvVarOverridesBazelEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 6160,
                  "charLength": 170,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d849795b3abaa3839369546fabf6685235d266049cf77f3b4c2f116dcf33ad08"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 7,
                  "charOffset": 6676,
                  "charLength": 17,
                  "snippet": {
                    "text": "testEventListener"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 6622,
                  "charLength": 192,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testEventListener(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSkipTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ca5d07afccc48b3809facfa397a03c3e87fe622402de5a91219fb5c52b052ba"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 7,
                  "charOffset": 7835,
                  "charLength": 20,
                  "snippet": {
                    "text": "assertXmlResultCount"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 7820,
                  "charLength": 99,
                  "snippet": {
                    "text": "      )\n\n  def assertXmlResultCount(self, result, count, xml):\n    self.assertEqual(\n        count,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a6a4f2d900b916d9906957f244fc9351b809f192ffdfaaa52fe9d068a7c1c550"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 7,
                  "charOffset": 8066,
                  "charLength": 20,
                  "snippet": {
                    "text": "assertXmlStatusCount"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 8053,
                  "charLength": 97,
                  "snippet": {
                    "text": "    )\n\n  def assertXmlStatusCount(self, status, count, xml):\n    self.assertEqual(\n        count,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f31ec5ad431dff6072242a773359351c1a39a77bb7dda35e0129021272d75c96"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 7,
                  "charOffset": 8297,
                  "charLength": 29,
                  "snippet": {
                    "text": "assertFailFastXmlAndTxtOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 240,
                  "startColumn": 1,
                  "charOffset": 8284,
                  "charLength": 72,
                  "snippet": {
                    "text": "    )\n\n  def assertFailFastXmlAndTxtOutput(\n      self,\n      fail_fast,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "140c4f2ebea1a9e4ce09432275b6355ea97656387bad592442dc261b19f78e9b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 7,
                  "charOffset": 9270,
                  "charLength": 22,
                  "snippet": {
                    "text": "assertFailFastBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 9196,
                  "charLength": 127,
                  "snippet": {
                    "text": "    self.assertXmlResultCount('suppressed', suppressed_count, xml)\n\n  def assertFailFastBehavior(\n      self,\n      test_suite,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2b04d5f16058d7a49dac03865a7ca8a0649fbbb4acce0756ad65c239a16109de"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 7,
                  "charOffset": 9754,
                  "charLength": 25,
                  "snippet": {
                    "text": "assertNotFailFastBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 9739,
                  "charLength": 71,
                  "snippet": {
                    "text": "      )\n\n  def assertNotFailFastBehavior(\n      self,\n      test_suite,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0559da2914fd9be4bd743db2b9be1a381495fa7eee17e5987c52d044e50a1840"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 7,
                  "charOffset": 10245,
                  "charLength": 23,
                  "snippet": {
                    "text": "testFlag_HasFixtureTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 311,
                  "startColumn": 1,
                  "charOffset": 10230,
                  "charLength": 132,
                  "snippet": {
                    "text": "      )\n\n  def testFlag_HasFixtureTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_F.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0b2f7a602cb7f7e26e3daf264aa12d3cb84859671e827789b683ebc314b02fc9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 7,
                  "charOffset": 10696,
                  "charLength": 22,
                  "snippet": {
                    "text": "testFlag_HasSimpleTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 328,
                  "startColumn": 1,
                  "charOffset": 10683,
                  "charLength": 127,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasSimpleTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4f0c082875568bc545beddc6e1b323cd2ffe21a3635b2aba0aa77b89ee42468"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 7,
                  "charOffset": 11142,
                  "charLength": 26,
                  "snippet": {
                    "text": "testFlag_HasParametersTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 11129,
                  "charLength": 133,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasParametersTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_P.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58eb24dde5160f548ebacc2ca37bb8de74aac77704daee0f7964df9a41930d32"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 7,
                  "charOffset": 11640,
                  "charLength": 24,
                  "snippet": {
                    "text": "testFlag_HasDisabledTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 362,
                  "startColumn": 1,
                  "charOffset": 11627,
                  "charLength": 144,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9f1e451a764dbd8ae6be374aee337a41ee91e1a54fd3b812daba966da11a8ec"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 7,
                  "charOffset": 12163,
                  "charLength": 35,
                  "snippet": {
                    "text": "testFlag_HasDisabledRunDisabledTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 12150,
                  "charLength": 163,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases enabled.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35943891f35c7810f69427ca99f69c6bf43553aacc17bf86781eca068f0f3baf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 7,
                  "charOffset": 12703,
                  "charLength": 29,
                  "snippet": {
                    "text": "testFlag_HasDisabledSuiteTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 12690,
                  "charLength": 150,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledSuiteTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e50d77d755e012f3671a148795024be11a2164b2dabf4d4df315c3a3c3470be"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 7,
                  "charOffset": 13252,
                  "charLength": 40,
                  "snippet": {
                    "text": "testFlag_HasDisabledSuiteRunDisabledTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 419,
                  "startColumn": 1,
                  "charOffset": 13239,
                  "charLength": 169,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledSuiteRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites enabled.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4f537796ed93de70732ade38f873ce382b23a26b9d7f69721fa4900b3a92c26"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 9,
                  "charOffset": 13848,
                  "charLength": 21,
                  "snippet": {
                    "text": "testFlag_HasDeathTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 440,
                  "startColumn": 1,
                  "charOffset": 13812,
                  "charLength": 160,
                  "snippet": {
                    "text": "  if SUPPORTS_DEATH_TESTS:\n\n    def testFlag_HasDeathTest(self):\n      \"\"\"Tests the behavior of fail_fast and death tests.\"\"\"\n      self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e5aa4a73d7fae03a046e18cf8da47e23ee9dce6aa93f963bb076b2a0b6795102"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_skip_environment_check_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 7,
                  "charOffset": 2039,
                  "charLength": 29,
                  "snippet": {
                    "text": "testSkipEntireEnvironmentTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1972,
                  "charLength": 203,
                  "snippet": {
                    "text": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43db3ba9157364791caff2a7b5e1d6411cc9dd8cb9ca7af16cad0ca0efaf1d69"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 2133,
                  "charLength": 24,
                  "snippet": {
                    "text": "AlsoRunDisabledTestsFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2127,
                  "charLength": 77,
                  "snippet": {
                    "text": "\n\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a917016172bbcfe2e5a6f370054d9da6e7572dea101f2bc3fcf79190f97a081d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 5,
                  "charOffset": 2210,
                  "charLength": 10,
                  "snippet": {
                    "text": "FilterFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2204,
                  "charLength": 77,
                  "snippet": {
                    "text": "\n\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df709e9ed766c008fb67efadcc89510cf2e75fd720792d53d1cf18101fd88487"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 5,
                  "charOffset": 2287,
                  "charLength": 10,
                  "snippet": {
                    "text": "RepeatFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2281,
                  "charLength": 57,
                  "snippet": {
                    "text": "\n\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "344d3cd700a5696e155648228ee5d5e7daaf4faf7cc0b3181c88f507c0bc42ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "charOffset": 2344,
                  "charLength": 11,
                  "snippet": {
                    "text": "ShuffleFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2338,
                  "charLength": 48,
                  "snippet": {
                    "text": "\n\ndef ShuffleFlag():\n  return '--gtest_shuffle'\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3803e3eebbbe22c06fb73e1ecef6ae0f46a799961af48677776a7eb56e3bddb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 5,
                  "charOffset": 2392,
                  "charLength": 14,
                  "snippet": {
                    "text": "RandomSeedFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2386,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e90c5589b2ba6ce9ef303e09b9923f68b4e1dd4f69662ea94eeb54d51df2df2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 5,
                  "charOffset": 2458,
                  "charLength": 18,
                  "snippet": {
                    "text": "RunAndReturnOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2452,
                  "charLength": 97,
                  "snippet": {
                    "text": "\n\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f7b814dfc3c7ff8a009bb55e44f40a48ca9187e89f931ad02290e7e030b9e03"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 5,
                  "charOffset": 2705,
                  "charLength": 24,
                  "snippet": {
                    "text": "GetTestsForAllIterations"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2699,
                  "charLength": 110,
                  "snippet": {
                    "text": "\n\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d2a3acba0f2858fe9c7e6c2887f5d89f0b2486b995fa357ed4fe817142d7d8d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "charOffset": 3343,
                  "charLength": 12,
                  "snippet": {
                    "text": "GetTestCases"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3337,
                  "charLength": 91,
                  "snippet": {
                    "text": "\n\ndef GetTestCases(tests):\n  \"\"\"Returns a list of test cases in the given full test names.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "824bb01dc99b281d35372819be1c5a474470626a3a470053d39b485aac4b065e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 5,
                  "charOffset": 3769,
                  "charLength": 18,
                  "snippet": {
                    "text": "CalculateTestLists"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 3763,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\ndef CalculateTestLists():\n  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75ba65ed48010129556b901061d65b4593b6d8e96891d796bf1a83236c04d602"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 7,
                  "charOffset": 5232,
                  "charLength": 5,
                  "snippet": {
                    "text": "setUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5195,
                  "charLength": 75,
                  "snippet": {
                    "text": "  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):\n    CalculateTestLists()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6cc85346a5eb32d48742902069abb8bf7a94bb38d9b9f57209681765c3fa7ffb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 7,
                  "charOffset": 5277,
                  "charLength": 33,
                  "snippet": {
                    "text": "testShufflePreservesNumberOfTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 5245,
                  "charLength": 202,
                  "snippet": {
                    "text": "    CalculateTestLists()\n\n  def testShufflePreservesNumberOfTests(self):\n    self.assertEqual(len(ALL_TESTS), len(SHUFFLED_ALL_TESTS))\n    self.assertEqual(len(ACTIVE_TESTS), len(SHUFFLED_ACTIVE_TESTS))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e9935db827207585c513150f68f6e33ffd228f4f2085022099a6c58ebdf57ff"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 7,
                  "charOffset": 5597,
                  "charLength": 27,
                  "snippet": {
                    "text": "testShuffleChangesTestOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5520,
                  "charLength": 205,
                  "snippet": {
                    "text": "    self.assertEqual(len(SHARDED_TESTS), len(SHUFFLED_SHARDED_TESTS))\n\n  def testShuffleChangesTestOrder(self):\n    self.assertTrue(SHUFFLED_ALL_TESTS != ALL_TESTS, SHUFFLED_ALL_TESTS)\n    self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef42c2f0eaeced1499149e1f8f5e1977b3df39ce7925b817f018640a6225b02c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 7,
                  "charOffset": 6009,
                  "charLength": 31,
                  "snippet": {
                    "text": "testShuffleChangesTestCaseOrder"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 5996,
                  "charLength": 141,
                  "snippet": {
                    "text": "    )\n\n  def testShuffleChangesTestCaseOrder(self):\n    self.assertTrue(\n        GetTestCases(SHUFFLED_ALL_TESTS) != GetTestCases(ALL_TESTS),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0192c9bf255831cedac8c7ca7f646043ecc435f24a055378d0a7a91e028aaa58"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 7,
                  "charOffset": 6643,
                  "charLength": 28,
                  "snippet": {
                    "text": "testShuffleDoesNotRepeatTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 6630,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n  def testShuffleDoesNotRepeatTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertEqual("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "542ee5244b06ae17dd7c58a7826f423c9f49ecaf7b8ec88a32b7cd28d55c5715"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 7,
                  "charOffset": 7398,
                  "charLength": 31,
                  "snippet": {
                    "text": "testShuffleDoesNotCreateNewTest"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 7383,
                  "charLength": 165,
                  "snippet": {
                    "text": "      )\n\n  def testShuffleDoesNotCreateNewTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e403dfb7977ae4c5b1de68b5109e5717bd3107b30db2f082f4f3628dd7551a72"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 7,
                  "charOffset": 7916,
                  "charLength": 27,
                  "snippet": {
                    "text": "testShuffleIncludesAllTests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 7829,
                  "charLength": 225,
                  "snippet": {
                    "text": "      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))\n\n  def testShuffleIncludesAllTests(self):\n    for test in ALL_TESTS:\n      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5b46a0a06ad4e4eb9813d4bfa196d3de3b3fa5c94811ab78e8d414352d6bcf62"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 7,
                  "charOffset": 8416,
                  "charLength": 34,
                  "snippet": {
                    "text": "testShuffleLeavesDeathTestsAtFront"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 8328,
                  "charLength": 201,
                  "snippet": {
                    "text": "      self.assertTrue(test in SHUFFLED_SHARDED_TESTS, '%s is missing' % (test,))\n\n  def testShuffleLeavesDeathTestsAtFront(self):\n    non_death_test_found = False\n    for test in SHUFFLED_ACTIVE_TESTS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d40fff4916c4a5ede0d07f1a11510a37fcca38681f548661f291ee69d918916"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 7,
                  "charOffset": 8748,
                  "charLength": 31,
                  "snippet": {
                    "text": "_VerifyTestCasesDoNotInterleave"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 8705,
                  "charLength": 131,
                  "snippet": {
                    "text": "        non_death_test_found = True\n\n  def _VerifyTestCasesDoNotInterleave(self, tests):\n    test_cases = []\n    for test in tests:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca6cca926b96f365538e6de868c2b08fcf00fcdab7e4ad80f966bbf2b1c0e9a0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 7,
                  "charOffset": 9144,
                  "charLength": 37,
                  "snippet": {
                    "text": "testShuffleDoesNotInterleaveTestCases"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 9127,
                  "charLength": 186,
                  "snippet": {
                    "text": "        )\n\n  def testShuffleDoesNotInterleaveTestCases(self):\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ALL_TESTS)\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ACTIVE_TESTS)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d810cc45462311eeb01fd4f0c1036f717c40d8b0429ddef36a7482c2d7de91e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 7,
                  "charOffset": 9452,
                  "charLength": 42,
                  "snippet": {
                    "text": "testShuffleRestoresOrderAfterEachIteration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 296,
                  "startColumn": 1,
                  "charOffset": 9380,
                  "charLength": 261,
                  "snippet": {
                    "text": "    self._VerifyTestCasesDoNotInterleave(SHUFFLED_SHARDED_TESTS)\n\n  def testShuffleRestoresOrderAfterEachIteration(self):\n    # Get the test lists in all 3 iterations, using random seed 1, 2,\n    # and 3 respectively.  Google Test picks a different seed in each"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7a5ecb28e1b79ad411f65178f98eab8f09641a787cd2585acda8062250c4a39"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 7,
                  "charOffset": 11144,
                  "charLength": 43,
                  "snippet": {
                    "text": "testShuffleGeneratesNewOrderInEachIteration"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 334,
                  "startColumn": 1,
                  "charOffset": 11077,
                  "charLength": 243,
                  "snippet": {
                    "text": "    self.assertEqual(tests_in_iteration3, tests_with_seed3)\n\n  def testShuffleGeneratesNewOrderInEachIteration(self):\n    # pylint: disable-next=unbalanced-tuple-unpacking\n    [tests_in_iteration1, tests_in_iteration2, tests_in_iteration3] = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92b8c1d273ec2e54d1f8776efadc2cdbd9284aac1db72d24fb2ad7ee52ac8408"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 7,
                  "charOffset": 11742,
                  "charLength": 41,
                  "snippet": {
                    "text": "testShuffleShardedTestsPreservesPartition"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 352,
                  "startColumn": 1,
                  "charOffset": 11729,
                  "charLength": 196,
                  "snippet": {
                    "text": "    )\n\n  def testShuffleShardedTestsPreservesPartition(self):\n    # If we run M tests on N shards, the same M tests should be run in\n    # total, regardless of the random seeds used by the shards."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26aefe029b77549f79b50175cb0f3bf5b06b99408204614454a74fb621ac0484"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_testbridge_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "charOffset": 1824,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1818,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a48cf4f772c71211baeb6c0b9bad9f39cd820af558d2e03c10d22e0be214cef3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_testbridge_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 7,
                  "charOffset": 1951,
                  "charLength": 27,
                  "snippet": {
                    "text": "testTestExecutionIsFiltered"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1890,
                  "charLength": 213,
                  "snippet": {
                    "text": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9817ba71f39e8e79ff8d6ab837143d31cffd69c23e7b1a46b77b97887e486505"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 1801,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1795,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd5f86bdf3999845e40ef673284cdacbe6867fe5a7b5e904e2a739e2dab43fae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "charOffset": 1871,
                  "charLength": 21,
                  "snippet": {
                    "text": "TestExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1865,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "76ce8a62b7cbf0b4b2aa71f8536c9cef2dc0ac0db4a6f9326d6c031a0f8dbd12"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "charOffset": 2279,
                  "charLength": 21,
                  "snippet": {
                    "text": "testExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2207,
                  "charLength": 136,
                  "snippet": {
                    "text": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9e3c41354941ae32adcd36e7bdf894040ff3ece6e9e8dc8144326e4a7e30d20"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 9,
                  "charOffset": 3301,
                  "charLength": 17,
                  "snippet": {
                    "text": "TestSehExceptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3247,
                  "charLength": 124,
                  "snippet": {
                    "text": "    \"\"\"Tests exception-catching behavior.\"\"\"\n\n    def TestSehExceptions(self, test_output):\n      self.assertIn(\n          ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce92649203afee9b5907a398eff38ed2a4f0d562e832366477f928d853f0fbd1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "charOffset": 4253,
                  "charLength": 48,
                  "snippet": {
                    "text": "testCatchesSehExceptionsWithCxxExceptionsEnabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 4236,
                  "charLength": 120,
                  "snippet": {
                    "text": "      )\n\n    def testCatchesSehExceptionsWithCxxExceptionsEnabled(self):\n      self.TestSehExceptions(EX_BINARY_OUTPUT)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df0ba535839d12eab084911e802531f9a55b472cd89c487a6f5a246af9054a14"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 9,
                  "charOffset": 4365,
                  "charLength": 49,
                  "snippet": {
                    "text": "testCatchesSehExceptionsWithCxxExceptionsDisabled"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4309,
                  "charLength": 157,
                  "snippet": {
                    "text": "      self.TestSehExceptions(EX_BINARY_OUTPUT)\n\n    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):\n      self.TestSehExceptions(BINARY_OUTPUT)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "711e0f4322d6ba23354de86ef32125e0f292bd3c0b7fd4d5ca5dd389f9a8a035"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 7,
                  "charOffset": 4783,
                  "charLength": 44,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInFixtureConstructor"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 4770,
                  "charLength": 127,
                  "snippet": {
                    "text": "  \"\"\"\n\n  def testCatchesCxxExceptionsInFixtureConstructor(self):\n    self.assertTrue(\n        'C++ exception with description '"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "007830e24ba4c1cdae9bdc2202cb5ca8beaadc6e45da115c4d14165e83007b96"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 9,
                  "charOffset": 5439,
                  "charLength": 43,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInFixtureDestructor"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 5425,
                  "charLength": 131,
                  "snippet": {
                    "text": "  ):\n\n    def testCatchesCxxExceptionsInFixtureDestructor(self):\n      self.assertTrue(\n          'C++ exception with description '"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a40d9af0c299118b283cb7b23800ab5053e50b5a72899a1bb2e617029683ebd9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 7,
                  "charOffset": 5906,
                  "charLength": 39,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInSetUpTestCase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5891,
                  "charLength": 148,
                  "snippet": {
                    "text": "      )\n\n  def testCatchesCxxExceptionsInSetUpTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4ac9b4e8f87f1baa927c9794a100cf0b905aea7f232d5e87be25bfcfc4c4fcf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 7,
                  "charOffset": 7093,
                  "charLength": 42,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInTearDownTestCase"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 7080,
                  "charLength": 149,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInTearDownTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d6dd4094b6bb8a3be7d96a932cb923cdfa8407fbf033bb2046a5032eb484e6a5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 7,
                  "charOffset": 7339,
                  "charLength": 31,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInSetUp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 7326,
                  "charLength": 138,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInSetUp(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3988395e62a08e831a0ad4a096427c81cb0f82e23490e7cec2d0dc6d55139cc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 7,
                  "charOffset": 8288,
                  "charLength": 34,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInTearDown"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 8275,
                  "charLength": 141,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInTearDown(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c356f2e4f38266056882c17150d7988a376ee321018fc33d0e2e4a9728c9d43"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 7,
                  "charOffset": 8827,
                  "charLength": 34,
                  "snippet": {
                    "text": "testCatchesCxxExceptionsInTestBody"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "charOffset": 8814,
                  "charLength": 141,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInTestBody(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "788399c7f7e570369debfe5bd3c622babac96f09d25a9170b6d51b6bead78c8e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 7,
                  "charOffset": 9520,
                  "charLength": 30,
                  "snippet": {
                    "text": "testCatchesNonStdCxxExceptions"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 9507,
                  "charLength": 148,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesNonStdCxxExceptions(self):\n    self.assertTrue(\n        'Unknown C++ exception thrown in the test body' in EX_BINARY_OUTPUT,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34068fc209221fb8c07d9cbe93ae5828b461bc55ed25fb0f2039cd35f002866b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 7,
                  "charOffset": 9695,
                  "charLength": 41,
                  "snippet": {
                    "text": "testUnhandledCxxExceptionsAbortTheProgram"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 295,
                  "startColumn": 1,
                  "charOffset": 9682,
                  "charLength": 184,
                  "snippet": {
                    "text": "    )\n\n  def testUnhandledCxxExceptionsAbortTheProgram(self):\n    # Filters out SEH exception tests on Windows. Unhandled SEH exceptions\n    # cause tests to show pop-up windows there."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd6fc5779f7a89bdbf33719c54d993ba6c9734f570de22e81715d774d3ba854b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Variable in function should be lowercase",
            "markdown": "Variable in function should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 5,
                  "charOffset": 9871,
                  "charLength": 25,
                  "snippet": {
                    "text": "FITLER_OUT_SEH_TESTS_FLAG"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 9744,
                  "charLength": 310,
                  "snippet": {
                    "text": "    # Filters out SEH exception tests on Windows. Unhandled SEH exceptions\n    # cause tests to show pop-up windows there.\n    FITLER_OUT_SEH_TESTS_FLAG = FILTER_FLAG + '=-*Seh*'\n    # By default, Google Test doesn't catch the exceptions.\n    uncaught_exceptions_ex_binary_output = gtest_test_utils.Subprocess("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae3281830b563a6d7c2bb13bba364e9a453e7a85beb89e9fa7586b35321cd4fb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 1801,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1795,
                  "charLength": 69,
                  "snippet": {
                    "text": "\n\ndef Assert(condition):\n  if not condition:\n    raise AssertionError"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d17a63e11dcda5fd530a0d69f96a834d8d1ca1fdb1d25f7e42829d949550e37"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "charOffset": 1871,
                  "charLength": 21,
                  "snippet": {
                    "text": "TestExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1865,
                  "charLength": 108,
                  "snippet": {
                    "text": "\n\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c365f5d7620010050f6d269f6933e614557417581c74f8dca1e1fecb2421b006"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 7,
                  "charOffset": 2233,
                  "charLength": 21,
                  "snippet": {
                    "text": "testExitCodeAndOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2161,
                  "charLength": 136,
                  "snippet": {
                    "text": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20ab2f2a4fc71a615cc3bc1a880f464c77baad71dc5872217f31ceb1424a3b76"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 9,
                  "charOffset": 15918,
                  "charLength": 21,
                  "snippet": {
                    "text": "testNonEmptyXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 15882,
                  "charLength": 143,
                  "snippet": {
                    "text": "  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyXmlOutput(self):\n      \"\"\"Generates non-empty XML and verifies it matches the expected output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1568ffae38c9ae74df910e91f65d65f153a90e746acb9a2d32676241bc0b191"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 7,
                  "charOffset": 16230,
                  "charLength": 19,
                  "snippet": {
                    "text": "testNoTestXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 1,
                  "charOffset": 16150,
                  "charLength": 181,
                  "snippet": {
                    "text": "      self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)\n\n  def testNoTestXmlOutput(self):\n    \"\"\"Verifies XML output for a Google Test binary without actual tests.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "785eeb150465dc2dc6b4dc506387e42a425ef74d231455a41d165d66fbd57365"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 7,
                  "charOffset": 16551,
                  "charLength": 18,
                  "snippet": {
                    "text": "testTimestampValue"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 16469,
                  "charLength": 182,
                  "snippet": {
                    "text": "    self._TestXmlOutput('gtest_no_test_unittest', EXPECTED_NO_TEST_XML, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the XML output is valid.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91c39a5caf0d5fd1d6d66840d2b239d48dd1def1cabad82e0f6b9d536f7ab005"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "charOffset": 17726,
                  "charLength": 21,
                  "snippet": {
                    "text": "testDefaultOutputFile"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 17699,
                  "charLength": 135,
                  "snippet": {
                    "text": "    actual.unlink()\n\n  def testDefaultOutputFile(self):\n    \"\"\"Tests XML file with default name is created when name is not specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d86d847be7b210023865a4d8e4ca8b582ae200e3dfe7e1261bf227b5c9fc3b3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 7,
                  "charOffset": 18585,
                  "charLength": 23,
                  "snippet": {
                    "text": "testSuppressedXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 325,
                  "startColumn": 1,
                  "charOffset": 18529,
                  "charLength": 162,
                  "snippet": {
                    "text": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedXmlOutput(self):\n    \"\"\"Verifies XML output is suppressed if default listener is shut down.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "03551c7b15e0af63f611c13eed1fb25385f3cfe22cd7132c6bd12459d68da929"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 7,
                  "charOffset": 19691,
                  "charLength": 25,
                  "snippet": {
                    "text": "testFilteredTestXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 361,
                  "startColumn": 1,
                  "charOffset": 19637,
                  "charLength": 140,
                  "snippet": {
                    "text": "    self.assertFalse(os.path.isfile(xml_path))\n\n  def testFilteredTestXmlOutput(self):\n    \"\"\"Verifies XML output when a filter is applied.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b64038ada7fed81b29250dc03449dc68ea6b8af7b0e06b583a1881d0e10f581f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 7,
                  "charOffset": 20093,
                  "charLength": 24,
                  "snippet": {
                    "text": "testShardedTestXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 375,
                  "startColumn": 1,
                  "charOffset": 20080,
                  "charLength": 104,
                  "snippet": {
                    "text": "    )\n\n  def testShardedTestXmlOutput(self):\n    \"\"\"Verifies XML output when run using multiple shards.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1d0b1cc68af3e46b79a4c7078b52cb53938b8174505b86bcb88bf9f5d7e4a2a6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 7,
                  "charOffset": 20513,
                  "charLength": 13,
                  "snippet": {
                    "text": "_GetXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 389,
                  "startColumn": 1,
                  "charOffset": 20500,
                  "charLength": 103,
                  "snippet": {
                    "text": "    )\n\n  def _GetXmlOutput(\n      self, gtest_prog_name, extra_args, extra_env, expected_exit_code\n  ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b26955d3147dce636cd3fcd194e35d0977241479f1cc577c553992739ce2f7ab"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 7,
                  "charOffset": 21931,
                  "charLength": 14,
                  "snippet": {
                    "text": "_TestXmlOutput"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 432,
                  "startColumn": 1,
                  "charOffset": 21906,
                  "charLength": 75,
                  "snippet": {
                    "text": "    return actual\n\n  def _TestXmlOutput(\n      self,\n      gtest_prog_name,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a05c89f7fbe5d7b741bb56d2123ee16caf025900935411621d1e4fb3fdad10b3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "charOffset": 3141,
                  "charLength": 3,
                  "snippet": {
                    "text": "Run"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 3135,
                  "charLength": 100,
                  "snippet": {
                    "text": "\n\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6cd0bb9975675b43f33fce327001522e3665923a89f2f976aa9a9780e771cff1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 7,
                  "charOffset": 3660,
                  "charLength": 12,
                  "snippet": {
                    "text": "RunAndVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3647,
                  "charLength": 155,
                  "snippet": {
                    "text": "  \"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):\n    \"\"\"Runs googletest-break-on-failure-unittest_ and verifies its behavior.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80794fad7bb976e61ccb866bd9cd0098db46f389231d409411134d08ed057b1d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 7,
                  "charOffset": 5141,
                  "charLength": 19,
                  "snippet": {
                    "text": "testDefaultBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 5074,
                  "charLength": 144,
                  "snippet": {
                    "text": "    self.assertTrue(has_seg_fault == expect_seg_fault, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3677185259c710d0bd7bc15335b80da855ef638221ac96e0f627ca4228aa1f4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 7,
                  "charOffset": 5305,
                  "charLength": 10,
                  "snippet": {
                    "text": "testEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5219,
                  "charLength": 175,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value=None, expect_seg_fault=0)\n\n  def testEnvVar(self):\n    \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "305910fca8d1eaebd92c57ba07b5c0bd5e5c2d457c616914c6f877aa23fc14ec"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "charOffset": 5558,
                  "charLength": 8,
                  "snippet": {
                    "text": "testFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 5473,
                  "charLength": 158,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value='1', flag_value=None, expect_seg_fault=1)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_break_on_failure flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3e76d8a2d55ea209f014ccadd6b069f628ae2ae819ec1e2694a8b7749fa9266"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "charOffset": 5795,
                  "charLength": 23,
                  "snippet": {
                    "text": "testFlagOverridesEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5710,
                  "charLength": 182,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the flag overrides the environment variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e68800aae1ab5d3f3ee70d85780b4eefb9094e7b0d9569ac2d46511feecbf63"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 7,
                  "charOffset": 6208,
                  "charLength": 41,
                  "snippet": {
                    "text": "testBreakOnFailureOverridesThrowOnFailure"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 6124,
                  "charLength": 211,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n\n  def testBreakOnFailureOverridesThrowOnFailure(self):\n    \"\"\"Tests that gtest_break_on_failure overrides gtest_throw_on_failure.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "697c0cc46b2181c2432ed682b7399a7bbe9060ab32bd818621eac5220200469b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 9,
                  "charOffset": 6558,
                  "charLength": 35,
                  "snippet": {
                    "text": "testCatchExceptionsDoesNotInterfere"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6532,
                  "charLength": 134,
                  "snippet": {
                    "text": "  if IS_WINDOWS:\n\n    def testCatchExceptionsDoesNotInterfere(self):\n      \"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cdc1bad0ac2e2f3eda5baa10003077326bb195e6f19a451820b376eac041c823"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "charOffset": 2191,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2185,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a04d50b3f7f1d8a7833232cd150a70b0e06c08c5fc1bc4ac76e3439344af5b1d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 5,
                  "charOffset": 2779,
                  "charLength": 24,
                  "snippet": {
                    "text": "_ParseAndStripGTestFlags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2773,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9368515a51bc3466a0dded88aed82b4f88d3669e8e0faca86e445c9e41e371ed"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 5,
                  "charOffset": 3584,
                  "charLength": 7,
                  "snippet": {
                    "text": "GetFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3578,
                  "charLength": 66,
                  "snippet": {
                    "text": "\n\ndef GetFlag(flag):\n  \"\"\"Returns the value of the given flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "799a8c03a979af0125aca98035d3ae424d4cb02af5c124b524c8c16033192265"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 5,
                  "charOffset": 3861,
                  "charLength": 12,
                  "snippet": {
                    "text": "GetSourceDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3855,
                  "charLength": 98,
                  "snippet": {
                    "text": "\n\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "99e0f563ae3ec0db2f2e22c14f3c39805ac4f75e61a7fa6e4803d690bff80c7a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 5,
                  "charOffset": 4008,
                  "charLength": 11,
                  "snippet": {
                    "text": "GetBuildDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 4002,
                  "charLength": 101,
                  "snippet": {
                    "text": "\n\ndef GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc6c5ca4d2e6c1f20fdf295ec2aa9c243004b49ed45c868e07e2c22bcc7107eb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 5,
                  "charOffset": 4175,
                  "charLength": 14,
                  "snippet": {
                    "text": "_RemoveTempDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4153,
                  "charLength": 104,
                  "snippet": {
                    "text": "_temp_dir = None\n\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af17677933ba2659b63948d3b540c0a228e27594e5e58356c51684e8f67227e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 5,
                  "charOffset": 4297,
                  "charLength": 10,
                  "snippet": {
                    "text": "GetTempDir"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4291,
                  "charLength": 58,
                  "snippet": {
                    "text": "\n\ndef GetTempDir():\n  global _temp_dir\n  if not _temp_dir:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c526b742212823ec411970e58909c2eb638d939df39eddec4c05194cd7c2f60"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 5,
                  "charOffset": 4410,
                  "charLength": 21,
                  "snippet": {
                    "text": "GetTestExecutablePath"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4404,
                  "charLength": 128,
                  "snippet": {
                    "text": "\n\ndef GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac9856fce7d6aad61696c1d5230a60343f6a1d6a612c186c0083fe9f6b3dc990"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 5,
                  "charOffset": 5383,
                  "charLength": 13,
                  "snippet": {
                    "text": "GetExitStatus"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5377,
                  "charLength": 100,
                  "snippet": {
                    "text": "\n\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb9e13eb34da55f4d497100ac7f75dc26ecd2d072798714e0b95fd80fc20ed82"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 5,
                  "charOffset": 7703,
                  "charLength": 4,
                  "snippet": {
                    "text": "Main"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 7697,
                  "charLength": 42,
                  "snippet": {
                    "text": "\n\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bea683bbf34e1a5f2ad9bc8988253a7581a276458bb1e75d30fa1d83c5ef58b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 5,
                  "charOffset": 2171,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2165,
                  "charLength": 68,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "836ca282e6ab4eca09df7af166bd079158cbdf1c56dff9a59ff9df12956085b0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "charOffset": 2549,
                  "charLength": 3,
                  "snippet": {
                    "text": "Run"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2543,
                  "charLength": 92,
                  "snippet": {
                    "text": "\n\ndef Run(command):\n  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6989c948678a332eaf15945ad668b52b11281c0a46452cbfd4306c5a26baece3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 7,
                  "charOffset": 2883,
                  "charLength": 12,
                  "snippet": {
                    "text": "RunAndVerify"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2835,
                  "charLength": 181,
                  "snippet": {
                    "text": "  \"\"\"Tests the throw-on-failure mode.\"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies its behavior.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a95f9298c131c54e9b3f04e05f49f136204de41511182736d2ce16db7b211593"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 7,
                  "charOffset": 4337,
                  "charLength": 19,
                  "snippet": {
                    "text": "testDefaultBehavior"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4282,
                  "charLength": 132,
                  "snippet": {
                    "text": "    self.assertTrue(failed == should_fail, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d47581e726f0f619e2a702a8965373825e5f7f1615b09efb5ed9db0debcab9e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 7,
                  "charOffset": 4500,
                  "charLength": 24,
                  "snippet": {
                    "text": "testThrowOnFailureEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4415,
                  "charLength": 188,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value=None, should_fail=False)\n\n  def testThrowOnFailureEnvVar(self):\n    \"\"\"Tests using the GTEST_THROW_ON_FAILURE environment variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e9bd4fe43beba57c33015c0f7ad0d8b461d49ec7f974beb2d61edde304b68db"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 7,
                  "charOffset": 4764,
                  "charLength": 22,
                  "snippet": {
                    "text": "testThrowOnFailureFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 4681,
                  "charLength": 170,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value='1', flag_value=None, should_fail=True)\n\n  def testThrowOnFailureFlag(self):\n    \"\"\"Tests using the --gtest_throw_on_failure flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31c380db87872795f3a88e69745eda2c98741d6678abe41294ebcb81f6cff627"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 7,
                  "charOffset": 5012,
                  "charLength": 37,
                  "snippet": {
                    "text": "testThrowOnFailureFlagOverridesEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4929,
                  "charLength": 208,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value='1', should_fail=True)\n\n  def testThrowOnFailureFlagOverridesEnvVar(self):\n    \"\"\"Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "697373224356e92983733461de5aaf6cd334f88f754f2863d1d1cb51876be49f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "charOffset": 1854,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1848,
                  "charLength": 107,
                  "snippet": {
                    "text": "\n\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e977d482f4cb320bcca007d541ce8d377c07af6869aeb3d0e2d532a768c84c31"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "charOffset": 2076,
                  "charLength": 9,
                  "snippet": {
                    "text": "UsesColor"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2070,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc5aa6d43782878c3f5ac5c91ff12d17447b335c8f34f59ac5a96d8cb63af148"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 7,
                  "charOffset": 2497,
                  "charLength": 18,
                  "snippet": {
                    "text": "testNoEnvVarNoFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2441,
                  "charLength": 159,
                  "snippet": {
                    "text": "class GTestColorTest(gtest_test_utils.TestCase):\n\n  def testNoEnvVarNoFlag(self):\n    \"\"\"Tests the case when there's neither GTEST_COLOR nor --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bff097269b4fab3c78bb86cf96479f1c8be19d8f1edb425f1ed23c7d84705a02"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 7,
                  "charOffset": 3258,
                  "charLength": 12,
                  "snippet": {
                    "text": "testFlagOnly"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 3190,
                  "charLength": 161,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm-256color', None, None))\n\n  def testFlagOnly(self):\n    \"\"\"Tests the case when there's --gtest_color but not GTEST_COLOR.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f4e25e8a1852c4df51224753bb7751b38855c51c92c298a84c6e860aebd60d6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 7,
                  "charOffset": 3718,
                  "charLength": 14,
                  "snippet": {
                    "text": "testEnvVarOnly"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3658,
                  "charLength": 155,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm', None, 'yes'))\n\n  def testEnvVarOnly(self):\n    \"\"\"Tests the case when there's GTEST_COLOR but not --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "916b4c021b7a10cd3eac6cb2dbae96df658df4e99e3a252349c5ced85cd2bb21"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 7,
                  "charOffset": 4191,
                  "charLength": 17,
                  "snippet": {
                    "text": "testEnvVarAndFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 4125,
                  "charLength": 167,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm-color', 'yes', None))\n\n  def testEnvVarAndFlag(self):\n    \"\"\"Tests the case when there are both GTEST_COLOR and --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab53a7b1918109fb2d5559d179dd5dfe02130330e0022b0d045b9533348cfe70"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 7,
                  "charOffset": 4474,
                  "charLength": 21,
                  "snippet": {
                    "text": "testAliasesOfYesAndNo"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 4407,
                  "charLength": 155,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm-color', 'no', 'auto'))\n\n  def testAliasesOfYesAndNo(self):\n    \"\"\"Tests using aliases in specifying --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1793b65be9c91b4b7abcf4f854a90d51795bb32df0973411cae22ea8b6e7b629"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-setuptestsuite-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 7,
                  "charOffset": 1834,
                  "charLength": 30,
                  "snippet": {
                    "text": "testSetupErrorAndTearDownError"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1769,
                  "charLength": 201,
                  "snippet": {
                    "text": "class GTestSetUpTestSuiteTest(gtest_test_utils.TestCase):\n\n  def testSetupErrorAndTearDownError(self):\n    p = gtest_test_utils.Subprocess(COMMAND)\n    self.assertNotEqual(p.exit_code, 0, msg=p.output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1513f7ff6bd5f41475bdaace44c03616d18606ffdaaf488741cbb4a9c9b38c45"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 7,
                  "charOffset": 1845,
                  "charLength": 21,
                  "snippet": {
                    "text": "AssertEquivalentNodes"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1766,
                  "charLength": 200,
                  "snippet": {
                    "text": "  \"\"\"Base class for tests of Google Test's XML output functionality.\"\"\"\n\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8cbdd00bb3d729a0c8e73b52d3f954c969dbe9dad7aa38a1309128eb6f77c3d2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 7,
                  "charOffset": 5212,
                  "charLength": 12,
                  "snippet": {
                    "text": "_GetChildren"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 5201,
                  "charLength": 112,
                  "snippet": {
                    "text": "  }\n\n  def _GetChildren(self, element):\n    \"\"\"Fetches all of the child nodes of element, a DOM Element object.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43968be76d58aaa5aba16fe3a04e35a1e9abf016f884c9d75512f8975dc665c3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8NamingInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Function name should be lowercase",
            "markdown": "Function name should be lowercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "charOffset": 7444,
                  "charLength": 12,
                  "snippet": {
                    "text": "NormalizeXml"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 7417,
                  "charLength": 111,
                  "snippet": {
                    "text": "    return children\n\n  def NormalizeXml(self, element):\n    \"\"\"Normalizes XML that may change from run to run.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "caf0926451210f730e7b37cf3541fba336382ad6990065286549bf64ae46a974"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 10,
                  "charOffset": 4568,
                  "charLength": 61,
                  "snippet": {
                    "text": "(RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4483,
                  "charLength": 148,
                  "snippet": {
                    "text": "  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3817af631d57777f058dc88a0e6fcc6e5003675d89fed12fd2208d95f68b1f1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyRedundantParenthesesInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Remove redundant parentheses",
            "markdown": "Remove redundant parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 10,
                  "charOffset": 7178,
                  "charLength": 24,
                  "snippet": {
                    "text": "(tests_run, p.exit_code)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 214,
                  "startColumn": 1,
                  "charOffset": 7090,
                  "charLength": 114,
                  "snippet": {
                    "text": "        test = match.group(1)\n        tests_run.append(test_case + '.' + test)\n  return (tests_run, p.exit_code)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3f3ed4ef6ad0a574ce1176edb7bb32cc0c321f6e10c85025507a357b0ba2532"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2326,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2260,
                  "charLength": 86,
                  "snippet": {
                    "text": "EXPECTED_OUTPUT_NO_FILTER_RE = re.compile(\n    r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbf6ad8f508e24cf3bca2563812ed94daaea44d4521ab73ffaed540eb6d3e8d0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2340,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2326,
                  "charLength": 43,
                  "snippet": {
                    "text": "  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bdf89204ad649365f6bf7e57340226f405b240c5d3da806ae0c85e51d124bd91"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2347,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2334,
                  "charLength": 41,
                  "snippet": {
                    "text": "Foo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f0756c17ee908f4b4b1293061209796f8c09f31953f848cc271ae8f235ea855"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2354,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2340,
                  "charLength": 41,
                  "snippet": {
                    "text": "  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\.\n  Xyz"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5001b43d043ac2758fb433f8da553ce7b2aa1e0e176237db62bfbb621fcb21ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2376,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2354,
                  "charLength": 42,
                  "snippet": {
                    "text": "  DISABLED_Bar3\nAbc\\.\n  Xyz\n  Def\nFooBar\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "674921fbc5644b32e4f752c25f8716a4e8aaa69cad1ca0bd78ac0daa02e5f3f6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 2382,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2370,
                  "charLength": 32,
                  "snippet": {
                    "text": "Abc\\.\n  Xyz\n  Def\nFooBar\\.\n  Baz"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff548be86000d12509087c1cc9de38fc355cbf314a75b44147068ce4754f313d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2397,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 2382,
                  "charLength": 38,
                  "snippet": {
                    "text": "  Def\nFooBar\\.\n  Baz\nFooTest\\.\n  Test1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5663c5f4f3e182f03cfa1b79a26f4d28fde1b27363f1ddb2cb2e58555741821b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 2413,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2397,
                  "charLength": 48,
                  "snippet": {
                    "text": "  Baz\nFooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2687da71ed8e0827697c4eb57d8950c0006420e5623c41a23561bd8014b7421f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2421,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2403,
                  "charLength": 109,
                  "snippet": {
                    "text": "FooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e42955f12a873175ecc746a15266ad694953e0dd92d460f44ab014019fb06e5c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2438,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 2413,
                  "charLength": 107,
                  "snippet": {
                    "text": "  Test1\n  DISABLED_Test2\n  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89c1499e142981cdde249e5954e5033e7e27b293e509ba217f6f1c4e91ba3735"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 14,
                  "charOffset": 2459,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2421,
                  "charLength": 107,
                  "snippet": {
                    "text": "  DISABLED_Test2\n  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b2503eb863fb220b66621ef5e91faad3d85b212c7481ff2e3da0a79f83c753b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 2513,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2438,
                  "charLength": 139,
                  "snippet": {
                    "text": "  Test3\nTypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c51558652630644215dd421d202ce56d208734534216f67116dc329bd8e75d65"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2521,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 2446,
                  "charLength": 139,
                  "snippet": {
                    "text": "TypedTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "217f245793a7e79d33b457f33a63ac5f94ad4ced59934dd7501b1fd9dc0e787f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 14,
                  "charOffset": 2542,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 2513,
                  "charLength": 80,
                  "snippet": {
                    "text": "  TestA\n  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18acf79c890d1bced3996305266566cc2b6e91812040a42ba89de84ad8d4eced"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2578,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2521,
                  "charLength": 123,
                  "snippet": {
                    "text": "  TestB\nTypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2f45d18926b3af7aa77013e50b1bc6805ff391acdb57aae64a080b103f7faff"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2586,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2529,
                  "charLength": 123,
                  "snippet": {
                    "text": "TypedTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afd426925d2119987cfa7fc30af5d0c0184ae5ae7ad25a9ad4f392802fb21eee"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 14,
                  "charOffset": 2607,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2578,
                  "charLength": 82,
                  "snippet": {
                    "text": "  TestA\n  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c21388b6cce30d4ee43660386433fd9eaf03a6dd0e9965582b1659c3477c826"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2645,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2586,
                  "charLength": 148,
                  "snippet": {
                    "text": "  TestB\nTypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8e4f0938cf75a06e4d4e3dd8417914eba0f0721354771bc8a4821d05c78e470"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2653,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2594,
                  "charLength": 148,
                  "snippet": {
                    "text": "TypedTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17733de1d596d5977f59a6ad2679f62d9d50ceb46dfe5985ffb86c9d4d24d848"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 21,
                  "charOffset": 2681,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2645,
                  "charLength": 105,
                  "snippet": {
                    "text": "  TestA\n  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57b6bba18b2080e55d56cb2de8bee9a7b43d7eca00499babac491c9f63a2cc11"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2735,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2653,
                  "charLength": 153,
                  "snippet": {
                    "text": "  TestB\nMy/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52002ed3487abf0edc5ddfd55da1603430462a7f30b838f4722ef40799839406"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2743,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2661,
                  "charLength": 153,
                  "snippet": {
                    "text": "My/TypeParamTest/0\\.  # TypeParam = (VeryLo{245}|class VeryLo{239})\\.\\.\\.\n  TestA\n  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea175e70e4d4be94a06fea6f3a7a3983cb8a667455cfdc12032ab2852ca8f87b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 21,
                  "charOffset": 2771,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2735,
                  "charLength": 87,
                  "snippet": {
                    "text": "  TestA\n  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8406133c6a0af5042f12e4fa6fca94def32297dc016dd80086ea50134ffb622"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2807,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2743,
                  "charLength": 137,
                  "snippet": {
                    "text": "  TestB\nMy/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "81b3f1ea02705f71ece3f9087dbddbed3b45d458ee70367b1e402b3f4e147d1d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2815,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2751,
                  "charLength": 137,
                  "snippet": {
                    "text": "My/TypeParamTest/1\\.  # TypeParam = int\\s*\\*( __ptr64)?\n  TestA\n  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "121aee9222cf5695e30f75c8571ebbe2c535ee0503c666709ed6a6f2ec6b244d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 21,
                  "charOffset": 2843,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2807,
                  "charLength": 89,
                  "snippet": {
                    "text": "  TestA\n  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "caca585562e9048218f0602f96ef368ae1bc9650e9bd034d7a56870c8c2b5ebf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2881,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2815,
                  "charLength": 114,
                  "snippet": {
                    "text": "  TestB\nMy/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMyInstantiation/ValueParamTest\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "696715e74bf59df7310cc7e4ded8eb3a9c68b10931f2efd35c5ab5d0e30975c4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2889,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2823,
                  "charLength": 143,
                  "snippet": {
                    "text": "My/TypeParamTest/2\\.  # TypeParam = .*MyArray<bool,\\s*42>\n  TestA\n  TestB\nMyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a463f1c2c4ebc24f56ba5395e735c8d581eb968782a6022e744ec5a0032c0748"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2930,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2889,
                  "charLength": 168,
                  "snippet": {
                    "text": "  TestB\nMyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a970fcba9898f42e2d7beecd2e06ca936e1de23ed906d90569e1cea1d8432c43"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 10,
                  "charOffset": 2939,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 2889,
                  "charLength": 168,
                  "snippet": {
                    "text": "  TestB\nMyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2abe5586af595654d8a9b99bde0eafd6c51c396b4ac92f16b7a49f289ddd8afc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2967,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2897,
                  "charLength": 197,
                  "snippet": {
                    "text": "MyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1057c38df0a98212bcd9a847c9921b7b3241d936c2eb186cb61b54298ff17d8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 10,
                  "charOffset": 2976,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2897,
                  "charLength": 197,
                  "snippet": {
                    "text": "MyInstantiation/ValueParamTest\\.\n  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c32ca77ddd11c8bd9e03dbbcc02ca25c5037d5879bc0a93996c77b4ea1530848"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3007,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2930,
                  "charLength": 204,
                  "snippet": {
                    "text": "  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "771e4fac5284654b38c34a677dfb3485da1fb63c2f54b98d56edbcf7444ac2f1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 10,
                  "charOffset": 3016,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2930,
                  "charLength": 204,
                  "snippet": {
                    "text": "  TestA/0  # GetParam\\(\\) = one line\n  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71836da4d7b920783d9d41562f4a26a3e1d4510b25fe2257dd3d492dd0fb0bbb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3058,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2967,
                  "charLength": 218,
                  "snippet": {
                    "text": "  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2cae3a98aab1f5448a8d1a5e594801d2d78d58ed2f24c221003b0c542003c3f5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 10,
                  "charOffset": 3067,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2967,
                  "charLength": 218,
                  "snippet": {
                    "text": "  TestA/1  # GetParam\\(\\) = two\\\\nlines\n  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fc2d336a1e326ef2a0faa4adb8ee46c26f52e67c234810cc65949f74c4cc7437"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3095,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3007,
                  "charLength": 182,
                  "snippet": {
                    "text": "  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "185611ab38f98b9eb08b41725107acc66126403345c154a7c9c1c410c3736632"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 10,
                  "charOffset": 3104,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3007,
                  "charLength": 182,
                  "snippet": {
                    "text": "  TestA/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "086d6fbe6c114c97a47e2c854a26357365a3b2fdfb19e8a63472401872eaab84"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 1,
                  "charOffset": 3135,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3058,
                  "charLength": 133,
                  "snippet": {
                    "text": "  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\"\n)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5c436e9c9a272a3a1ae042bb8efa6f29c09fae52634f18c1e3a71a9e07ebb42"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 10,
                  "charOffset": 3144,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3058,
                  "charLength": 133,
                  "snippet": {
                    "text": "  TestB/0  # GetParam\\(\\) = one line\n  TestB/1  # GetParam\\(\\) = two\\\\nlines\n  TestB/2  # GetParam\\(\\) = a very\\\\nlo{241}\\.\\.\\.\n\"\"\"\n)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "390d679fab56a33b38b0af8379aacfa31db024daec2fe8132be9a9d9ceb6c222"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3378,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3311,
                  "charLength": 87,
                  "snippet": {
                    "text": "EXPECTED_OUTPUT_FILTER_FOO_RE = re.compile(\n    r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f317a95e7c65a3717dcaf92c4425d27c25d25f317a039fdc933bbceb4b1a7ff"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3392,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3378,
                  "charLength": 43,
                  "snippet": {
                    "text": "  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2f84d341f3bf166a9251eb436d73382c5afa0089fec0628bc2b59dd8e6e1b0c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3399,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3386,
                  "charLength": 44,
                  "snippet": {
                    "text": "Foo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nFooBar\\."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2757b4fc591a9b8e7b3c54b367ab1d68bd32376ea413e411102d7eb413c6a27"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3406,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3392,
                  "charLength": 44,
                  "snippet": {
                    "text": "  Bar1\n  Bar2\n  DISABLED_Bar3\nFooBar\\.\n  Baz"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc265fecfbe01220f33998957ccb5c225f11c55bb9998a644177431a9603d5e3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3431,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3406,
                  "charLength": 48,
                  "snippet": {
                    "text": "  DISABLED_Bar3\nFooBar\\.\n  Baz\nFooTest\\.\n  Test1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27e3fde64f9f1914d6e260fb86fe60def4df141ae71ac41aeeca9ae08b6752c0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3447,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3431,
                  "charLength": 48,
                  "snippet": {
                    "text": "  Baz\nFooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "172f422897eb7c51e9702f7fc99ad86801d656390a204ff02e7d4654ee8b8e67"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3455,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 3437,
                  "charLength": 46,
                  "snippet": {
                    "text": "FooTest\\.\n  Test1\n  DISABLED_Test2\n  Test3\n\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8344415e29adec352dd0befecc2e439a1e7ae93b23f02e1acf20053b5b17c99"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3472,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3447,
                  "charLength": 38,
                  "snippet": {
                    "text": "  Test1\n  DISABLED_Test2\n  Test3\n\"\"\"\n)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d50c4d1aeb0a5a9705941a232f860838abb48e33c001d2c110bdf18cb118a08"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "6 consecutive spaces in RegExp",
            "markdown": "6 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 17,
                  "charOffset": 6588,
                  "charLength": 6,
                  "snippet": {
                    "text": "      "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6547,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e66b18eb6d5942171a95dfec7147fe4daf59584441d991cb0e85b63cbf2ee28"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 41,
                  "charOffset": 6612,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6547,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c254e53a89ff18b79814e69004f36211ae5b8dbaffdee6a736fb9b683498f769"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "2 consecutive spaces in RegExp",
            "markdown": "2 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 49,
                  "charOffset": 6620,
                  "charLength": 2,
                  "snippet": {
                    "text": "  "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6547,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90603b97a8f11f4df24d94ce0e872b384cdefeda9dafbfe5905fe9031ff24a52"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "RegExpRepeatedSpace",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "7 consecutive spaces in RegExp",
            "markdown": "7 consecutive spaces in RegExp"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 52,
                  "charOffset": 6623,
                  "charLength": 7,
                  "snippet": {
                    "text": "       "
                  },
                  "sourceLanguage": "RegExp"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6547,
                  "charLength": 137,
                  "snippet": {
                    "text": "\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),\n      '',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "718d95722fab9d91712aeed8becb6b22b2d762cb0ff0728f165351d837c32329"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "RegExp"
            ]
          }
        },
        {
          "ruleId": "PyProtectedMemberInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Access to a protected member _exit of a module",
            "markdown": "Access to a protected member _exit of a module"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 5,
                  "charOffset": 6286,
                  "charLength": 8,
                  "snippet": {
                    "text": "os._exit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6180,
                  "charLength": 153,
                  "snippet": {
                    "text": "    # Suppress the error \"googletest was imported but a call to its main()\n    # was never detected.\"\n    os._exit(0)\n  else:\n    gmock_test_utils.Main()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f2c672f97f92b4ab55a80c95d3ef401e783ad175f593f9ef522aaa6363ab440"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "charOffset": 2347,
                  "charLength": 69,
                  "snippet": {
                    "text": "\"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2319,
                  "charLength": 151,
                  "snippet": {
                    "text": "\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95ef6b7be1336c7625ba106565dbf464f61abaef6c36f745bfe60acc01599359"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2420,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2345,
                  "charLength": 127,
                  "snippet": {
                    "text": "  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2be4d8f77e6156154afc3677386c4429bf735142c96ba90d7d45eb4fe41ada3b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "charOffset": 2516,
                  "charLength": 76,
                  "snippet": {
                    "text": "\"\"\"Removes Google Test result report's header and footer from the output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2472,
                  "charLength": 172,
                  "snippet": {
                    "text": "\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n\n  output = re.sub(r'.*gtest_main.*\\n', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18a8d5ca33b23e6c9a9f4bf4a2bf4f45656612ce75895edf7a02a3b043c4c3d8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "charOffset": 2596,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2514,
                  "charLength": 243,
                  "snippet": {
                    "text": "  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a6e1c7f44e1feba7343c88a8b2c1098d1737beef6b5c81190506dc6de1be8a21"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 3,
                  "charOffset": 2647,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2593,
                  "charLength": 224,
                  "snippet": {
                    "text": "\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87bc3d4e979f3a22cd8d15d8ab3cfee717f201081af2726019766b731a3bb1c3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "charOffset": 2699,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2594,
                  "charLength": 275,
                  "snippet": {
                    "text": "  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "037fc4788a9ef8099c8d33168a529738edd1e820c596497b50531329a307ae9c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 3,
                  "charOffset": 2760,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 2645,
                  "charLength": 240,
                  "snippet": {
                    "text": "  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "316e257dda6443d2dd92c56816504def0efdba93f105173d6ba18833f1f5037c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "charOffset": 2820,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2697,
                  "charLength": 189,
                  "snippet": {
                    "text": "  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "073c51f08476ba86140262b0c5ea0513958a3a3a5fb20281710c8824856c9316"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 3,
                  "charOffset": 2872,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2758,
                  "charLength": 129,
                  "snippet": {
                    "text": "  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c3e02523c1a40235a167c41eeabde847f44c45551eb2504df3f425e3daf0969b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 3,
                  "charOffset": 2919,
                  "charLength": 70,
                  "snippet": {
                    "text": "\"\"\"Removes all file location info from a Google Test program's output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2887,
                  "charLength": 111,
                  "snippet": {
                    "text": "\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a186b679e86eb4f8362d0d39cc2cf886466f7fc0d8b77e47f13f2390c4188b87"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 3,
                  "charOffset": 3253,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3244,
                  "charLength": 76,
                  "snippet": {
                    "text": "  \"\"\"\n\n  return re.sub(r'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:', 'FILE:#:', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "329994af819809e0f448e9781edc9c8a04112b9edeeb7983ed06c9c67f388309"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 3,
                  "charOffset": 3357,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 3320,
                  "charLength": 166,
                  "snippet": {
                    "text": "\ndef NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n\n  return re.sub(r' error: ', ' Failure\\n', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f72c97bd7045bd6cd76852575e03ab60f7db66e4727eeeab2aea0f7faad54182"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 3,
                  "charOffset": 3438,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3355,
                  "charLength": 133,
                  "snippet": {
                    "text": "  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n\n  return re.sub(r' error: ', ' Failure\\n', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f844f881593d6912a760194f9354c5c30a674aa22d41d6dd7051562e71cbec72"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 3,
                  "charOffset": 3526,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"\"\"Removes memory addresses from the test output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3488,
                  "charLength": 132,
                  "snippet": {
                    "text": "\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n\n  return re.sub(r'@\\w+', '@0x#', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52b2e47820e181f041dec0899f842458dbb4425046a817f4d151c4927f6cb11f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 3,
                  "charOffset": 3582,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 3524,
                  "charLength": 98,
                  "snippet": {
                    "text": "  \"\"\"Removes memory addresses from the test output.\"\"\"\n\n  return re.sub(r'@\\w+', '@0x#', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "39fb73c9af18c2ae0e45e999de64f84040b1343faf96c505e53d46b964352faf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 3,
                  "charOffset": 3667,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"\"\"Removes the test names of leaked mock objects from the test output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3622,
                  "charLength": 172,
                  "snippet": {
                    "text": "\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n\n  return re.sub(r'\\(used in test .+\\) ', '', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0aabd6f7efa586b759cb6c1c6524572a293df247ae32fe1f2a6d4484cccf7668"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 3,
                  "charOffset": 3744,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3665,
                  "charLength": 131,
                  "snippet": {
                    "text": "  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n\n  return re.sub(r'\\(used in test .+\\) ', '', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "463780e891021efd0b8898dae04ed673ffb857904af6af7b5f31c76e22d5ef8c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "charOffset": 3826,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\"\"Returns a list of test names that leak mock objects.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3796,
                  "charLength": 157,
                  "snippet": {
                    "text": "\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n\n  # findall() returns a list of all matches of the regex in output."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2685b0928e541c617870a4b4a090df89ed5dd99b76f5910f450e131e7cdf5dd2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 3,
                  "charOffset": 3888,
                  "charLength": 65,
                  "snippet": {
                    "text": "# findall() returns a list of all matches of the regex in output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 3824,
                  "charLength": 233,
                  "snippet": {
                    "text": "  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbd954c621296936a396ddae5d2a13b18684b0d64b099e399f2ba05c3e427764"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 3,
                  "charOffset": 3956,
                  "charLength": 64,
                  "snippet": {
                    "text": "# For example, if '(used in test FooTest.Bar)' is in output, the"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3885,
                  "charLength": 226,
                  "snippet": {
                    "text": "\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4208a707515ddf832b57fbab3f10ec4a451a2c5f477b05698b05b5fe9eff481"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 3,
                  "charOffset": 4023,
                  "charLength": 34,
                  "snippet": {
                    "text": "# list will contain 'FooTest.Bar'."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3886,
                  "charLength": 226,
                  "snippet": {
                    "text": "  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2361909eb85cf46ec286366a26f5d0df9da225daa7f6bed3932ca036d369f57d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 3,
                  "charOffset": 4060,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3954,
                  "charLength": 159,
                  "snippet": {
                    "text": "  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbff56500528ae98c3583be4fa41fcd6f78113961c9a08048db9303e1469de1f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 3,
                  "charOffset": 4162,
                  "charLength": 47,
                  "snippet": {
                    "text": "\"\"\"Normalizes the output of gmock_output_test_."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 4113,
                  "charLength": 105,
                  "snippet": {
                    "text": "\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b5d0fa9bb22c877e172a00c09a92edc825f87c9f7ba5ab4385267152c507463a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 3,
                  "charOffset": 4362,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 4353,
                  "charLength": 129,
                  "snippet": {
                    "text": "  \"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "616acf935658d64affc60ca1c01b428a75df26266821a7534ed0f7c8105ebee6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 3,
                  "charOffset": 4398,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4359,
                  "charLength": 158,
                  "snippet": {
                    "text": "\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9118a2d9d07a67f97efdcacf70654c9f96ae69c393a3994517d2fd5e7a40a9d2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "charOffset": 4445,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4360,
                  "charLength": 198,
                  "snippet": {
                    "text": "  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eff19bf5a6cf008083419a90f75cba20bed7c8f60f08d65a6863a8351677bbb7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "charOffset": 4485,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4396,
                  "charLength": 233,
                  "snippet": {
                    "text": "  output = RemoveReportHeaderAndFooter(output)\n  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "993b004f5d76a11f8bb57d22a051f9cc002976a686600614f2882e2bb620a082"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 3,
                  "charOffset": 4520,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4443,
                  "charLength": 187,
                  "snippet": {
                    "text": "  output = NormalizeErrorMarker(output)\n  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "191fb3bf10287a92d2d740c5168a319422418be7666f0bdb42d9c853ce6cb9cb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "charOffset": 4561,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4483,
                  "charLength": 148,
                  "snippet": {
                    "text": "  output = RemoveLocations(output)\n  output = RemoveMemoryAddresses(output)\n  return (RemoveTestNamesOfLeakedMocks(output), GetLeakyTests(output))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "807432a60086e75a0767f0ea454231619bc0b2043401e8598ddd51aa64041552"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 3,
                  "charOffset": 4666,
                  "charLength": 74,
                  "snippet": {
                    "text": "\"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4631,
                  "charLength": 181,
                  "snippet": {
                    "text": "\ndef GetShellCommandOutput(cmd):\n  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n\n  return gmock_test_utils.Subprocess(cmd, capture_stderr=False).output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0440d5083ed98ff1b1695069a9d74b27de4f85a8165d23add1ef4db62a7be1fd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 3,
                  "charOffset": 4744,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 4664,
                  "charLength": 150,
                  "snippet": {
                    "text": "  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n\n  return gmock_test_utils.Subprocess(cmd, capture_stderr=False).output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d358b2b26781df47d037c3b51c26e9b150ec8c73aa62c2b8fedcebd7f748cb5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 3,
                  "charOffset": 4867,
                  "charLength": 78,
                  "snippet": {
                    "text": "\"\"\"Runs a command and returns its normalized output and a list of leaky tests."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4814,
                  "charLength": 140,
                  "snippet": {
                    "text": "\ndef GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a6bdb9c8ad2040a8b838540da03eec49d4175f89c042f3f2e9efe32ff507172"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 3,
                  "charOffset": 4993,
                  "charLength": 40,
                  "snippet": {
                    "text": "# Disables exception pop-ups on Windows."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 4984,
                  "charLength": 164,
                  "snippet": {
                    "text": "  \"\"\"\n\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a3e312f5523aa0de5f5787527a7e921e0f75ec6db4f4646749ec1568d2cf6f0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 3,
                  "charOffset": 5036,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4990,
                  "charLength": 159,
                  "snippet": {
                    "text": "\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a86e3bda194423811f297866651edf466c53a66b11aa4165cef3f512175727f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 3,
                  "charOffset": 5081,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 4991,
                  "charLength": 159,
                  "snippet": {
                    "text": "  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "92ee179ae0349d795ba85e32e4284fc3d5d94d551eb42f22aef23926c0102ea9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 3,
                  "charOffset": 5204,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 5151,
                  "charLength": 193,
                  "snippet": {
                    "text": "class GMockOutputTest(gmock_test_utils.TestCase):\n\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b08c46e1332724d900d6b8af3406b50f5613835d83f482938f7ce0f021031370"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 3,
                  "charOffset": 5980,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 5950,
                  "charLength": 175,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  if sys.argv[1:] == [GENGOLDEN_FLAG]:\n    (output, _) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'wb')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "428c6c91bdb552e02aa597bc6affe2d83a086c6675f11e648b06a04a24a83c1c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 3,
                  "charOffset": 6300,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 6255,
                  "charLength": 79,
                  "snippet": {
                    "text": "    # was never detected.\"\n    os._exit(0)\n  else:\n    gmock_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60aa9bee8b7ce3a11016ca036fecea117a0ec27c1b03b2025af638c87cf2323b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 3,
                  "charOffset": 2406,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 2355,
                  "charLength": 128,
                  "snippet": {
                    "text": "class GMockLeakTest(gmock_test_utils.TestCase):\n\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94101050ddee0a5b16e879160a404ace3048c5951e6195542706a9594db8c4f7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "charOffset": 2710,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2701,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n\n  def testDoesNotCatchLeakedMockWhenDisabled(self):\n    self.assertEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc0251ce9158ad7e9173fcc7212edbf83cb477aa30badd6da5b3d53746a4f502"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "charOffset": 3130,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 3121,
                  "charLength": 88,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesLeakedMockWhenEnabled(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43c0135d97cc7f4139ee33b6f989f38c999eee08d128551dc9cccda82146376d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 3,
                  "charOffset": 3533,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3524,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesLeakedMockWhenEnabledWithExplictFlagValue(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "521f122a98613190e65db1e5c2ef91e0a8e90a011f0e46c9a1910ba1d9acd8a8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "charOffset": 3795,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3786,
                  "charLength": 86,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesMultipleLeakedMocks(self):\n    self.assertNotEqual(\n        0,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0242dcaae0152ad7c20befa916cc6e7dcfcc556c5298b01971cae8dbdad99be"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 3,
                  "charOffset": 4046,
                  "charLength": 16,
                  "snippet": {
                    "text": "gmock_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 4016,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gmock_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4dbd0d2db14aaada9d85c997721c8a362bffedfcd970d489d07f01eab01ea2aa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 3,
                  "charOffset": 1694,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"\"\"Returns the absolute path of the directory where the .py files are.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1671,
                  "charLength": 138,
                  "snippet": {
                    "text": "\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return gtest_test_utils.GetSourceDir()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1453fa5bc533e9e00c27961e14c73b650a1088fe97d3c65988faf0a9cb14d80b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "charOffset": 1771,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1692,
                  "charLength": 119,
                  "snippet": {
                    "text": "  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return gtest_test_utils.GetSourceDir()\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f09b26b51c6ef21103215a7312f883e10c54a9f8973f5793f0c809ec0188382"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "charOffset": 1858,
                  "charLength": 63,
                  "snippet": {
                    "text": "\"\"\"Returns the absolute path of the test binary given its name."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1811,
                  "charLength": 191,
                  "snippet": {
                    "text": "\ndef GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n\n  The function will print a message and abort the program if the resulting file"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a575e6ac43cb3b2bab76779e399c32a365f8904fe609e9b357119699a303d7e5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "charOffset": 2164,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2155,
                  "charLength": 73,
                  "snippet": {
                    "text": "  \"\"\"\n\n  return gtest_test_utils.GetTestExecutablePath(executable_name)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8abef3a695e8f2d5cdce26445b25c8edacf4a731f54e4477c678e251393a6f0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2261,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"\"\"Returns the argument to exit(), or -1 if exit() wasn't called."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2228,
                  "charLength": 107,
                  "snippet": {
                    "text": "\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f7c7bc485d8785ef58c77b9fde0f0560d98fd8cc654ccd8c8f5aa117cc004502"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "charOffset": 2400,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2391,
                  "charLength": 139,
                  "snippet": {
                    "text": "  \"\"\"\n\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a59e8f79031c4a1a1d2357dadec97ac9680dfeff72a1bbd4aa3384cade848e56"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "charOffset": 2554,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2492,
                  "charLength": 177,
                  "snippet": {
                    "text": "    # the argument to exit() directly.\n    return exit_code\n  else:\n    # On Unix, os.WEXITSTATUS() must be used to extract the exit status\n    # from the result of os.system()."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1c3aedc20bc0466c68978acefed670c741630d1f77c72d28f82da46f254739df"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 7,
                  "charOffset": 2708,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2632,
                  "charLength": 134,
                  "snippet": {
                    "text": "    # from the result of os.system().\n    if os.WIFEXITED(exit_code):\n      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e536aa7daf6655691d5655ad979f5de4def5d798cf9e6d0c084a1ac9e29ff488"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "charOffset": 2757,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2702,
                  "charLength": 66,
                  "snippet": {
                    "text": "      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a535b3da920de11bdf4ee6f4449af4b412f38f94b3de40199f5d6f9a8486797"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 3,
                  "charOffset": 3055,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"\"\"Runs the unit test.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3040,
                  "charLength": 67,
                  "snippet": {
                    "text": "\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n\n  gtest_test_utils.Main()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f2124321e78302d4a75e63cf6aed19d5521af28da65e48af422ac6128dfd7cc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 3,
                  "charOffset": 3084,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3053,
                  "charLength": 55,
                  "snippet": {
                    "text": "  \"\"\"Runs the unit test.\"\"\"\n\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30f70ac810ef879de8c3bcb9eab4e7a7b440f885d3eac7d637afc9074774675c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "charOffset": 3799,
                  "charLength": 60,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's JSON output functionality.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3740,
                  "charLength": 139,
                  "snippet": {
                    "text": "\nclass GTestJsonOutFilesTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  def setUp(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ed5843ef99c69a1a04f929fed9074009664541408df93b70720891cd43f650d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 3,
                  "charOffset": 3863,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3797,
                  "charLength": 241,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6336aa506f2d5d8c50a279141f25937c2b401a18fe3c9a216562235fae97ef99"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 3,
                  "charOffset": 4199,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4167,
                  "charLength": 81,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e344860053a45d64d0cb229b327f6683e0a417765788c786714c7558e28ed45"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "charOffset": 4251,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4219,
                  "charLength": 148,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df22dbcb8da02a8fe389d560a6539244ff2bc6b3b139f2901a5857b0f72413cd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 7,
                  "charOffset": 4295,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4249,
                  "charLength": 150,
                  "snippet": {
                    "text": "  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))\n    except os.error:\n      pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c8228be190db153e14a3359b1595698256a594f5dd5b5e0a0c4edc04b0145817"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "charOffset": 4395,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4289,
                  "charLength": 198,
                  "snippet": {
                    "text": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + '.json'))\n    except os.error:\n      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + '.json'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aeac61fdd8ba87a97eafd40de046aa2d60c04be191e5aa47f18d8d3717625377"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 7,
                  "charOffset": 4415,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 135,
                  "startColumn": 1,
                  "charOffset": 4389,
                  "charLength": 130,
                  "snippet": {
                    "text": "      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + '.json'))\n    except os.error:\n      pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e67b3bcaa56eb7b4e739528fd6ee3a0ce5e4d0cded5206cd5bceb657f1508085"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 7,
                  "charOffset": 4515,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4409,
                  "charLength": 152,
                  "snippet": {
                    "text": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + '.json'))\n    except os.error:\n      pass\n    try:\n      os.rmdir(self.output_dir_)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8cdd3c59431665ad04fb1d606b985b079b6facb9b22601fabed56e8b4aed812b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 7,
                  "charOffset": 4535,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4509,
                  "charLength": 84,
                  "snippet": {
                    "text": "      pass\n    try:\n      os.rmdir(self.output_dir_)\n    except os.error:\n      pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "632464a0d6b50d475aabc06d7303da3590bcc048e765dd2064ba7ef907caa327"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 7,
                  "charOffset": 4589,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4529,
                  "charLength": 91,
                  "snippet": {
                    "text": "      os.rmdir(self.output_dir_)\n    except os.error:\n      pass\n\n  def testOutfile1(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e7d9d7ea69dfe94362f37898c955dad1cf1eb7b683a747933a47880b3cf179d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 3,
                  "charOffset": 4597,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4583,
                  "charLength": 93,
                  "snippet": {
                    "text": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e57a0af36b8e61e9a3791d5e8e988eba2cc3f70de1bf9b135aaa644d34f7c45a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "charOffset": 4679,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 4621,
                  "charLength": 137,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e857aff6626be1e7f49ce3bf8d77eeee832e382aede242b74389439f16818d7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 3,
                  "charOffset": 4761,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4703,
                  "charLength": 251,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_2)\n\n  def _TestOutFile(self, test_name, expected):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, '--gtest_output=json:%s' % self.output_dir_]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e8278cac9adb46e425711f9f02d062edb8eb9431fef67f7f444cdc23da46bdc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 7,
                  "charOffset": 5520,
                  "charLength": 4,
                  "snippet": {
                    "text": "with"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 168,
                  "startColumn": 1,
                  "charOffset": 5476,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n    if os.path.isfile(output_file1):\n      with open(output_file1) as f:\n        actual = json.load(f)\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f0778cdaa5831cbcda1bb1ca9b7c06aea58d049a5f4ca34fe930b3a1ddfbf40"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 7,
                  "charOffset": 5596,
                  "charLength": 4,
                  "snippet": {
                    "text": "with"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5550,
                  "charLength": 177,
                  "snippet": {
                    "text": "        actual = json.load(f)\n    else:\n      with open(output_file2) as f:\n        actual = json.load(f)\n    self.assertEqual(expected, gtest_json_test_utils.normalize(actual))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f00cb228247d12eddb21820f48f917c25732e379983b9cc760eff69ccbcb8f6c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 3,
                  "charOffset": 5759,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5729,
                  "charLength": 100,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '0'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31d2fdd27fb7455ebff755241cbef7849d07e058b63634632de0b75512ae1460"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 3,
                  "charOffset": 5805,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5730,
                  "charLength": 99,
                  "snippet": {
                    "text": "if __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '0'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1969766edf8a9c614eb50fab2eb174e39e79aed78ce69891fa654d724c33d516"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 3,
                  "charOffset": 3344,
                  "charLength": 45,
                  "snippet": {
                    "text": "\"\"\"Runs gtest_help_test_ with the given flag."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 3318,
                  "charLength": 83,
                  "snippet": {
                    "text": "\ndef RunWithFlag(flag):\n  \"\"\"Runs gtest_help_test_ with the given flag.\n\n  Returns:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b4e6c1d96895e9677769dc0026a4d8d5c6e3ae01c3d0232fd4d71e1f03fa93b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 3,
                  "charOffset": 3539,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3530,
                  "charLength": 62,
                  "snippet": {
                    "text": "  \"\"\"\n\n  if flag is None:\n    command = [PROGRAM_PATH]\n  else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6527ddf66ad6dbb21e725f90b4828de67731bfba917fc6a5dc580e47e627c53c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "charOffset": 3587,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3537,
                  "charLength": 137,
                  "snippet": {
                    "text": "  if flag is None:\n    command = [PROGRAM_PATH]\n  else:\n    command = [PROGRAM_PATH, flag]\n  child = gtest_test_utils.Subprocess(command)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a018e0432c4f4852b57eca06fc3706e550bbede52947e922fb7226c6d13e1091"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 3,
                  "charOffset": 3630,
                  "charLength": 5,
                  "snippet": {
                    "text": "child"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 3585,
                  "charLength": 129,
                  "snippet": {
                    "text": "  else:\n    command = [PROGRAM_PATH, flag]\n  child = gtest_test_utils.Subprocess(command)\n  return child.exit_code, child.output\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f39f4dd47c86acfcc941d0d71e34c25f5355e2617a52e276510fe9167a75532"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 3,
                  "charOffset": 3677,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3593,
                  "charLength": 122,
                  "snippet": {
                    "text": "    command = [PROGRAM_PATH, flag]\n  child = gtest_test_utils.Subprocess(command)\n  return child.exit_code, child.output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "384929efee56e7813170db3aad53dc34706af1138e8cda10084820bc5dff8c14"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "charOffset": 3766,
                  "charLength": 53,
                  "snippet": {
                    "text": "\"\"\"Tests the --help flag and its equivalent forms.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3715,
                  "charLength": 137,
                  "snippet": {
                    "text": "\nclass GTestHelpTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n\n  def TestHelpFlag(self, flag):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f4c79be6208f909e067f4b9db8cf7dc10bc856824004206fbac2e65c74fc5370"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 3,
                  "charOffset": 3823,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3764,
                  "charLength": 151,
                  "snippet": {
                    "text": "  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n\n  def TestHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when help flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e49928d33f902ab7bfd652ccad0691ed1ad9a6b214d3969594827225d6eb56c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 7,
                  "charOffset": 4161,
                  "charLength": 64,
                  "snippet": {
                    "text": "# The Abseil flags library prints the ProgramUsageMessage() with"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4090,
                  "charLength": 202,
                  "snippet": {
                    "text": "    exit_code, output = RunWithFlag(flag)\n    if HAS_ABSL_FLAGS:\n      # The Abseil flags library prints the ProgramUsageMessage() with\n      # --help and returns 1.\n      self.assertEqual(1, exit_code)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0786ad888f7df2d5585242ead724f078d5eeb1ec03b749c10025921709aa313e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 7,
                  "charOffset": 4232,
                  "charLength": 23,
                  "snippet": {
                    "text": "# --help and returns 1."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4132,
                  "charLength": 170,
                  "snippet": {
                    "text": "    if HAS_ABSL_FLAGS:\n      # The Abseil flags library prints the ProgramUsageMessage() with\n      # --help and returns 1.\n      self.assertEqual(1, exit_code)\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90cef5801176546bdca4543566b23f0666e468a5dab7777989a4b62353a4db54"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 7,
                  "charOffset": 4262,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4155,
                  "charLength": 184,
                  "snippet": {
                    "text": "      # The Abseil flags library prints the ProgramUsageMessage() with\n      # --help and returns 1.\n      self.assertEqual(1, exit_code)\n    else:\n      self.assertEqual(0, exit_code)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b99c1d993e188dc7b839e3ca9d5d4c304faa5c76bb8fb6f7db4caa014cfad553"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "charOffset": 4309,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4256,
                  "charLength": 139,
                  "snippet": {
                    "text": "      self.assertEqual(1, exit_code)\n    else:\n      self.assertEqual(0, exit_code)\n\n    self.assertTrue(HELP_REGEX.search(output), output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd1d0f367813526e8c6cadbf6dcda8b19e742c7fd619d707c6460dab5fc985ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 7,
                  "charOffset": 4479,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 4396,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n    if IS_DARWIN or IS_LINUX or IS_GNUHURD or IS_GNUKFREEBSD or IS_OPENBSD:\n      self.assertIn(STREAM_RESULT_TO_FLAG, output)\n    else:\n      self.assertNotIn(STREAM_RESULT_TO_FLAG, output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "07c8d22cf735904ce737c990a1d18eb213e1c37fb1d2bff9c3b69842b044740f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 7,
                  "charOffset": 4540,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 4473,
                  "charLength": 163,
                  "snippet": {
                    "text": "      self.assertIn(STREAM_RESULT_TO_FLAG, output)\n    else:\n      self.assertNotIn(STREAM_RESULT_TO_FLAG, output)\n\n    if SUPPORTS_DEATH_TESTS and not IS_WINDOWS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "084232e0a0145f08b465090fd79b7801c738d376bb09e33ee9af30e9c2d8f082"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 7,
                  "charOffset": 4643,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4588,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n    if SUPPORTS_DEATH_TESTS and not IS_WINDOWS:\n      self.assertIn(DEATH_TEST_STYLE_FLAG, output)\n    else:\n      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11da80f399375cb431504ffac54c135f21cbde5fe62b7d4e3e408dc435081958"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 7,
                  "charOffset": 4704,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 4637,
                  "charLength": 160,
                  "snippet": {
                    "text": "      self.assertIn(DEATH_TEST_STYLE_FLAG, output)\n    else:\n      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)\n\n  def TestUnknownFlagWithAbseil(self, flag):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19609d164e0f24de460380eb63b02af33fd1f7199693fc466325127713d261aa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 3,
                  "charOffset": 4755,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 4698,
                  "charLength": 168,
                  "snippet": {
                    "text": "      self.assertNotIn(DEATH_TEST_STYLE_FLAG, output)\n\n  def TestUnknownFlagWithAbseil(self, flag):\n    \"\"\"Verifies correct behavior when an unknown flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e88ce23fe724c452ba3ad80175c449a43e23b79a1c6850bc83013c9488cbef8c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 3,
                  "charOffset": 5182,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 5117,
                  "charLength": 163,
                  "snippet": {
                    "text": "    self.assertIn('ERROR: Unknown command line flag', output)\n\n  def TestNonHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "efec92af1f25be3cfa3541c6d28537c6a11f1ab6e49bd06a12a125fce87e8baa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 3,
                  "charOffset": 5600,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5541,
                  "charLength": 129,
                  "snippet": {
                    "text": "    self.assertFalse(HELP_REGEX.search(output), output)\n\n  def testPrintsHelpWithFullFlag(self):\n    self.TestHelpFlag('--help')\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b800cfa1e9e5b8e7af028e01fddc0d454d67362290d8d6b0876799bda23d2bcd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 3,
                  "charOffset": 5673,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 177,
                  "startColumn": 1,
                  "charOffset": 5638,
                  "charLength": 140,
                  "snippet": {
                    "text": "    self.TestHelpFlag('--help')\n\n  def testRunsTestsWithoutHelpFlag(self):\n    \"\"\"Verifies correct behavior when no help flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a2b440ef7462f729b2e549140bdaa0eaf35b791798c2ccd7a1439c8ba5a1ce6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 3,
                  "charOffset": 5931,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 5897,
                  "charLength": 154,
                  "snippet": {
                    "text": "    self.TestNonHelpFlag(None)\n\n  def testRunsTestsWithGtestInternalFlag(self):\n    \"\"\"Verifies correct behavior when internal testing flag is specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30885125deea3e90f953eac45b3addb3ff2a12551a57519d2867ba7da45faf28"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 3,
                  "charOffset": 6289,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6259,
                  "charLength": 130,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  if '--has_absl_flags' in sys.argv:\n    sys.argv.remove('--has_absl_flags')\n  gtest_test_utils.Main()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26931724ecd0b6ae4369119719f5550917c9f0d780e014a8d4327d33ba3328f2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 3,
                  "charOffset": 6366,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6287,
                  "charLength": 103,
                  "snippet": {
                    "text": "  if '--has_absl_flags' in sys.argv:\n    sys.argv.remove('--has_absl_flags')\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d21e8c74a51f2b3f5df66aa79efbc2df5c624daf8badbe8f02538b440d709746"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 3,
                  "charOffset": 2192,
                  "charLength": 20,
                  "snippet": {
                    "text": "STACK_TRACE_TEMPLATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 2163,
                  "charLength": 107,
                  "snippet": {
                    "text": "\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "341538ae66aac5632216fb32b5b4af0c5afb88188d23640fce18ce271017449e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "charOffset": 2243,
                  "charLength": 20,
                  "snippet": {
                    "text": "STACK_TRACE_TEMPLATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2190,
                  "charLength": 104,
                  "snippet": {
                    "text": "  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'\n\nEXPECTED_NON_EMPTY = {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ece8e43a7da28c4bc891985c5a1f56635d45581ed54dd23ba1978861d400a3d7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 3,
                  "charOffset": 20647,
                  "charLength": 60,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's JSON output functionality.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 621,
                  "startColumn": 1,
                  "charOffset": 20586,
                  "charLength": 196,
                  "snippet": {
                    "text": "\nclass GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c603938a32c9f77a36ee6d79661f0c5b1435332efaf55ee9c6d56d9021620490"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 625,
                  "startColumn": 3,
                  "charOffset": 20711,
                  "charLength": 71,
                  "snippet": {
                    "text": "# This test currently breaks on platforms that do not support typed and"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 623,
                  "startColumn": 1,
                  "charOffset": 20645,
                  "charLength": 225,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "038c360e07660a39c8a1f5ffef616a0cacca4a7a8918dc84fd54739cfd84c0d6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 3,
                  "charOffset": 20785,
                  "charLength": 58,
                  "snippet": {
                    "text": "# type-parameterized tests, so we don't run it under them."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 624,
                  "startColumn": 1,
                  "charOffset": 20708,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eaaccf79fb6a2d58977ab94d8073bf148f68551abdc875b6af75aa2cc69fd78"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 3,
                  "charOffset": 20846,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 625,
                  "startColumn": 1,
                  "charOffset": 20709,
                  "charLength": 200,
                  "snippet": {
                    "text": "  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyJsonOutput(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b6c1ef2da11aff3e06e03dd1dc652e079b71a85391db1e792ee1498da995b2d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 630,
                  "startColumn": 7,
                  "charOffset": 20916,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Verifies JSON output for a Google Test binary with non-empty output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 628,
                  "startColumn": 1,
                  "charOffset": 20871,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.\n\n      Runs a test program that generates a non-empty JSON output, and"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49af1058fbb86c601b7d5a63f5d90a9fb1cc86b07623e56c7918672c7a8428b3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 7,
                  "charOffset": 21121,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 633,
                  "startColumn": 1,
                  "charOffset": 21059,
                  "charLength": 160,
                  "snippet": {
                    "text": "      tests that the JSON output is expected.\n      \"\"\"\n      self._TestJsonOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY, 1)\n\n  def testNoTestJsonOutput(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "56b680320dc00847605aeac38b035c16ee1875bc7fe15f204037793500f0980c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 3,
                  "charOffset": 21188,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 635,
                  "startColumn": 1,
                  "charOffset": 21115,
                  "charLength": 180,
                  "snippet": {
                    "text": "      self._TestJsonOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY, 1)\n\n  def testNoTestJsonOutput(self):\n    \"\"\"Verifies JSON output for a Google Test binary without actual tests.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2d5fff18703035a685ff5b1f4012b25b74effbf36d777ed914f77009bf08aea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 3,
                  "charOffset": 21510,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 644,
                  "startColumn": 1,
                  "charOffset": 21435,
                  "charLength": 180,
                  "snippet": {
                    "text": "    self._TestJsonOutput('gtest_no_test_unittest', EXPECTED_NO_TEST, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the JSON output is valid.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "28995d14d5c8d14566ab6b239c1ffe206268ce0f6d30eecae2040465bc27dd14"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 3,
                  "charOffset": 22694,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 675,
                  "startColumn": 1,
                  "charOffset": 22685,
                  "charLength": 88,
                  "snippet": {
                    "text": "    )\n\n  def testDefaultOutputFile(self):\n    \"\"\"Verifies the default output file name.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "941f80f3599fd8f4c6aaea214fe93c9151e580fa7bdd5e3cd6588445d1819e55"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 7,
                  "charOffset": 23131,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 688,
                  "startColumn": 1,
                  "charOffset": 23110,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n    try:\n      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "06f5fad1cb9a4a042b74046de1c0cf9ac791107a01bd2b5443071adf73ade837"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 7,
                  "charOffset": 23180,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 690,
                  "startColumn": 1,
                  "charOffset": 23125,
                  "charLength": 124,
                  "snippet": {
                    "text": "      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "41cc82cb1efc99035d87713eae8991df5987f8116c0faae04b841f07004d840f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 7,
                  "charOffset": 23208,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 691,
                  "startColumn": 1,
                  "charOffset": 23154,
                  "charLength": 96,
                  "snippet": {
                    "text": "    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbe660f23e4fbfb51f35f82c5eda30c583d274eb1e2012387750f2a20d52be22"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 704,
                  "startColumn": 3,
                  "charOffset": 23522,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 702,
                  "startColumn": 1,
                  "charOffset": 23470,
                  "charLength": 138,
                  "snippet": {
                    "text": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedJsonOutput(self):\n    \"\"\"Verifies that no JSON output is generated.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "75e1a8c8483a87a6eac08afd97f9eb14692561da53d1dcadc5235175c9b9c694"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 7,
                  "charOffset": 23885,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 713,
                  "startColumn": 1,
                  "charOffset": 23839,
                  "charLength": 83,
                  "snippet": {
                    "text": "    )\n    if os.path.isfile(json_path):\n      os.remove(json_path)\n\n    command = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "242b50e84d8be4b30c4d93ad555fb0dc5acdf6bced28efd24164014d692090bb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 7,
                  "charOffset": 24121,
                  "charLength": 63,
                  "snippet": {
                    "text": "# p.signal is available only if p.terminated_by_signal is True."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 722,
                  "startColumn": 1,
                  "charOffset": 24039,
                  "charLength": 203,
                  "snippet": {
                    "text": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68ce5e6ed3ba60fe346ba352b68d3ca69c5d903e7b1117fd96305df0574ac2af"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 7,
                  "charOffset": 24191,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 723,
                  "startColumn": 1,
                  "charOffset": 24084,
                  "charLength": 231,
                  "snippet": {
                    "text": "    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "16fecb397468cead8e3d13ddb92750ed75beb9bf14d6c0642b9bce4031e50154"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 7,
                  "charOffset": 24340,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 728,
                  "startColumn": 1,
                  "charOffset": 24316,
                  "charLength": 86,
                  "snippet": {
                    "text": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cb38faaaf9b1f47f33385dc18b151342a95be7945f3bbdd896c08baa7992cca5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 731,
                  "startColumn": 7,
                  "charOffset": 24372,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 729,
                  "startColumn": 1,
                  "charOffset": 24324,
                  "charLength": 101,
                  "snippet": {
                    "text": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4d41edb40bfe6d0dce19276bc005a0370da324cd421ee9f5282d1f550b91ded"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 3,
                  "charOffset": 24616,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 738,
                  "startColumn": 1,
                  "charOffset": 24562,
                  "charLength": 146,
                  "snippet": {
                    "text": "    self.assertTrue(not os.path.isfile(json_path))\n\n  def testFilteredTestJsonOutput(self):\n    \"\"\"Verifies JSON output when a filter is applied.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df5839b5616d8ea46ac463426952105e90f94724fb0dd445591eeb639c7ac15d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 3,
                  "charOffset": 25013,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 752,
                  "startColumn": 1,
                  "charOffset": 25004,
                  "charLength": 165,
                  "snippet": {
                    "text": "    )\n\n  def _GetJsonOutput(self, gtest_prog_name, extra_args, expected_exit_code):\n    \"\"\"Returns the JSON output generated by running the program gtest_prog_name.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83d4f1b28ab9aee2870215a4f424c1587ad99d2c97eed50cc754749775a72d46"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 775,
                  "startColumn": 7,
                  "charOffset": 25789,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 773,
                  "startColumn": 1,
                  "charOffset": 25707,
                  "charLength": 182,
                  "snippet": {
                    "text": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      self.assertTrue(\n          False, '%s was killed by signal %d' % (gtest_prog_name, p.signal)\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2e7944a223122779de4beffdfdbbabef16196d565ddf7152c713f2471827f477"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 779,
                  "startColumn": 7,
                  "charOffset": 25906,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 777,
                  "startColumn": 1,
                  "charOffset": 25882,
                  "charLength": 103,
                  "snippet": {
                    "text": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4ec0c36de35251e5cbc539f875de7ee4200c4102017de2878dd53ce0c8dba56"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 780,
                  "startColumn": 7,
                  "charOffset": 25938,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 778,
                  "startColumn": 1,
                  "charOffset": 25890,
                  "charLength": 118,
                  "snippet": {
                    "text": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,\n          p.exit_code,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "628d8f8b9c2c8b09c7b9dcaf1785292b3afe978ee55c5d3fa22f7324dae0b609"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 7,
                  "charOffset": 26208,
                  "charLength": 6,
                  "snippet": {
                    "text": "actual"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 786,
                  "startColumn": 1,
                  "charOffset": 26163,
                  "charLength": 85,
                  "snippet": {
                    "text": "      )\n    with open(json_path) as f:\n      actual = json.load(f)\n    return actual\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52ddf72eac9405586fa52a603dfa656a2e807a0fa4521401f6cddd24688bf3c7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 3,
                  "charOffset": 26251,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 789,
                  "startColumn": 1,
                  "charOffset": 26230,
                  "charLength": 121,
                  "snippet": {
                    "text": "    return actual\n\n  def _TestJsonOutput(\n      self, gtest_prog_name, expected, expected_exit_code, extra_args=None\n  ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4ea00e938d07b62c309c809e092774fbd2095e9c70ad6fd9782a9856967748d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 3,
                  "charOffset": 27057,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 813,
                  "startColumn": 1,
                  "charOffset": 27027,
                  "charLength": 169,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  if NO_STACKTRACE_SUPPORT_FLAG in sys.argv:\n    # unittest.main() can't handle unknown flags\n    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7e4b40c5837564ab6dbb452946aaa98d10c7b77e00d4baedde80d9d4fe9a0419"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 819,
                  "startColumn": 3,
                  "charOffset": 27200,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 817,
                  "startColumn": 1,
                  "charOffset": 27149,
                  "charLength": 121,
                  "snippet": {
                    "text": "    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c4902241aee9a19198ab77635db477281f7bebfa9040b5fe5dc4424b5e6fe1a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 3,
                  "charOffset": 27246,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 818,
                  "startColumn": 1,
                  "charOffset": 27197,
                  "charLength": 73,
                  "snippet": {
                    "text": "\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1ea3ef247f01447d6ef9d1f2d2c4e00c6175f95388039f0f40939d1d94fc852"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (164 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (164 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 121,
                  "charOffset": 2271,
                  "charLength": 44,
                  "snippet": {
                    "text": "e=\"*\" timestamp=\"*\" classname=\"PropertyOne\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1937,
                  "charLength": 444,
                  "snippet": {
                    "text": "<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestSomeProperties\" file=\"gtest_xml_outfile1_test_.cc\" line=\"41\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1adb7a9b0f52c053135b439e2abcf19be38efeb10b0b60d068adcf958cc2c762"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (176 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (176 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 121,
                  "charOffset": 2949,
                  "charLength": 56,
                  "snippet": {
                    "text": "mpleted\" time=\"*\" timestamp=\"*\" classname=\"PropertyTwo\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2615,
                  "charLength": 456,
                  "snippet": {
                    "text": "<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyTwo\" tests=\"1\" failures=\"0\" skipped=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"TestInt64ConvertibleProperties\" file=\"gtest_xml_outfile2_test_.cc\" line=\"43\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyTwo\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"2\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2440c6984b5b2ca5ccd063cc4d51d8cf37640d448cb8f74203c63edcdd2bae4c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 3,
                  "charOffset": 3824,
                  "charLength": 59,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's XML output functionality.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 3754,
                  "charLength": 149,
                  "snippet": {
                    "text": "\nclass GTestXMLOutFilesTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  def setUp(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ac798a56801f0fe1d22ec629050f48850d2ce8d480dad4274d967aca8b4f76f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 3,
                  "charOffset": 3887,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 3822,
                  "charLength": 240,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eadc11a10e30f800d31804b3e7f0e4f1c3ef7567b79d403bf5162623702eb297"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 3,
                  "charOffset": 4223,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 4191,
                  "charLength": 81,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def tearDown(self):\n    self.DeleteFilesAndDir()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3564a45dd12e3f6e97878226541c24db73baeabea5cf213a409086e9ec36ed2c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "charOffset": 4275,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 4243,
                  "charLength": 147,
                  "snippet": {
                    "text": "    self.DeleteFilesAndDir()\n\n  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f78e46507b92d82d4b0d3d97c55d5a1f449093c337e6e45a5b121a44dd21c33d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 7,
                  "charOffset": 4319,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 4273,
                  "charLength": 149,
                  "snippet": {
                    "text": "  def DeleteFilesAndDir(self):\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))\n    except os.error:\n      pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6be3a473790ac807b24fcbcecc4417eb8372507f60fc41a04c24a2ec7e655e7b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 7,
                  "charOffset": 4418,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 4313,
                  "charLength": 196,
                  "snippet": {
                    "text": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_1_TEST + \".xml\"))\n    except os.error:\n      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + \".xml\"))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01a09d0b791a33a46da25fc6560e4d0a58fa86ee1897fbf6d18a332ee8f564d0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "charOffset": 4438,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 4412,
                  "charLength": 129,
                  "snippet": {
                    "text": "      pass\n    try:\n      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + \".xml\"))\n    except os.error:\n      pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c936353222df0812fed5fb8ad87e0cffac731193ee1ee761084367a385f4698c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 7,
                  "charOffset": 4537,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 4432,
                  "charLength": 151,
                  "snippet": {
                    "text": "      os.remove(os.path.join(self.output_dir_, GTEST_OUTPUT_2_TEST + \".xml\"))\n    except os.error:\n      pass\n    try:\n      os.rmdir(self.output_dir_)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "799e1e7fd70ac3b5cc44322744aad5eec767fd296ccd1f76a6df56a878c319f3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 7,
                  "charOffset": 4557,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 4531,
                  "charLength": 84,
                  "snippet": {
                    "text": "      pass\n    try:\n      os.rmdir(self.output_dir_)\n    except os.error:\n      pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90a720c600343425344fa41d76350354f222384f693c6dee37a67ccd5934102a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 7,
                  "charOffset": 4611,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 4551,
                  "charLength": 91,
                  "snippet": {
                    "text": "      os.rmdir(self.output_dir_)\n    except os.error:\n      pass\n\n  def testOutfile1(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "314ba8c48066f4bba36a416f4dbd0bfdd54362f8eccb9473545c0217d433f611"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "charOffset": 4619,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 4605,
                  "charLength": 97,
                  "snippet": {
                    "text": "      pass\n\n  def testOutfile1(self):\n    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ff7289037d7645191296b0bbfaf66058846e63d0253600f0822c94a8eed3695"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 3,
                  "charOffset": 4705,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 4643,
                  "charLength": 145,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_1_TEST, EXPECTED_XML_1)\n\n  def testOutfile2(self):\n    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84233b2fa3bbbece8364f2e9c5a18f0a78e03d4088feb943151cf4ad792dbaba"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 3,
                  "charOffset": 4791,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 4729,
                  "charLength": 258,
                  "snippet": {
                    "text": "    self._TestOutFile(GTEST_OUTPUT_2_TEST, EXPECTED_XML_2)\n\n  def _TestOutFile(self, test_name, expected_xml):\n    gtest_prog_path = gtest_test_utils.GetTestExecutablePath(test_name)\n    command = [gtest_prog_path, \"--gtest_output=xml:%s\" % self.output_dir_]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2dd3ff7e3baf9a23783604fee378cd72ff5ab7670da731e6316fc125656006bf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 7,
                  "charOffset": 5601,
                  "charLength": 6,
                  "snippet": {
                    "text": "actual"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 5509,
                  "charLength": 181,
                  "snippet": {
                    "text": "    expected = minidom.parseString(expected_xml)\n    if os.path.isfile(output_file1):\n      actual = minidom.parse(output_file1)\n    else:\n      actual = minidom.parse(output_file2)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7dde46d52bb64d8a4130527e6b041c083faedf5336a96b7f421abc8cd4f8e90c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 7,
                  "charOffset": 5654,
                  "charLength": 6,
                  "snippet": {
                    "text": "actual"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 5595,
                  "charLength": 222,
                  "snippet": {
                    "text": "      actual = minidom.parse(output_file1)\n    else:\n      actual = minidom.parse(output_file2)\n    self.NormalizeXml(actual.documentElement)\n    self.AssertEquivalentNodes(expected.documentElement, actual.documentElement)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37d131794e1bbdc55c7906c2cc92f97052ccbbe7f6f3c70473a8a6e15b4f8c6c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 3,
                  "charOffset": 5891,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 5861,
                  "charLength": 100,
                  "snippet": {
                    "text": "\nif __name__ == \"__main__\":\n  os.environ[\"GTEST_STACK_TRACE_DEPTH\"] = \"0\"\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "19285b9c69a35a988570586c9afd5a1118af69f9d10521e430959ef96280f688"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 3,
                  "charOffset": 5937,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 5862,
                  "charLength": 99,
                  "snippet": {
                    "text": "if __name__ == \"__main__\":\n  os.environ[\"GTEST_STACK_TRACE_DEPTH\"] = \"0\"\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "784fd93aa353c0836656f622461a6401ed94f84bad21d5cbb930c6be4a3281fc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\?'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\?'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 20,
                  "charOffset": 2145,
                  "charLength": 39,
                  "snippet": {
                    "text": "\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 2088,
                  "charLength": 175,
                  "snippet": {
                    "text": "GTEST_OUTPUT_FLAG = '--gtest_output'\n\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15d4a77388098aecb2b7c57f9a49969ca368f8ce764666f4156f41ffd19a76c1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\?'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\?'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 56,
                  "charOffset": 2181,
                  "charLength": 3,
                  "snippet": {
                    "text": "\\?>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 2088,
                  "charLength": 175,
                  "snippet": {
                    "text": "GTEST_OUTPUT_FLAG = '--gtest_output'\n\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"16\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59abff267951d6c4f9d126552716ce540adf4817bdc47d425da9c06b461b6486"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "charOffset": 4283,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 4230,
                  "charLength": 86,
                  "snippet": {
                    "text": "  \"tests\": 16,\n  \"name\": \"AllTests\",\n  \"testsuites\": \\[\n    {\n      \"name\": \"FooTest\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87bef2385526ca3b587341016a88be7c087ea9b0610444c41fe325b26df05230"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 20,
                  "charOffset": 4354,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 4292,
                  "charLength": 101,
                  "snippet": {
                    "text": "      \"name\": \"FooTest\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test1\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e21f348889420ff92a41c1ada693059a419035a46e0ad50ae63e733e061dbf58"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "charOffset": 4608,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 4571,
                  "charLength": 52,
                  "snippet": {
                    "text": "          \"line\": 45\n        }\n      \\]\n    },\n    {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e712fe03e05f11c97157aa20c18275ce509c453c18497b850703977508cb91c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 20,
                  "charOffset": 4693,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 4624,
                  "charLength": 108,
                  "snippet": {
                    "text": "      \"name\": \"FooTestFixture\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test3\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "870e190dfffbd906e7acabe650a43e3bd16f386bb91ffae91293c10256dc1368"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 7,
                  "charOffset": 4947,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 4910,
                  "charLength": 52,
                  "snippet": {
                    "text": "          \"line\": 49\n        }\n      \\]\n    },\n    {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82df9678eb316230053f6c9af8cfe574dd6bdb003f30dd6b138b3e2c6ce64a54"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 20,
                  "charOffset": 5033,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 4963,
                  "charLength": 109,
                  "snippet": {
                    "text": "      \"name\": \"TypedTest\\\\\\\\/0\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test7\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b768a5ee3f4f16ff95e2b114768f83261674794152f4b9629b0c3b253ff1d727"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 7,
                  "charOffset": 5349,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 5312,
                  "charLength": 52,
                  "snippet": {
                    "text": "          \"line\": 61\n        }\n      \\]\n    },\n    {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d4dc6266e79ebbda2281d2f9bf3c6af2f7182aee6545a548f44f3515e24e54b8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 20,
                  "charOffset": 5435,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 5365,
                  "charLength": 109,
                  "snippet": {
                    "text": "      \"name\": \"TypedTest\\\\\\\\/1\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test7\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba2579a0071e8377f863bd934507173217f2f77103afd26a0543094f777352e4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 7,
                  "charOffset": 5753,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5716,
                  "charLength": 52,
                  "snippet": {
                    "text": "          \"line\": 61\n        }\n      \\]\n    },\n    {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "550a83b44528438bb1f1cb3173dbe84001a487aa228cfef0f66301b7e81ea5e8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 20,
                  "charOffset": 5867,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 5769,
                  "charLength": 137,
                  "snippet": {
                    "text": "      \"name\": \"Single\\\\\\\\/TypeParameterizedTestSuite\\\\\\\\/0\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test9\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "366300f23d233f0089ad323e765a2bc824277cb61033bca544b6e1a5ec70ca3a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "charOffset": 6184,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 6147,
                  "charLength": 52,
                  "snippet": {
                    "text": "          \"line\": 67\n        }\n      \\]\n    },\n    {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba139476937c2de1f34eacef54e642d54661cda3d5d01c6365579021f78e860b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 20,
                  "charOffset": 6298,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 6200,
                  "charLength": 137,
                  "snippet": {
                    "text": "      \"name\": \"Single\\\\\\\\/TypeParameterizedTestSuite\\\\\\\\/1\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test9\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1461011e29d33b422d00fcf0c91f9c12aaf0bf2c77fb0fdc45a17204b3dcb141"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 7,
                  "charOffset": 6617,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 6580,
                  "charLength": 52,
                  "snippet": {
                    "text": "          \"line\": 67\n        }\n      \\]\n    },\n    {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbca4f884eed49a276b624b88a2b51b4301047d7af77bdb4a113d5b47286f92a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\['",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\['"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 20,
                  "charOffset": 6717,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 6633,
                  "charLength": 129,
                  "snippet": {
                    "text": "      \"name\": \"ValueParam\\\\\\\\/ValueParamTest\",\n      \"tests\": 4,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test5\\\\\\\\/0\","
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fffa97b03c6a0bb844fd5aea49f32509120d94a0dc907baba36dae42fa9e562"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 7,
                  "charOffset": 7365,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 7328,
                  "charLength": 50,
                  "snippet": {
                    "text": "          \"line\": 53\n        }\n      \\]\n    }\n  \\]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34fc1f30f2dc0923c0dac77bc13f2be9023b36ae5b8806b5b60f34fc66104cb3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\]'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\\\]'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 3,
                  "charOffset": 7376,
                  "charLength": 2,
                  "snippet": {
                    "text": "\\]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 7359,
                  "charLength": 25,
                  "snippet": {
                    "text": "      \\]\n    }\n  \\]\n}\n\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "25cd8652b6b28a8871c7d427bd57f9d01e828dc913e7271301d89cb53a0e378a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 3,
                  "charOffset": 7452,
                  "charLength": 79,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 7386,
                  "charLength": 167,
                  "snippet": {
                    "text": "\nclass GTestListTestsOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\"\n\n  def testXml(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7ef7e0706e99da8fac0bb9ed6097e9c446b8b8122318b9a01d70a889f23f7525"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 3,
                  "charOffset": 7535,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 7450,
                  "charLength": 174,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's list tests with output to file functionality.\"\"\"\n\n  def testXml(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "38d1e4ccb24649dc83b017a8e046b5b7bc041aee924b2733241ef8a25536e381"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 3,
                  "charOffset": 7785,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 7740,
                  "charLength": 135,
                  "snippet": {
                    "text": "    self._TestOutput('xml', EXPECTED_XML)\n\n  def testJSON(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b93c7ffee9ede2ffa770e1ef31b7481f1bf73ac41c334c7ba529dff7b79e32aa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 3,
                  "charOffset": 8038,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 7991,
                  "charLength": 174,
                  "snippet": {
                    "text": "    self._TestOutput('json', EXPECTED_JSON)\n\n  def _GetOutput(self, out_format):\n    file_path = os.path.join(\n        gtest_test_utils.GetTempDir(), 'test_out.' + out_format"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ca650562fd61230d231dd143c51446d6df35b3038e4f1274c261495d33d8602"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 7,
                  "charOffset": 8730,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 265,
                  "startColumn": 1,
                  "charOffset": 8646,
                  "charLength": 120,
                  "snippet": {
                    "text": "    self.assertTrue(os.path.isfile(file_path))\n    with open(file_path) as f:\n      result = f.read()\n    return result\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ff5fcfe15c1c53c0f51729a1781ac3f11a0b6dc77f2421f4295f31e877ce94a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 3,
                  "charOffset": 8769,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 268,
                  "startColumn": 1,
                  "charOffset": 8748,
                  "charLength": 154,
                  "snippet": {
                    "text": "    return result\n\n  def _TestOutput(self, test_format, expected_output):\n    actual = self._GetOutput(test_format)\n    actual_lines = actual.splitlines()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a44521185042a1dd31a0b18e0dd2fb9c335f6698822e95727a62f36eb1eafbd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 7,
                  "charOffset": 9015,
                  "charLength": 13,
                  "snippet": {
                    "text": "expected_line"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 274,
                  "startColumn": 1,
                  "charOffset": 8953,
                  "charLength": 186,
                  "snippet": {
                    "text": "    line_count = 0\n    for actual_line in actual_lines:\n      expected_line = expected_lines[line_count]\n      expected_line_re = re.compile(expected_line.strip())\n      self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f5a44c4d8bf2f09f9814dbd7e138740e0011d94949edb60e37b74aec3a313780"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 7,
                  "charOffset": 9064,
                  "charLength": 16,
                  "snippet": {
                    "text": "expected_line_re"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8972,
                  "charLength": 222,
                  "snippet": {
                    "text": "    for actual_line in actual_lines:\n      expected_line = expected_lines[line_count]\n      expected_line_re = re.compile(expected_line.strip())\n      self.assertTrue(\n          expected_line_re.match(actual_line.strip()),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "265ac4b75752212092020e3b6fedc30206a48190992cfe9a3d50967b2ca5f512"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 7,
                  "charOffset": 9123,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 276,
                  "startColumn": 1,
                  "charOffset": 9009,
                  "charLength": 222,
                  "snippet": {
                    "text": "      expected_line = expected_lines[line_count]\n      expected_line_re = re.compile(expected_line.strip())\n      self.assertTrue(\n          expected_line_re.match(actual_line.strip()),\n          'actual output of \"%s\",\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73a7d948cd423716a6876a1d9434364b1d56097548ee428a50d486ea529d91a1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 7,
                  "charOffset": 9368,
                  "charLength": 10,
                  "snippet": {
                    "text": "line_count"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 282,
                  "startColumn": 1,
                  "charOffset": 9290,
                  "charLength": 107,
                  "snippet": {
                    "text": "          'on line %d' % (actual, expected_output, line_count),\n      )\n      line_count = line_count + 1\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e42d3e81b8ca7e2fdc7655bd5ddfa1a4a508e5791683491111fa418568ef85cb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 3,
                  "charOffset": 9427,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 286,
                  "startColumn": 1,
                  "charOffset": 9397,
                  "charLength": 100,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b94cf9b4886669b49ce22ecf3f4a73d47b44e741e077fd7a062bfcd4ca764cdb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 3,
                  "charOffset": 9473,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 287,
                  "startColumn": 1,
                  "charOffset": 9398,
                  "charLength": 99,
                  "snippet": {
                    "text": "if __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "711bf096699beb33dd417bf3689809f9b38f39f5d5c0fcc63659d35b7e3392db"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "charOffset": 2040,
                  "charLength": 4,
                  "snippet": {
                    "text": "from"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 2032,
                  "charLength": 94,
                  "snippet": {
                    "text": "\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32bda5a6614eb9a82dd921cb191b4147465ec9e8bf355c112a249528e3122181"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "charOffset": 2122,
                  "charLength": 4,
                  "snippet": {
                    "text": "pass"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 2038,
                  "charLength": 144,
                  "snippet": {
                    "text": "  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass\nimport sys\nfrom googletest.test import gtest_test_utils"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "15938459f6dae49ff659fbf2b715c34c8359cfa77a368012fae387a68d61fb7c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 3,
                  "charOffset": 2612,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2564,
                  "charLength": 191,
                  "snippet": {
                    "text": "CAN_PASS_EMPTY_ENV = False\nif sys.executable:\n  os.environ['EMPTY_VAR'] = ''\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('EMPTY_VAR' in os.environ)\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db60e4adc825a0c43cc15893d4fbdea21ddf154bd6558f4a283a1a12770f57c7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2643,
                  "charLength": 5,
                  "snippet": {
                    "text": "child"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2591,
                  "charLength": 168,
                  "snippet": {
                    "text": "if sys.executable:\n  os.environ['EMPTY_VAR'] = ''\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('EMPTY_VAR' in os.environ)\"]\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0ca14ae238593a1b87749e1d9d8467e9b232bf85dd1c4d75aff6d95602095da"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "charOffset": 2762,
                  "charLength": 18,
                  "snippet": {
                    "text": "CAN_PASS_EMPTY_ENV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 2680,
                  "charLength": 123,
                  "snippet": {
                    "text": "      [sys.executable, '-c', \"import os; print('EMPTY_VAR' in os.environ)\"]\n  )\n  CAN_PASS_EMPTY_ENV = eval(child.output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c8aff8625098e898ec33a37b7b4d4130e65f668e5f626f5650db0381555e4b2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 3,
                  "charOffset": 3208,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 3165,
                  "charLength": 141,
                  "snippet": {
                    "text": "CAN_UNSET_ENV = False\nif sys.executable:\n  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3d81d1b3fe51d00183297503c179cec233ce7dcfe581ec057268623f8dc66148"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "charOffset": 3240,
                  "charLength": 3,
                  "snippet": {
                    "text": "del"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 3187,
                  "charLength": 199,
                  "snippet": {
                    "text": "if sys.executable:\n  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('UNSET_VAR' not in os.environ)\"]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "95d3e87fe486b3f24c36225db4f92620516d47ae8a99b166633fda1e7c93854f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "charOffset": 3270,
                  "charLength": 5,
                  "snippet": {
                    "text": "child"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 3206,
                  "charLength": 184,
                  "snippet": {
                    "text": "  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', \"import os; print('UNSET_VAR' not in os.environ)\"]\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "669cfd96534b7db6a52e1bcbe2456d0d906f789be7c975f5549ec5e568720d7e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 3,
                  "charOffset": 3393,
                  "charLength": 13,
                  "snippet": {
                    "text": "CAN_UNSET_ENV"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 3307,
                  "charLength": 122,
                  "snippet": {
                    "text": "      [sys.executable, '-c', \"import os; print('UNSET_VAR' not in os.environ)\"]\n  )\n  CAN_UNSET_ENV = eval(child.output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "253ee211e790be54b0da5c1c9a69f26ebf8ae4e130a3be9f10308a09937703f0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 3,
                  "charOffset": 5765,
                  "charLength": 11,
                  "snippet": {
                    "text": "DEATH_TESTS"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5737,
                  "charLength": 99,
                  "snippet": {
                    "text": "\nif SUPPORTS_DEATH_TESTS:\n  DEATH_TESTS = [\n      'HasDeathTest.Test1',\n      'HasDeathTest.Test2',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3005576ccc3d8ec2b5b0a9741802e1554f50e1cf493c8dc54439c44dc8df006"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 3,
                  "charOffset": 5849,
                  "charLength": 11,
                  "snippet": {
                    "text": "DEATH_TESTS"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 5837,
                  "charLength": 59,
                  "snippet": {
                    "text": "  ]\nelse:\n  DEATH_TESTS = []\n\n# All the non-disabled tests."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57619e3d514960815fdf0141d08055b622e1852b70c6b2ffcd1cf5c93d15657d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 3,
                  "charOffset": 6276,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6242,
                  "charLength": 130,
                  "snippet": {
                    "text": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfb9225866ab137b6038fc45567279ec71c16baca3cd974a78cf8e695b7cc03e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 3,
                  "charOffset": 6351,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 6274,
                  "charLength": 154,
                  "snippet": {
                    "text": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68820d7438ba2ddf3883fa8eeda5c7ed6d83443cb9abe0bbf8475763abb60b57"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 3,
                  "charOffset": 6404,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6349,
                  "charLength": 105,
                  "snippet": {
                    "text": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61599fe63f10871ea1bd36bf2bf00e71142c2eba493a75e55801e5dadf5dcf94"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 3,
                  "charOffset": 6493,
                  "charLength": 51,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns its output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 191,
                  "startColumn": 1,
                  "charOffset": 6455,
                  "charLength": 128,
                  "snippet": {
                    "text": "\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4da8f2caad6ae201e8a190fe405db38997f49028b347a08f94a84b456483696"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 3,
                  "charOffset": 6548,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 6491,
                  "charLength": 147,
                  "snippet": {
                    "text": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess(\n      [COMMAND] + (args or []), env=environ\n  ).output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "660487249efcd277b6906023cf0ca91b33c056248caab1236d82c932e2d9e516"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 3,
                  "charOffset": 6681,
                  "charLength": 78,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 6640,
                  "charLength": 193,
                  "snippet": {
                    "text": "\ndef RunAndExtractTestList(args=None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a668e99773237c8ce0c6662921333ac3e4cd165ad17347cead0a2bc420e9891"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 3,
                  "charOffset": 6763,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 6679,
                  "charLength": 188,
                  "snippet": {
                    "text": "  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "645878888aa74efc8dae5025318811eb72d7be9033808953bfc250228b8d23bf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 3,
                  "charOffset": 6836,
                  "charLength": 9,
                  "snippet": {
                    "text": "tests_run"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 202,
                  "startColumn": 1,
                  "charOffset": 6760,
                  "charLength": 119,
                  "snippet": {
                    "text": "\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ddf536a4aee1cd90e19577cdcdacea831ab36ef1a879e4513270f16f85c2a9e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 3,
                  "charOffset": 6853,
                  "charLength": 9,
                  "snippet": {
                    "text": "test_case"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 6761,
                  "charLength": 154,
                  "snippet": {
                    "text": "  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d39ae03f234d895b792ce00d06c918f6e3bc34711eeaff2ffd4472d0719ceb3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 3,
                  "charOffset": 6870,
                  "charLength": 4,
                  "snippet": {
                    "text": "test"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 204,
                  "startColumn": 1,
                  "charOffset": 6834,
                  "charLength": 121,
                  "snippet": {
                    "text": "  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33a455bf4b1458f95d564d48e682cd6e574e6c7dae82229fa0c9c85945be4f10"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 3,
                  "charOffset": 6882,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6851,
                  "charLength": 130,
                  "snippet": {
                    "text": "  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)\n    if match is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "493cb30ce7e72e51102988b8e022d11948461b88e0a40beca7fdc23ab790d384"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 7,
                  "charOffset": 6988,
                  "charLength": 9,
                  "snippet": {
                    "text": "test_case"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 6916,
                  "charLength": 145,
                  "snippet": {
                    "text": "    match = TEST_CASE_REGEX.match(line)\n    if match is not None:\n      test_case = match.group(1)\n    else:\n      match = TEST_REGEX.match(line)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46e9038e715fa4dc177e7dbceb15091ceb3515abd20e06b53cae763bf8a0a804"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 7,
                  "charOffset": 7031,
                  "charLength": 5,
                  "snippet": {
                    "text": "match"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 6982,
                  "charLength": 137,
                  "snippet": {
                    "text": "      test_case = match.group(1)\n    else:\n      match = TEST_REGEX.match(line)\n      if match is not None:\n        test = match.group(1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7e003ef15ed5f4168f978cb238f690119a749518b28586bb226ee357bf1afbf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 7,
                  "charOffset": 7068,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 7015,
                  "charLength": 153,
                  "snippet": {
                    "text": "    else:\n      match = TEST_REGEX.match(line)\n      if match is not None:\n        test = match.group(1)\n        tests_run.append(test_case + '.' + test)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0e0770b60c20f7c65d9d22ad7d285999c20edad8d77eb8eb459dc6e7c4233e8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 3,
                  "charOffset": 7171,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 214,
                  "startColumn": 1,
                  "charOffset": 7090,
                  "charLength": 114,
                  "snippet": {
                    "text": "        test = match.group(1)\n        tests_run.append(test_case + '.' + test)\n  return (tests_run, p.exit_code)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "488a524842c169fe4ae5bf6e5d380f0eb8802fdf23d82f6be122bba3c148b4f6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 3,
                  "charOffset": 7255,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 7204,
                  "charLength": 224,
                  "snippet": {
                    "text": "\ndef RunAndExtractDisabledBannerList(args=None):\n  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8523537a0f72c712a8b4a20df3b5c01b6f60405cd548928d7f2de7fd21f56cd2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 3,
                  "charOffset": 7335,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 7205,
                  "charLength": 259,
                  "snippet": {
                    "text": "def RunAndExtractDisabledBannerList(args=None):\n  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []\n  for line in p.output.split('\\n'):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "557dbd22e5d0ca600baaf4127fa9723d3414268561ab93562d939a66584bcc74"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 3,
                  "charOffset": 7408,
                  "charLength": 15,
                  "snippet": {
                    "text": "banners_printed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 7253,
                  "charLength": 257,
                  "snippet": {
                    "text": "  \"\"\"Runs the test program and returns tests that printed a disabled banner.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []\n  for line in p.output.split('\\n'):\n    match = DISABLED_BANNER_REGEX.match(line)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50e4eb6a3a7d73f1aa4e6e67575a3aa4d8fc39b2a065d05cdfdd6c9913786e39"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 3,
                  "charOffset": 7431,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 7333,
                  "charLength": 203,
                  "snippet": {
                    "text": "  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  banners_printed = []\n  for line in p.output.split('\\n'):\n    match = DISABLED_BANNER_REGEX.match(line)\n    if match is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c5c6462f4ff500672e4c5752aaae1c22f479600e16fbe28f94a1514e9d74966"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 7,
                  "charOffset": 7543,
                  "charLength": 15,
                  "snippet": {
                    "text": "banners_printed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 7465,
                  "charLength": 142,
                  "snippet": {
                    "text": "    match = DISABLED_BANNER_REGEX.match(line)\n    if match is not None:\n      banners_printed.append(match.group(1))\n  return banners_printed\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e163a244bb66eec247cf54300f314b47177fbcc94e65150ce7edcd967be3b3d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 3,
                  "charOffset": 7584,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 7511,
                  "charLength": 97,
                  "snippet": {
                    "text": "    if match is not None:\n      banners_printed.append(match.group(1))\n  return banners_printed\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53a3d8762e293ed60ad817b1601f3ee38f565c49c587be2ad43cd9f2eb05f20e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 3,
                  "charOffset": 7676,
                  "charLength": 70,
                  "snippet": {
                    "text": "\"\"\"Runs the given function and arguments in a modified environment.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 7608,
                  "charLength": 179,
                  "snippet": {
                    "text": "\ndef InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c1680489423b2388905c2c3cc1dc569b9fe5f764169c7fddc70b82b06ce1437"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 3,
                  "charOffset": 7749,
                  "charLength": 3,
                  "snippet": {
                    "text": "try"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 7609,
                  "charLength": 208,
                  "snippet": {
                    "text": "def InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n    environ.update(extra_env)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0d882e7952bfebc4bfc0f5ce92c22a7efdbe8b77dc33c1f542a2a042ce6f13a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 3,
                  "charOffset": 7857,
                  "charLength": 7,
                  "snippet": {
                    "text": "finally"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 7788,
                  "charLength": 130,
                  "snippet": {
                    "text": "    environ.update(extra_env)\n    return function(*args, **kwargs)\n  finally:\n    environ.clear()\n    environ.update(original_env)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3e8d52214049b689d6468237e87f29b4806c65fe0c100a5e0c47addf0fdd4f5e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 3,
                  "charOffset": 7980,
                  "charLength": 78,
                  "snippet": {
                    "text": "\"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 240,
                  "startColumn": 1,
                  "charOffset": 7920,
                  "charLength": 155,
                  "snippet": {
                    "text": "\ndef RunWithSharding(total_shards, shard_index, command):\n  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n\n  extra_env = {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88d74a19b823f7e0d2cff2eba0d5134ef6883ed225197f8bb825cbedafcce941"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 3,
                  "charOffset": 8062,
                  "charLength": 9,
                  "snippet": {
                    "text": "extra_env"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 242,
                  "startColumn": 1,
                  "charOffset": 7978,
                  "charLength": 189,
                  "snippet": {
                    "text": "  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n\n  extra_env = {\n      SHARD_INDEX_ENV_VAR: str(shard_index),\n      TOTAL_SHARDS_ENV_VAR: str(total_shards),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fd730232b1611d8ca7c2a54e47aa67bb567a4358490c529c4b01c2a0b74eff6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 3,
                  "charOffset": 8174,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 8121,
                  "charLength": 126,
                  "snippet": {
                    "text": "      TOTAL_SHARDS_ENV_VAR: str(total_shards),\n  }\n  return InvokeWithModifiedEnv(extra_env, RunAndExtractTestList, command)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "93096473c0f0bc60702445427caed4ee4e7a0744665aacd2c8266de59c78bb56"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 3,
                  "charOffset": 8323,
                  "charLength": 70,
                  "snippet": {
                    "text": "\"\"\"Tests the env variable or the command line flag to filter tests.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 8266,
                  "charLength": 143,
                  "snippet": {
                    "text": "\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2826d717bff5467d9349fcd31c07dfd64b6999ea0cba62a163f718b1a780a7c5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 3,
                  "charOffset": 8397,
                  "charLength": 12,
                  "snippet": {
                    "text": "# Utilities."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 8321,
                  "charLength": 127,
                  "snippet": {
                    "text": "  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n\n  # Utilities.\n\n  def AssertSetEqual(self, lhs, rhs):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f440c5bb28d42f7ba3eedda4d5ddaa346e9119a5331c34b29db725da702c7957"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 3,
                  "charOffset": 8413,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 8395,
                  "charLength": 97,
                  "snippet": {
                    "text": "  # Utilities.\n\n  def AssertSetEqual(self, lhs, rhs):\n    \"\"\"Asserts that two sets are equal.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9aed4c0febe2976f4e2e3f52f27800513ddc919b8a135140e51a2f148f69204"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 7,
                  "charOffset": 8520,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 1,
                  "charOffset": 8492,
                  "charLength": 104,
                  "snippet": {
                    "text": "\n    for elem in lhs:\n      self.assertTrue(elem in rhs, '%s in %s' % (elem, rhs))\n\n    for elem in rhs:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5ba4f740944e4af514e7f6c0aa4e2657189b0483e9cd2a778c476d8015aa5954"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 7,
                  "charOffset": 8603,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 264,
                  "startColumn": 1,
                  "charOffset": 8575,
                  "charLength": 142,
                  "snippet": {
                    "text": "\n    for elem in rhs:\n      self.assertTrue(elem in lhs, '%s in %s' % (elem, lhs))\n\n  def AssertPartitionIsValid(self, set_var, list_of_sets):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f1f16d70e0e1adf521f2454c6ad4a20899008b56d71f3fd797ae55c6eb488d96"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 3,
                  "charOffset": 8661,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "charOffset": 8597,
                  "charLength": 190,
                  "snippet": {
                    "text": "      self.assertTrue(elem in lhs, '%s in %s' % (elem, lhs))\n\n  def AssertPartitionIsValid(self, set_var, list_of_sets):\n    \"\"\"Asserts that list_of_sets is a valid partition of set_var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f65f80aae4b23a5d5cf60d1fa9f0ad351ad9940cb4134abc705323e38b1a8a76"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 7,
                  "charOffset": 8853,
                  "charLength": 14,
                  "snippet": {
                    "text": "full_partition"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 271,
                  "startColumn": 1,
                  "charOffset": 8788,
                  "charLength": 209,
                  "snippet": {
                    "text": "    full_partition = []\n    for slice_var in list_of_sets:\n      full_partition.extend(slice_var)\n    self.assertEqual(len(set_var), len(full_partition))\n    self.assertEqual(set(set_var), set(full_partition))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44942fe1351bb62ba1dfcc7ac79e607637e84a793d29ccf82bcdccd0cf9b37b1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 3,
                  "charOffset": 9001,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8942,
                  "charLength": 190,
                  "snippet": {
                    "text": "    self.assertEqual(set(set_var), set(full_partition))\n\n  def AdjustForParameterizedTests(self, tests_to_run):\n    \"\"\"Adjust tests_to_run in case value parameterized tests are disabled.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b27f22f76362958046eac779a648f81bc35363e36bbaf3cee6b9b5b3d023af1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 7,
                  "charOffset": 9202,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 280,
                  "startColumn": 1,
                  "charOffset": 9133,
                  "charLength": 154,
                  "snippet": {
                    "text": "    global param_tests_present\n    if not param_tests_present:\n      return list(set(tests_to_run) - set(PARAM_TESTS))\n    else:\n      return tests_to_run"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f66cc98b969df71d37d888e6fbf1b20bab749ae0c4ee32bbc3cfd5fcc772b0f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 7,
                  "charOffset": 9268,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 282,
                  "startColumn": 1,
                  "charOffset": 9196,
                  "charLength": 146,
                  "snippet": {
                    "text": "      return list(set(tests_to_run) - set(PARAM_TESTS))\n    else:\n      return tests_to_run\n\n  def RunAndVerify(self, gtest_filter, tests_to_run):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "494043bdbd4b54ebd1d9f39853ed1a4c5c2703ca759a292fa44049d0c71df527"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 3,
                  "charOffset": 9291,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 9262,
                  "charLength": 160,
                  "snippet": {
                    "text": "      return tests_to_run\n\n  def RunAndVerify(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for a given filter.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb5cf93ee94c1b5f14c5eb8ef526e79589cb8d71b8fe87547c87b467cb84fef5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "charOffset": 9967,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 9860,
                  "charLength": 229,
                  "snippet": {
                    "text": "    # pylint: disable=g-explicit-bool-comparison\n    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2f053b63e6cce89095d5f3198faae22569ffd04ccc6b92d8213e7abb2b5e9de9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 7,
                  "charOffset": 10013,
                  "charLength": 9,
                  "snippet": {
                    "text": "tests_run"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 299,
                  "startColumn": 1,
                  "charOffset": 9909,
                  "charLength": 231,
                  "snippet": {
                    "text": "    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)\n      self.AssertSetEqual(tests_run, tests_to_run)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9acbfc467ea781c27a0fa3c81c34d40906900aae309b4c733de6e1f1fc40befa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 7,
                  "charOffset": 10058,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 9961,
                  "charLength": 227,
                  "snippet": {
                    "text": "      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)\n      self.AssertSetEqual(tests_run, tests_to_run)\n    # pylint: enable=g-explicit-bool-comparison"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59136ad2826df75088d2467adc4f48f750c3b408c4cab338efcd537f7a9a610e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 7,
                  "charOffset": 10096,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 301,
                  "startColumn": 1,
                  "charOffset": 10007,
                  "charLength": 182,
                  "snippet": {
                    "text": "      tests_run = RunAndExtractTestList()[0]\n      SetEnvVar(FILTER_ENV_VAR, None)\n      self.AssertSetEqual(tests_run, tests_to_run)\n    # pylint: enable=g-explicit-bool-comparison\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd5e93649fadaf81d150b1431a1617446a6bd76f2b8363e4775045142805670e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 7,
                  "charOffset": 10273,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 307,
                  "startColumn": 1,
                  "charOffset": 10237,
                  "charLength": 110,
                  "snippet": {
                    "text": "\n    if gtest_filter is None:\n      args = []\n    else:\n      args = ['--%s=%s' % (FILTER_FLAG, gtest_filter)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d7bca1d210617b0a584be8ac7ee02f9063a75296d5b2ee8f54d256cbf09d1b11"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 7,
                  "charOffset": 10299,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 309,
                  "startColumn": 1,
                  "charOffset": 10267,
                  "charLength": 128,
                  "snippet": {
                    "text": "      args = []\n    else:\n      args = ['--%s=%s' % (FILTER_FLAG, gtest_filter)]\n\n    tests_run = RunAndExtractTestList(args)[0]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6a5b5924ca649f0155e3b74926e04373615f026a47b7ea67fb89602874bb194"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 3,
                  "charOffset": 10448,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 314,
                  "startColumn": 1,
                  "charOffset": 10396,
                  "charLength": 113,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def RunAndVerifyWithSharding(\n      self,\n      gtest_filter,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9e37cd5549f871c916d716d4b6fff84fd70882c1949129ac1c7f853d11c6504"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 7,
                  "charOffset": 11758,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 347,
                  "startColumn": 1,
                  "charOffset": 11651,
                  "charLength": 206,
                  "snippet": {
                    "text": "    # pylint: disable=g-explicit-bool-comparison\n    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      partition = []\n      for i in range(0, total_shards):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3113ce654900b3f729178af72059713d9e97e4b01ebd796bb13c4f9f1a0c22d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 7,
                  "charOffset": 11804,
                  "charLength": 9,
                  "snippet": {
                    "text": "partition"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 348,
                  "startColumn": 1,
                  "charOffset": 11700,
                  "charLength": 229,
                  "snippet": {
                    "text": "    if CAN_TEST_EMPTY_FILTER or gtest_filter != '':\n      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      partition = []\n      for i in range(0, total_shards):\n        (tests_run, exit_code) = RunWithSharding(total_shards, i, args)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8442d009c2d808a5fef9e9889107bce4f84ede942aabe19b8e1896af21787b49"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 7,
                  "charOffset": 11825,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 349,
                  "startColumn": 1,
                  "charOffset": 11752,
                  "charLength": 202,
                  "snippet": {
                    "text": "      SetEnvVar(FILTER_ENV_VAR, gtest_filter)\n      partition = []\n      for i in range(0, total_shards):\n        (tests_run, exit_code) = RunWithSharding(total_shards, i, args)\n        if check_exit_0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "84d6c5cce5171d1488869a8d96d1528a0e2f406cdac32f200455af58265be5e4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 11,
                  "charOffset": 11965,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 352,
                  "startColumn": 1,
                  "charOffset": 11858,
                  "charLength": 174,
                  "snippet": {
                    "text": "        (tests_run, exit_code) = RunWithSharding(total_shards, i, args)\n        if check_exit_0:\n          self.assertEqual(0, exit_code)\n        partition.append(tests_run)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f6b19acfe4ce03edcb4d19c2581d901b3a1e8b7dd5a3fef4fe1eb3f5a50cf22"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 7,
                  "charOffset": 12039,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 355,
                  "startColumn": 1,
                  "charOffset": 11996,
                  "charLength": 181,
                  "snippet": {
                    "text": "        partition.append(tests_run)\n\n      self.AssertPartitionIsValid(tests_to_run, partition)\n      SetEnvVar(FILTER_ENV_VAR, None)\n    # pylint: enable=g-explicit-bool-comparison"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2994c260bcdf8ce00f83d90fef218fae92ddaee093196b883abb8d32b8810fd7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 358,
                  "startColumn": 7,
                  "charOffset": 12098,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 356,
                  "startColumn": 1,
                  "charOffset": 12032,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n      self.AssertPartitionIsValid(tests_to_run, partition)\n      SetEnvVar(FILTER_ENV_VAR, None)\n    # pylint: enable=g-explicit-bool-comparison\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df776d60b5baaa307257ed0679ded26a15b308743ea674e273f544e51e78f706"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 3,
                  "charOffset": 12181,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 359,
                  "startColumn": 1,
                  "charOffset": 12130,
                  "charLength": 197,
                  "snippet": {
                    "text": "    # pylint: enable=g-explicit-bool-comparison\n\n  def RunAndVerifyAllowingDisabled(self, gtest_filter, tests_to_run):\n    \"\"\"Checks that the binary runs correct set of tests for the given filter.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4e3832155c466b9e910a2ea8c8c5e1be2363eee3dfe17a394afb64627866660"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 7,
                  "charOffset": 12782,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 375,
                  "startColumn": 1,
                  "charOffset": 12692,
                  "charLength": 190,
                  "snippet": {
                    "text": "    args = ['--%s' % ALSO_RUN_DISABLED_TESTS_FLAG]\n    if gtest_filter is not None:\n      args.append('--%s=%s' % (FILTER_FLAG, gtest_filter))\n\n    tests_run = RunAndExtractTestList(args)[0]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8ecf8dbebda4ad180b613c72a1943411d2e467d42cbcf1a914db49106074a47"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 3,
                  "charOffset": 12935,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12883,
                  "charLength": 95,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, tests_to_run)\n\n  def setUp(self):\n    \"\"\"Sets up test case.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23042fa1df38aaa2ccb48cb82a9b752a4b78632f6dbb8acbda0e1f28f0c2f4cc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 7,
                  "charOffset": 13172,
                  "charLength": 19,
                  "snippet": {
                    "text": "param_tests_present"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 389,
                  "startColumn": 1,
                  "charOffset": 13099,
                  "charLength": 172,
                  "snippet": {
                    "text": "    global param_tests_present\n    if param_tests_present is None:\n      param_tests_present = (\n          PARAM_TEST_REGEX.search(RunAndReturnOutput()) is not None\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00230379ecf8a135f20b3c5ad95b61cbb33f822aeaba01033c1b772feb79e556"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 3,
                  "charOffset": 13275,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 393,
                  "startColumn": 1,
                  "charOffset": 13264,
                  "charLength": 101,
                  "snippet": {
                    "text": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the filter.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "067dc77b5fc4eae4dd14c81c712386b3305515c498cf961fa74f10d4f359cbee"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 3,
                  "charOffset": 13411,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 398,
                  "startColumn": 1,
                  "charOffset": 13366,
                  "charLength": 158,
                  "snippet": {
                    "text": "    self.RunAndVerify(None, ACTIVE_TESTS)\n\n  def testDefaultBehaviorWithShards(self):\n    \"\"\"Tests the behavior without the filter, with sharding enabled.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71c8456dae90d9c65d08bf506e8a2ce04de2ff83885dab3259606bc1469eaa28"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 3,
                  "charOffset": 13869,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 13789,
                  "charLength": 140,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n\n  def testEmptyFilter(self):\n    \"\"\"Tests an empty filter.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "34ae51dc0ee6a06f285b643ce39ea9b4844195183ea15a0453618f0f615d93b6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 3,
                  "charOffset": 14053,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 14005,
                  "charLength": 120,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding('', 2, [])\n\n  def testBadFilter(self):\n    \"\"\"Tests a filter that matches nothing.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9aa473a1ebd85fd4a301ce925099641021ebc5d1653c71cf6203e622f3ab6e0e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 3,
                  "charOffset": 14223,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 420,
                  "startColumn": 1,
                  "charOffset": 14165,
                  "charLength": 122,
                  "snippet": {
                    "text": "    self.RunAndVerifyAllowingDisabled('BadFilter', [])\n\n  def testFullName(self):\n    \"\"\"Tests filtering by full name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "32e2c5865d2c4a119390e8724314affa727222b412b8003249539e06398ccf42"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 3,
                  "charOffset": 14484,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 427,
                  "startColumn": 1,
                  "charOffset": 14412,
                  "charLength": 151,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding('FooTest.Xyz', 5, ['FooTest.Xyz'])\n\n  def testUniversalFilters(self):\n    \"\"\"Tests filters that match everything.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ab37713fc1a12c43760f6eaf2dcdee260c0bcd55bc17d4a12948523ded00be17"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 3,
                  "charOffset": 14879,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 436,
                  "startColumn": 1,
                  "charOffset": 14800,
                  "charLength": 156,
                  "snippet": {
                    "text": "    self.RunAndVerifyAllowingDisabled('*.*', ACTIVE_TESTS + DISABLED_TESTS)\n\n  def testFilterByTestCase(self):\n    \"\"\"Tests filtering by test case name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6fea49591a96316c8dbfd025390067675c962a226638ce2ebb935773f21a4442"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 3,
                  "charOffset": 15249,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 447,
                  "startColumn": 1,
                  "charOffset": 15240,
                  "charLength": 77,
                  "snippet": {
                    "text": "    )\n\n  def testFilterByTest(self):\n    \"\"\"Tests filtering by test name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6987e223670702cc3cd0eec05f5661890de23ec7ea89f02142e91ae1db40199a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 3,
                  "charOffset": 15396,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 452,
                  "startColumn": 1,
                  "charOffset": 15318,
                  "charLength": 162,
                  "snippet": {
                    "text": "    self.RunAndVerify('*.TestOne', ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testFilterDisabledTests(self):\n    \"\"\"Select only the disabled tests to run.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72217f56cb288c4d95b2e59d27b7f4a1490f6807cd2e048d9d2167a9323cf8d1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 3,
                  "charOffset": 16329,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 484,
                  "startColumn": 1,
                  "charOffset": 16320,
                  "charLength": 101,
                  "snippet": {
                    "text": "    )\n\n  def testWildcardInTestCaseName(self):\n    \"\"\"Tests using wildcard in the test case name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f75e61d384ddc9559e5655cfc857d126560ea1760ea4cc0e737c25e407dd5b2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 3,
                  "charOffset": 16720,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 501,
                  "startColumn": 1,
                  "charOffset": 16711,
                  "charLength": 92,
                  "snippet": {
                    "text": "    )\n\n  def testWildcardInTestName(self):\n    \"\"\"Tests using wildcard in the test name.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "674b1a2d20f4700397bf6e28f80e983468c8a5df64cefef5a19a56b44b741190"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 3,
                  "charOffset": 16872,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 506,
                  "startColumn": 1,
                  "charOffset": 16804,
                  "charLength": 148,
                  "snippet": {
                    "text": "    self.RunAndVerify('*.*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testFilterWithoutDot(self):\n    \"\"\"Tests a filter that has no '.' in it.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e9d31ffe0cb20524211c0a43af4c641df331a9899b0d50ce8804faac7a467178"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 3,
                  "charOffset": 17137,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 519,
                  "startColumn": 1,
                  "charOffset": 17128,
                  "charLength": 90,
                  "snippet": {
                    "text": "    )\n\n  def testTwoPatterns(self):\n    \"\"\"Tests filters that consist of two patterns.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "921857b9d5c83f0509801f4f7de836a4a156f727b2cfd0bc766fc6055415ca25"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 3,
                  "charOffset": 17483,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 534,
                  "startColumn": 1,
                  "charOffset": 17416,
                  "charLength": 152,
                  "snippet": {
                    "text": "    self.RunAndVerify(':*A*', ['FooTest.Abc', 'BazTest.TestA'])\n\n  def testThreePatterns(self):\n    \"\"\"Tests filters that consist of three patterns.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "21866c7b55b432a15d31fcfffb53ea2e9295374ca25de2e3777c9e4cee8478c4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 3,
                  "charOffset": 18173,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 568,
                  "startColumn": 1,
                  "charOffset": 18164,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n\n  def testNegativeFilters(self):\n    self.RunAndVerify(\n        '*-BazTest.TestOne',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67823c082d6e6df8ba331390a387b6093643b5525c9a734fc7e15be97fb81cb6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 3,
                  "charOffset": 19849,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 641,
                  "startColumn": 1,
                  "charOffset": 19840,
                  "charLength": 120,
                  "snippet": {
                    "text": "    )\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the filter flag overrides the filtering env. variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ba3c644a92f8632eca9a98cda9aa468d784a29f9a44f7e8ef681892625ebc6b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 653,
                  "startColumn": 3,
                  "charOffset": 20208,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 651,
                  "startColumn": 1,
                  "charOffset": 20130,
                  "charLength": 198,
                  "snippet": {
                    "text": "    self.AssertSetEqual(tests_run, ['BarTest.TestOne', 'BazTest.TestOne'])\n\n  def testShardStatusFileIsCreated(self):\n    \"\"\"Tests that the shard file is created if specified in the environment.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bfad29742451c4e319f3d8355a114d48b24778b7b84decbd29ad541bc4446082"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 7,
                  "charOffset": 20570,
                  "charLength": 21,
                  "snippet": {
                    "text": "InvokeWithModifiedEnv"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 661,
                  "startColumn": 1,
                  "charOffset": 20492,
                  "charLength": 200,
                  "snippet": {
                    "text": "    extra_env = {SHARD_STATUS_FILE_ENV_VAR: shard_status_file}\n    try:\n      InvokeWithModifiedEnv(extra_env, RunAndReturnOutput)\n    finally:\n      self.assertTrue(os.path.exists(shard_status_file))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8e84dbaaef34640f2a370b0c41060dcc490c8fc385248663a75be47ff8915a1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 7,
                  "charOffset": 20642,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 663,
                  "startColumn": 1,
                  "charOffset": 20564,
                  "charLength": 164,
                  "snippet": {
                    "text": "      InvokeWithModifiedEnv(extra_env, RunAndReturnOutput)\n    finally:\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "472fa8d823d99838e0df3d004c9887e29f85fe3854b8c1d73fd55c7451be63e3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 666,
                  "startColumn": 7,
                  "charOffset": 20699,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 664,
                  "startColumn": 1,
                  "charOffset": 20623,
                  "charLength": 160,
                  "snippet": {
                    "text": "    finally:\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n\n  def testShardStatusFileIsCreatedWithListTests(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82e4ae96958fa298b91483cd12f4737cb9df787c8f3b40a739f1846885330964"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 668,
                  "startColumn": 3,
                  "charOffset": 20731,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 666,
                  "startColumn": 1,
                  "charOffset": 20693,
                  "charLength": 166,
                  "snippet": {
                    "text": "      os.remove(shard_status_file)\n\n  def testShardStatusFileIsCreatedWithListTests(self):\n    \"\"\"Tests that the shard file is created with the \"list_tests\" flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70fc8cd747cdf54236d74b295b6dec3bc213c65034860ff4a9e7824db5654ece"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 7,
                  "charOffset": 21102,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 676,
                  "startColumn": 1,
                  "charOffset": 21024,
                  "charLength": 176,
                  "snippet": {
                    "text": "    extra_env = {SHARD_STATUS_FILE_ENV_VAR: shard_status_file}\n    try:\n      output = InvokeWithModifiedEnv(\n          extra_env, RunAndReturnOutput, [LIST_TESTS_FLAG]\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a2f3ac96397e45f254462db123dfccbb0f2539be331e4f9ec3b2cbb1697e8223"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 7,
                  "charOffset": 21220,
                  "charLength": 65,
                  "snippet": {
                    "text": "# This assertion ensures that Google Test enumerated the tests as"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 680,
                  "startColumn": 1,
                  "charOffset": 21193,
                  "charLength": 148,
                  "snippet": {
                    "text": "      )\n    finally:\n      # This assertion ensures that Google Test enumerated the tests as\n      # opposed to running them.\n      self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f9260d8c9e178db6287498a03e635a1ff7932e7e3ef646da3410caeb3c2437c8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 7,
                  "charOffset": 21292,
                  "charLength": 26,
                  "snippet": {
                    "text": "# opposed to running them."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 681,
                  "startColumn": 1,
                  "charOffset": 21201,
                  "charLength": 180,
                  "snippet": {
                    "text": "    finally:\n      # This assertion ensures that Google Test enumerated the tests as\n      # opposed to running them.\n      self.assertTrue(\n          '[==========]' not in output,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52a9026a60b70c3ff704c318a94451441db02681021a53925c2f0b84864fa28d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 7,
                  "charOffset": 21325,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 682,
                  "startColumn": 1,
                  "charOffset": 21214,
                  "charLength": 179,
                  "snippet": {
                    "text": "      # This assertion ensures that Google Test enumerated the tests as\n      # opposed to running them.\n      self.assertTrue(\n          '[==========]' not in output,\n          ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85e305f6f08abd83e817d22c97da28737a1d1c4d20e7e00555a901cac062fe06"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 693,
                  "startColumn": 7,
                  "charOffset": 21618,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 691,
                  "startColumn": 1,
                  "charOffset": 21603,
                  "charLength": 101,
                  "snippet": {
                    "text": "      )\n\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d97fc567e4e56c00588a53752b7edbee0dbffdd4c2bc0fba1fc512094cc2a1f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 7,
                  "charOffset": 21675,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 692,
                  "startColumn": 1,
                  "charOffset": 21611,
                  "charLength": 125,
                  "snippet": {
                    "text": "\n      self.assertTrue(os.path.exists(shard_status_file))\n      os.remove(shard_status_file)\n\n  def testDisabledBanner(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8936bba89358047ff5ee4ffe96db040ed1e7fc30abcb8ccf946c7ac8c81ccdca"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 3,
                  "charOffset": 21707,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 694,
                  "startColumn": 1,
                  "charOffset": 21669,
                  "charLength": 204,
                  "snippet": {
                    "text": "      os.remove(shard_status_file)\n\n  def testDisabledBanner(self):\n    \"\"\"Tests that the disabled banner prints only tests that match filter.\"\"\"\n    make_filter = lambda s: ['--%s=%s' % (FILTER_FLAG, s)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f341f163a276f5f5f296858274b9b27975cfaa1faee7dbb1a0359980f1c692"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E731 do not assign a lambda expression, use a def",
            "markdown": "PEP 8: E731 do not assign a lambda expression, use a def"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 5,
                  "charOffset": 21819,
                  "charLength": 11,
                  "snippet": {
                    "text": "make_filter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 696,
                  "startColumn": 1,
                  "charOffset": 21705,
                  "charLength": 233,
                  "snippet": {
                    "text": "  def testDisabledBanner(self):\n    \"\"\"Tests that the disabled banner prints only tests that match filter.\"\"\"\n    make_filter = lambda s: ['--%s=%s' % (FILTER_FLAG, s)]\n\n    banners = RunAndExtractDisabledBannerList(make_filter('*'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ee992b167bf8764b74836e770176f4e81e366590fd9f60e0b8e0462be8d6678"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 3,
                  "charOffset": 22437,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 716,
                  "startColumn": 1,
                  "charOffset": 22373,
                  "charLength": 136,
                  "snippet": {
                    "text": "    self.AssertSetEqual(banners, ['BazTest.DISABLED_TestC'])\n\n  if SUPPORTS_DEATH_TESTS:\n\n    def testShardingWorksWithDeathTests(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "821ba12f7c1f79de0733dc88f20fb1b61b18c7b59856d05197eb7d96566f172f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 7,
                  "charOffset": 22516,
                  "charLength": 54,
                  "snippet": {
                    "text": "\"\"\"Tests integration with death tests and sharding.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 719,
                  "startColumn": 1,
                  "charOffset": 22462,
                  "charLength": 154,
                  "snippet": {
                    "text": "\n    def testShardingWorksWithDeathTests(self):\n      \"\"\"Tests integration with death tests and sharding.\"\"\"\n\n      gtest_filter = 'HasDeathTest.*:SeqP/*'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3aa997f3de3372d7d6639f33f05bcf654e1b7726483e9b44cb1d7d2237b760c0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 7,
                  "charOffset": 22578,
                  "charLength": 12,
                  "snippet": {
                    "text": "gtest_filter"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 721,
                  "startColumn": 1,
                  "charOffset": 22510,
                  "charLength": 163,
                  "snippet": {
                    "text": "      \"\"\"Tests integration with death tests and sharding.\"\"\"\n\n      gtest_filter = 'HasDeathTest.*:SeqP/*'\n      expected_tests = [\n          'HasDeathTest.Test1',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e1767e6a0a62b5b148ac21027794279277bdd6da3ffa02a3c69c3e10f467fbc1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 724,
                  "startColumn": 7,
                  "charOffset": 22623,
                  "charLength": 14,
                  "snippet": {
                    "text": "expected_tests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 722,
                  "startColumn": 1,
                  "charOffset": 22571,
                  "charLength": 134,
                  "snippet": {
                    "text": "\n      gtest_filter = 'HasDeathTest.*:SeqP/*'\n      expected_tests = [\n          'HasDeathTest.Test1',\n          'HasDeathTest.Test2',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83474e4d9515b56457226d6f7c56af1c19b3c460086a4fbcffcace50e61812e4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 733,
                  "startColumn": 7,
                  "charOffset": 22865,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 731,
                  "startColumn": 1,
                  "charOffset": 22850,
                  "charLength": 120,
                  "snippet": {
                    "text": "      ]\n\n      for flag in [\n          '--gtest_death_test_style=threadsafe',\n          '--gtest_death_test_style=fast',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3ad75b60262116bc5df2b065d7c4080b5ae9a8cba2077944beb17acc57c5dd7d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 3,
                  "charOffset": 23261,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 744,
                  "startColumn": 1,
                  "charOffset": 23231,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "abf4dd1e8107b08b1053882ac09c17f1c7e77d761cfccf0a01c836c1f488810b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "charOffset": 1794,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1768,
                  "charLength": 69,
                  "snippet": {
                    "text": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2969e984c94994cfcfb633d00caaa2c0747f65ab870b793f43828f80a5a8b80"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "charOffset": 1873,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1838,
                  "charLength": 135,
                  "snippet": {
                    "text": "\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f07b67785299463667a73f5bd866d801aefdfc781006cb05eceb6821743c2262"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 3,
                  "charOffset": 2039,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"\"\"Runs the given command and verifies its exit code and output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 2000,
                  "charLength": 154,
                  "snippet": {
                    "text": "\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  # Verifies that 'command' exits with code 1."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a551978209a20203873727c2a88c51b634715d1516e50c8a013d624ce93b0c2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 3,
                  "charOffset": 2110,
                  "charLength": 44,
                  "snippet": {
                    "text": "# Verifies that 'command' exits with code 1."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2037,
                  "charLength": 196,
                  "snippet": {
                    "text": "  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c72a1df1cd6da99124c95f7bc4abc8cf76d4470776465e4c4d0d90327d88ce1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "charOffset": 2157,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2107,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9e2ffb8bb2f273843b5fb0ff42f0176eb0e15068f592f26c5656341ed4a55f6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2200,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2108,
                  "charLength": 207,
                  "snippet": {
                    "text": "  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output)\n  Assert('InitGoogleTest' in p.output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88d7767b1472e821be70f7b5c55991b3fd061397584febb2a7db4618fa1c6978"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 3,
                  "charOffset": 2279,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2198,
                  "charLength": 119,
                  "snippet": {
                    "text": "  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output)\n  Assert('InitGoogleTest' in p.output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "be2db336c3f6e8952980dde3201759486f8d0a232f250f7a3fdede74a359f472"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "charOffset": 2378,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2318,
                  "charLength": 128,
                  "snippet": {
                    "text": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d92c032948676a57dc4d186345e4cbf91714a568a88a97ac12fe1c22784c4b2d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-uninitialized-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 3,
                  "charOffset": 2477,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 2447,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "522452f1c416e65809d606b703d8a88749dfb6d8479e17dbba80c18730e27e1c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 3,
                  "charOffset": 3519,
                  "charLength": 81,
                  "snippet": {
                    "text": "\"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 3501,
                  "charLength": 138,
                  "snippet": {
                    "text": "\ndef Run(args):\n  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n\n  return gtest_test_utils.Subprocess("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac38f43e5dbb053cdb207c1819bf3ecf24c39d80c2eb20fd3a4eb773ff0ebcb4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 3,
                  "charOffset": 3604,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3517,
                  "charLength": 179,
                  "snippet": {
                    "text": "  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n\n  return gtest_test_utils.Subprocess(\n      [EXE_PATH] + args, capture_stderr=False\n  ).output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2ad2a7aba1ee9ac261ea451d1585016373631266fc7a8a975b7f9a8bfeed78de"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "charOffset": 3777,
                  "charLength": 64,
                  "snippet": {
                    "text": "\"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 3717,
                  "charLength": 195,
                  "snippet": {
                    "text": "\nclass GTestListTestsUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "090ded17ed8fccdaed45d0426752844fbf02b6273971832d4b10568cb2e30a95"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "charOffset": 3845,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 3775,
                  "charLength": 204,
                  "snippet": {
                    "text": "  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Run googletest-list-tests-unittest_ and verify the output.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7cb8958319d2f6b0a0bdf4fe4c74e6c1f8d6c338d8c09cc2925531eeba31333b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 7,
                  "charOffset": 4490,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 4456,
                  "charLength": 105,
                  "snippet": {
                    "text": "\n    if flag_value is None:\n      flag = ''\n      flag_expression = 'not set'\n    elif flag_value == '0':"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c08eaeef44779a86fce19fb76149b3f5197ef2332a49a00a61345a8b4dd0d181"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 7,
                  "charOffset": 4506,
                  "charLength": 15,
                  "snippet": {
                    "text": "flag_expression"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4457,
                  "charLength": 144,
                  "snippet": {
                    "text": "    if flag_value is None:\n      flag = ''\n      flag_expression = 'not set'\n    elif flag_value == '0':\n      flag = '--%s=0' % LIST_TESTS_FLAG"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f02d240283fa6dbaf1cfec6e4484891409aab4f89fd0e0768d46adb34542449"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 7,
                  "charOffset": 4568,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 4500,
                  "charLength": 139,
                  "snippet": {
                    "text": "      flag_expression = 'not set'\n    elif flag_value == '0':\n      flag = '--%s=0' % LIST_TESTS_FLAG\n      flag_expression = '0'\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0dd62713a95ed4be9287fbb4676e2a57a9b63bd33a5acb8e145565c8e63cbd2f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 7,
                  "charOffset": 4608,
                  "charLength": 15,
                  "snippet": {
                    "text": "flag_expression"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4534,
                  "charLength": 143,
                  "snippet": {
                    "text": "    elif flag_value == '0':\n      flag = '--%s=0' % LIST_TESTS_FLAG\n      flag_expression = '0'\n    else:\n      flag = '--%s' % LIST_TESTS_FLAG"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7627e729f5348599ea2b5c601bded9999ab22bff6af2e00bdbf0f607fba2c58"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 7,
                  "charOffset": 4646,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4602,
                  "charLength": 104,
                  "snippet": {
                    "text": "      flag_expression = '0'\n    else:\n      flag = '--%s' % LIST_TESTS_FLAG\n      flag_expression = '1'\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50d5d6cd5201f2999aa364ffaed31b19c36e97715a9d0a278f1b2a033b4d884c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 7,
                  "charOffset": 4684,
                  "charLength": 15,
                  "snippet": {
                    "text": "flag_expression"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 4630,
                  "charLength": 94,
                  "snippet": {
                    "text": "    else:\n      flag = '--%s' % LIST_TESTS_FLAG\n      flag_expression = '1'\n\n    args = [flag]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f89d99e22a7673fad96502e1dffb9f0b0df72cbdbcf0419ad03b7c2c42b5c973"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 7,
                  "charOffset": 4763,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4725,
                  "charLength": 82,
                  "snippet": {
                    "text": "\n    if other_flag is not None:\n      args += [other_flag]\n\n    output = Run(args)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88a28d4a4f9aaaf1e59da51beca9b999a6416f33e160b1cecdb293010de2bab7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 7,
                  "charOffset": 4842,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 4808,
                  "charLength": 151,
                  "snippet": {
                    "text": "\n    if expected_output_re:\n      self.assertTrue(\n          expected_output_re.match(output),\n          'when %s is %s, the output of \"%s\" is \"%s\",\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d1dc79b31526d773bdcd5e355aa1d457679f234adbe3e4f338513eed136f529"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 7,
                  "charOffset": 5211,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5187,
                  "charLength": 152,
                  "snippet": {
                    "text": "      )\n    else:\n      self.assertTrue(\n          not EXPECTED_OUTPUT_NO_FILTER_RE.match(output),\n          'when %s is %s, the output of \"%s\" is \"%s\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8883ab50893715770b525a7c2fbe4cba291e4b6802bd8df2d0a694abe5a70d21"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 3,
                  "charOffset": 5423,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 5412,
                  "charLength": 92,
                  "snippet": {
                    "text": "      )\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9dfafdd307ceb446566c99643c7e1d55f4aac0bdc83460f3a017394834a74463"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 3,
                  "charOffset": 5589,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5505,
                  "charLength": 155,
                  "snippet": {
                    "text": "    self.RunAndVerify(flag_value=None, expected_output_re=None, other_flag=None)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_list_tests flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e8f15120a664ac29a0c94792d4b4e99992534ee70298452683992c7d02a821a5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 3,
                  "charOffset": 5879,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 5870,
                  "charLength": 119,
                  "snippet": {
                    "text": "    )\n\n  def testOverrideNonFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests overrides the non-filter flags.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbac736b109e18a210930414d28b1b0ca081a3841b6811da274c66d265a738b4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 3,
                  "charOffset": 6150,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 6141,
                  "charLength": 114,
                  "snippet": {
                    "text": "    )\n\n  def testWithFilterFlags(self):\n    \"\"\"Tests that --gtest_list_tests takes into account the filter flags.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "45f2298e7623122022ff008a5f617150f379c0fc5bee73f4edabaf62e56a4747"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-list-tests-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 3,
                  "charOffset": 6531,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 6501,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca15e84cbdafbe64dbdcd646089a30ea3efec37c161827450ab8a45a049cc829"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 3,
                  "charOffset": 3376,
                  "charLength": 69,
                  "snippet": {
                    "text": "\"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "charOffset": 3348,
                  "charLength": 151,
                  "snippet": {
                    "text": "\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cc2219a15752c56fe861b71aab66b7cecb4c9e520d728c4356c5d7ea4bab1a2b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 3,
                  "charOffset": 3449,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 3374,
                  "charLength": 127,
                  "snippet": {
                    "text": "  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0f66d40a2881924f25153288a28794ad7488adb5acf3a74af9f226972e11d70"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 3,
                  "charOffset": 3538,
                  "charLength": 70,
                  "snippet": {
                    "text": "\"\"\"Removes all file location info from a Google Test program's output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3501,
                  "charLength": 116,
                  "snippet": {
                    "text": "\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2a9a61861bc40e7b03992131fd9efee2c226bf260b52f2be10ebacc8758daf0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 3,
                  "charOffset": 3882,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 3873,
                  "charLength": 112,
                  "snippet": {
                    "text": "  \"\"\"\n\n  return re.sub(\n      r'.*[/\\\\]((googletest-output-test_|gtest).cc)(\\:\\d+|\\(\\d+\\))\\: ',\n      r'\\1:#: ',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "70736686c7bc9c08cf53a8889467958c641cb77cd0fad7b5884443138d2a7702"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 3,
                  "charOffset": 4050,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"\"\"Removes all stack traces from a Google Test program's output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4010,
                  "charLength": 162,
                  "snippet": {
                    "text": "\ndef RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\"."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b92d515d8fa37e0d790c0c6fc595ae51ab48180f1d3c1183084f125be622b3c5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 3,
                  "charOffset": 4121,
                  "charLength": 51,
                  "snippet": {
                    "text": "# *? means \"find the shortest string that matches\"."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4048,
                  "charLength": 213,
                  "snippet": {
                    "text": "  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\".\n  return re.sub(\n      r'Stack trace:(.|\\n)*?\\n\\n', 'Stack trace: (omitted)\\n\\n', output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6b4ccde0ecd44592c567514cf3a682e6fe28db4e7919442e9b2b330bff37fedb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 3,
                  "charOffset": 4175,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 4118,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n  # *? means \"find the shortest string that matches\".\n  return re.sub(\n      r'Stack trace:(.|\\n)*?\\n\\n', 'Stack trace: (omitted)\\n\\n', output\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d5b2f8269430e146b6a8a0844e3c6a09879cbe815f16fa82e782d1441a3f913"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 3,
                  "charOffset": 4301,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4267,
                  "charLength": 166,
                  "snippet": {
                    "text": "\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\"."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8885619ef0a304ea2f5747ee4830c20f1452e9d55792dbc7aafe581164d80545"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 3,
                  "charOffset": 4382,
                  "charLength": 51,
                  "snippet": {
                    "text": "# *? means \"find the shortest string that matches\"."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4299,
                  "charLength": 190,
                  "snippet": {
                    "text": "  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n', '', output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a559acf2a690c85081f9bc2c24bcd0e272606927b4ac7a05dc2e78ecd9e017e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 3,
                  "charOffset": 4436,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4379,
                  "charLength": 111,
                  "snippet": {
                    "text": "\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n', '', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4659304b9c36febcd10d9bac747eb56b3d3705e7ea12211024dfee34403e1b1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 3,
                  "charOffset": 4517,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Removes all time information from a Google Test program's output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4490,
                  "charLength": 145,
                  "snippet": {
                    "text": "\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8340166985d84e9b8cd49173758d56f3ef3f847e0e5e76d99d779f2f149c855"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "charOffset": 4592,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4515,
                  "charLength": 122,
                  "snippet": {
                    "text": "  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7837198899a27629e8d1801c014cf02dfe809eecbb9bdf87c501667305f50313"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 3,
                  "charOffset": 4680,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"\"\"Removes compiler-specific type info from Google Test program's output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4637,
                  "charLength": 125,
                  "snippet": {
                    "text": "\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9fd55411bc6d3ca212c1bd4c76328abf5f6119077a1c741d1435aa2355cfb6cc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 3,
                  "charOffset": 4908,
                  "charLength": 69,
                  "snippet": {
                    "text": "# some compilers output the name of type 'unsigned int' as 'unsigned'"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 4899,
                  "charLength": 137,
                  "snippet": {
                    "text": "  \"\"\"\n\n  # some compilers output the name of type 'unsigned int' as 'unsigned'\n  return re.sub(r'unsigned int', 'unsigned', test_output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6ee08c3df41f7abd9821bc524902c7ca2d73aa532d6f0b738a00145cc52cb14"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 3,
                  "charOffset": 4980,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 4905,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n  # some compilers output the name of type 'unsigned int' as 'unsigned'\n  return re.sub(r'unsigned int', 'unsigned', test_output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "932c446bf32a9d2e9e481c8c472b5c3e96dcd7eeea52837eccc93eb77cd4bec9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 3,
                  "charOffset": 5085,
                  "charLength": 72,
                  "snippet": {
                    "text": "\"\"\"Normalizes platform specific output details for easier comparison.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 5037,
                  "charLength": 138,
                  "snippet": {
                    "text": "\ndef NormalizeToCurrentPlatform(test_output):\n  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n\n  if IS_WINDOWS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "01f1ddd5c01086c2778669d79469d4058137b774d630de90f1cede17bafeed64"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 3,
                  "charOffset": 5161,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 5083,
                  "charLength": 222,
                  "snippet": {
                    "text": "  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n\n  if IS_WINDOWS:\n    # Removes the color information that is not present on Windows.\n    test_output = re.sub('\\x1b\\\\[(0;3\\d)?m', '', test_output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db0d900835162a15e5e9f7dceda4adfc655f7232e5bb904b6a6a4e4a25065c45"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: W605 invalid escape sequence '\\d'",
            "markdown": "PEP 8: W605 invalid escape sequence '\\\\d'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 26,
                  "charOffset": 5269,
                  "charLength": 18,
                  "snippet": {
                    "text": "'\\x1b\\\\[(0;3\\d)?m'"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 5159,
                  "charLength": 277,
                  "snippet": {
                    "text": "  if IS_WINDOWS:\n    # Removes the color information that is not present on Windows.\n    test_output = re.sub('\\x1b\\\\[(0;3\\d)?m', '', test_output)\n    # Changes failure message headers into the Windows format.\n    test_output = re.sub(r': Failure\\n', r': error: ', test_output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78bd5075ccaaa6923892b7f854132b3c90762f5a41788537799a69b59d6df5d8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 3,
                  "charOffset": 5567,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 167,
                  "startColumn": 1,
                  "charOffset": 5490,
                  "charLength": 97,
                  "snippet": {
                    "text": "    test_output = re.sub(r'((\\w|\\.)+)\\((\\d+)\\):', r'\\1:\\3:', test_output)\n\n  return test_output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe4c38fd93766e80f533b2ad08535129b20c645e653da30e79149bd9210d384b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 3,
                  "charOffset": 5620,
                  "charLength": 62,
                  "snippet": {
                    "text": "\"\"\"Removes test counts from a Google Test program's output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5587,
                  "charLength": 176,
                  "snippet": {
                    "text": "\ndef RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "994c1fdcecb5c0f2d57daed74d663ea64ab7e3a112d7a718230f618c7067b97c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 3,
                  "charOffset": 5686,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 5618,
                  "charLength": 229,
                  "snippet": {
                    "text": "  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3b624297e76b4592cad97ac40a0171a81f5b42960b6d46126e4b87b49c47f59"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 3,
                  "charOffset": 5766,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 5683,
                  "charLength": 242,
                  "snippet": {
                    "text": "\n  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5fd8e2f422c6a26a08a504f7ea47b0a97f07c10eb62dcbe8960fef2721ea6506"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 3,
                  "charOffset": 5831,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5684,
                  "charLength": 245,
                  "snippet": {
                    "text": "  output = re.sub(r'\\d+ tests?, listed below', '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS', '? FAILED TESTS', output)\n  output = re.sub(\n      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbabbcf9db097ddbb33ddb7291db3d1709a036acbb33ace220798c273d2a3c6e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 3,
                  "charOffset": 5932,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5848,
                  "charLength": 213,
                  "snippet": {
                    "text": "      r'\\d+ tests? from \\d+ test cases?', '? tests from ? test cases', output\n  )\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])', r'? tests from \\1', output)\n  return re.sub(r'\\d+ tests?\\.', '? tests.', output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9096de27628a5911cac5f7161e21681ca0253dc428b3c3acb6a3499e75f0960a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 3,
                  "charOffset": 6010,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 5926,
                  "charLength": 136,
                  "snippet": {
                    "text": "  )\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])', r'? tests from \\1', output)\n  return re.sub(r'\\d+ tests?\\.', '? tests.', output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dbdff8905a075bc1fdf21c8d23c130aa1aa4be5f2fd54cd48ebf4f01cabb405d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 3,
                  "charOffset": 6112,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"\"\"Removes output of specified tests from a Google Test program's output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 6062,
                  "charLength": 201,
                  "snippet": {
                    "text": "\ndef RemoveMatchingTests(test_output, pattern):\n  \"\"\"Removes output of specified tests from a Google Test program's output.\n\n  This function strips not only the beginning and the end of a test but also"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "887ecd37d726cbbb080649b7f072c5755a93f7a0272d1b375e20efef5d93d0a0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 3,
                  "charOffset": 6550,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 6541,
                  "charLength": 133,
                  "snippet": {
                    "text": "  \"\"\"\n\n  test_output = re.sub(\n      r'.*\\[ RUN      \\] .*%s(.|\\n)*?\\[(  FAILED  |       OK )\\] .*%s.*\\n'\n      % (pattern, pattern),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6f5b199af1d1cf243880113446ebe154a08519dd9f0d1b76cb92d3714f24356"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 3,
                  "charOffset": 6710,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 6685,
                  "charLength": 80,
                  "snippet": {
                    "text": "      test_output,\n  )\n  return re.sub(r'.*%s.*\\n' % pattern, '', test_output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa39ed5ebf3eb9b71c4be1336f5fc6670ba56319c36a43cda90e2aac39cb39e3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 3,
                  "charOffset": 6797,
                  "charLength": 68,
                  "snippet": {
                    "text": "\"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 207,
                  "startColumn": 1,
                  "charOffset": 6765,
                  "charLength": 137,
                  "snippet": {
                    "text": "\ndef NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n\n  output = ToUnixLineEnding(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2c4dd6b5d5b70aa9c6018a12ee252f0c7f6673e2cfa001155c6797aa860096f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 3,
                  "charOffset": 6869,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 6795,
                  "charLength": 185,
                  "snippet": {
                    "text": "  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ba379f6969bb0bf687c1be30691b4ab1174e5c07b333707d968d0a15b97e236"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 3,
                  "charOffset": 6905,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 6866,
                  "charLength": 144,
                  "snippet": {
                    "text": "\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "40578c17aa5e7b35b6170148e9e3a1928b6d42e5263af58874bce5d001fbd996"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 3,
                  "charOffset": 6940,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 6867,
                  "charLength": 159,
                  "snippet": {
                    "text": "  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "613ecb5d989a8d5f80a87088db9b27415e84494d9110ce6722ae9bd9f00a1469"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 3,
                  "charOffset": 6983,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 212,
                  "startColumn": 1,
                  "charOffset": 6903,
                  "charLength": 124,
                  "snippet": {
                    "text": "  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "021f2f3e1ac9e22c8fd0a0a6108e078bcb7baeb259bf57bc74fd61534bc940d7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 3,
                  "charOffset": 7013,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 6938,
                  "charLength": 90,
                  "snippet": {
                    "text": "  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d36ea3641241d0862c429bea43cdf64aacec00e2bb69d7ee2ecf45dbe54b568a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 3,
                  "charOffset": 7067,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Runs a command in a sub-process, and returns its output in a string."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 7028,
                  "charLength": 119,
                  "snippet": {
                    "text": "\ndef GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46cebffbf4a8169d2f50a08561f5f3b5b797b837ed110a9e9cf0145a1b77acfc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 3,
                  "charOffset": 7419,
                  "charLength": 70,
                  "snippet": {
                    "text": "# Spawns cmd in a sub-process, and gets its standard I/O file objects."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 7410,
                  "charLength": 152,
                  "snippet": {
                    "text": "  \"\"\"\n\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "463129b53a016e43771d709d634ed3f712d34d40334cf6a182f7a5418a5b5ffe"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 3,
                  "charOffset": 7492,
                  "charLength": 40,
                  "snippet": {
                    "text": "# Set and save the environment properly."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 7416,
                  "charLength": 175,
                  "snippet": {
                    "text": "\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e75e500d9ec9e315d6343255bedab701fdbaa809d51636923073d3e80d9185eb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 3,
                  "charOffset": 7535,
                  "charLength": 7,
                  "snippet": {
                    "text": "environ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 7417,
                  "charLength": 233,
                  "snippet": {
                    "text": "  # Spawns cmd in a sub-process, and gets its standard I/O file objects.\n  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "85db188d69f566b21420ca3f67b491c3d332366debd040e8314fbd79a1e69a0b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 3,
                  "charOffset": 7565,
                  "charLength": 7,
                  "snippet": {
                    "text": "environ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 1,
                  "charOffset": 7490,
                  "charLength": 161,
                  "snippet": {
                    "text": "  # Set and save the environment properly.\n  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "18bedec2cb57e1560584c8408388a883888f329deccb9ba76990e0e818b50ef7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 3,
                  "charOffset": 7594,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 7533,
                  "charLength": 136,
                  "snippet": {
                    "text": "  environ = os.environ.copy()\n  environ.update(env_cmd[0])\n  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n\n  return p.output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "94d74a2415eca1ba1f76cc3a9362ae8778d4768bf650959b3a186d7d7ac5d14b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 3,
                  "charOffset": 7654,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 7592,
                  "charLength": 79,
                  "snippet": {
                    "text": "  p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n\n  return p.output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71303590a0fd23a7933432c50cf1495d024d47a86c2dbbfbe8cecd64fa8ee500"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 3,
                  "charOffset": 7705,
                  "charLength": 78,
                  "snippet": {
                    "text": "\"\"\"Runs a command and returns output with all file location info stripped off."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 7671,
                  "charLength": 121,
                  "snippet": {
                    "text": "\ndef GetCommandOutput(env_cmd):\n  \"\"\"Runs a command and returns output with all file location info stripped off.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8c3603fa4b70d24fda622f20803039e39a1d619a4cadad68ef996675304d184"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 3,
                  "charOffset": 8101,
                  "charLength": 40,
                  "snippet": {
                    "text": "# Disables exception pop-ups on Windows."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 250,
                  "startColumn": 1,
                  "charOffset": 8092,
                  "charLength": 140,
                  "snippet": {
                    "text": "  \"\"\"\n\n  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80e36faade829c9ac1c4d6f0a350f04ebde074b00c941ce1ca40e59a9c05d250"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 3,
                  "charOffset": 8144,
                  "charLength": 7,
                  "snippet": {
                    "text": "environ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 8098,
                  "charLength": 181,
                  "snippet": {
                    "text": "\n  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "356dd63cadd2aad5e224e540106ae125ff5a895ce94b0360583c6b381bc49a6b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 3,
                  "charOffset": 8173,
                  "charLength": 7,
                  "snippet": {
                    "text": "environ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "charOffset": 8099,
                  "charLength": 248,
                  "snippet": {
                    "text": "  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'\n  return NormalizeOutput(GetShellCommandOutput((environ, cmdline)))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4083e1192d61c7f801ac50c063b711508c10dd8d908c3ce7c6bd1e5b8b0a426"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 3,
                  "charOffset": 8235,
                  "charLength": 7,
                  "snippet": {
                    "text": "environ"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 8142,
                  "charLength": 206,
                  "snippet": {
                    "text": "  environ, cmdline = env_cmd\n  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'\n  return NormalizeOutput(GetShellCommandOutput((environ, cmdline)))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "197f3b4430e7fdaa2a5ac76efdbbd5cf72951eb87702462a030b1901d5857833"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 3,
                  "charOffset": 8282,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 8171,
                  "charLength": 178,
                  "snippet": {
                    "text": "  environ = dict(environ)  # Ensures we are modifying a copy.\n  environ[CATCH_EXCEPTIONS_ENV_VAR_NAME] = '1'\n  return NormalizeOutput(GetShellCommandOutput((environ, cmdline)))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8de1ba00cceeaba8e0d9217ce385fe73a8c7b5538f5ff52832aa813547f509b3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 3,
                  "charOffset": 8382,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Returns concatenated output from several representative commands.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 258,
                  "startColumn": 1,
                  "charOffset": 8349,
                  "charLength": 116,
                  "snippet": {
                    "text": "\ndef GetOutputOfAllCommands():\n  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n\n  return ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b6508a64ccefec232412ab9a2b67c831a59fb696cc0a507fa93156dd0e39d70"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 3,
                  "charOffset": 8457,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 260,
                  "startColumn": 1,
                  "charOffset": 8380,
                  "charLength": 172,
                  "snippet": {
                    "text": "  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n\n  return (\n      GetCommandOutput(COMMAND_WITH_COLOR)\n      + GetCommandOutput(COMMAND_WITH_TIME)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a77141a0baaf0fac131a340bbd0cb9d7ecc83b38342ef1d922d13434fe00b400"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 3,
                  "charOffset": 9131,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 9078,
                  "charLength": 198,
                  "snippet": {
                    "text": "class GTestOutputTest(gtest_test_utils.TestCase):\n\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "719c403fa109a53fa4ca664da933be859c59f21a05e5d3b5aa195735b012f3d2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 7,
                  "charOffset": 9217,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 286,
                  "startColumn": 1,
                  "charOffset": 9129,
                  "charLength": 246,
                  "snippet": {
                    "text": "  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "474e218e6ccd15d972f0e40b57c2a8b9b9e2180f3ca42ee6eb674e9973644c61"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 7,
                  "charOffset": 9316,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 9211,
                  "charLength": 310,
                  "snippet": {
                    "text": "      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59567065a885fc0952d67de97302bd6bda612c2e1d9ab8a085ab040ad5c7a143"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 7,
                  "charOffset": 9382,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 9277,
                  "charLength": 273,
                  "snippet": {
                    "text": "    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6781b1f299a6f16c4eef62af45f18dda799c7f9c9ad162a55c830bc5e1f2a44d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 7,
                  "charOffset": 9453,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 9310,
                  "charLength": 281,
                  "snippet": {
                    "text": "      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:\n      test_output = RemoveMatchingTests("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee6f207df8c64b2809b92bc65eda59b0b113750d2b71f9a8e5335da1e9e3f84d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 7,
                  "charOffset": 9557,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 292,
                  "startColumn": 1,
                  "charOffset": 9447,
                  "charLength": 206,
                  "snippet": {
                    "text": "      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:\n      test_output = RemoveMatchingTests(\n          test_output, 'ExpectFailureWithThreadsTest'\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a947cc2241bab0f792ca74b8987a0bdf1f18a48f61ff443afe14ba572e24416"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 7,
                  "charOffset": 9660,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 295,
                  "startColumn": 1,
                  "charOffset": 9592,
                  "charLength": 172,
                  "snippet": {
                    "text": "          test_output, 'ExpectFailureWithThreadsTest'\n      )\n      test_output = RemoveMatchingTests(\n          test_output, 'ScopedFakeTestPartResultReporterTest'\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f13e296b5ca50e03544b0c8d00acdfb2601e81b1c4bf915f3dacd8fce961bc83"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 7,
                  "charOffset": 9771,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 9695,
                  "charLength": 228,
                  "snippet": {
                    "text": "          test_output, 'ScopedFakeTestPartResultReporterTest'\n      )\n      test_output = RemoveMatchingTests(test_output, 'WorksConcurrently')\n    if not SUPPORTS_STACK_TRACES:\n      test_output = RemoveStackTraces(test_output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3e34d2a3fec8aea8e075bdf338ab783ea1d80b7d2a70bc8bbc971df839f6da9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 7,
                  "charOffset": 9879,
                  "charLength": 11,
                  "snippet": {
                    "text": "test_output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 9765,
                  "charLength": 182,
                  "snippet": {
                    "text": "      test_output = RemoveMatchingTests(test_output, 'WorksConcurrently')\n    if not SUPPORTS_STACK_TRACES:\n      test_output = RemoveStackTraces(test_output)\n\n    return test_output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "41c48a9f0fc3876265c9957eea513ce0b1bdfe8f373b923be4c8e1eb76099790"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 3,
                  "charOffset": 9951,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 304,
                  "startColumn": 1,
                  "charOffset": 9925,
                  "charLength": 86,
                  "snippet": {
                    "text": "    return test_output\n\n  def testOutput(self):\n    output = GetOutputOfAllCommands()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78e4e6ddd787f0ad6976ed88ff4f1cd62e9053c68932c5692d7763a5b0b7d731"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 7,
                  "charOffset": 10684,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 323,
                  "startColumn": 1,
                  "charOffset": 10644,
                  "charLength": 115,
                  "snippet": {
                    "text": "\n    if CAN_GENERATE_GOLDEN_FILE:\n      self.assertEqual(\n          normalized_golden,\n          normalized_actual,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b4d0c47953a1c46ccdfdd36733445c679bab7c2266716494ceb42072edd256b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 7,
                  "charOffset": 11024,
                  "charLength": 17,
                  "snippet": {
                    "text": "normalized_actual"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 1,
                  "charOffset": 11000,
                  "charLength": 125,
                  "snippet": {
                    "text": "      )\n    else:\n      normalized_actual = NormalizeToCurrentPlatform(\n          RemoveTestCounts(normalized_actual)\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1dfb94db853884a2b4cb56c02e055f4e320639483c9230e85992d3103c401bc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 7,
                  "charOffset": 11132,
                  "charLength": 17,
                  "snippet": {
                    "text": "normalized_golden"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 339,
                  "startColumn": 1,
                  "charOffset": 11072,
                  "charLength": 190,
                  "snippet": {
                    "text": "          RemoveTestCounts(normalized_actual)\n      )\n      normalized_golden = NormalizeToCurrentPlatform(\n          RemoveTestCounts(self.RemoveUnsupportedTests(normalized_golden))\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2d39d26bbcdd71e391278cc681e3700d0453815f71d7994fac1a5f7627160ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 7,
                  "charOffset": 11270,
                  "charLength": 65,
                  "snippet": {
                    "text": "# This code is very handy when debugging golden file differences:"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 343,
                  "startColumn": 1,
                  "charOffset": 11255,
                  "charLength": 141,
                  "snippet": {
                    "text": "      )\n\n      # This code is very handy when debugging golden file differences:\n      if os.getenv('DEBUG_GTEST_OUTPUT_TEST'):\n        open("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f678c18da0012f3957c8062a4ca575d29e186e9a0513f443e4621b56a7c674ef"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 7,
                  "charOffset": 11342,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 344,
                  "startColumn": 1,
                  "charOffset": 11263,
                  "charLength": 159,
                  "snippet": {
                    "text": "\n      # This code is very handy when debugging golden file differences:\n      if os.getenv('DEBUG_GTEST_OUTPUT_TEST'):\n        open(\n            os.path.join("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d06e1ec338c0336ccaaddee4cabd466688eca92e01f922953cf648f74bdc934b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 7,
                  "charOffset": 11834,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 360,
                  "startColumn": 1,
                  "charOffset": 11792,
                  "charLength": 98,
                  "snippet": {
                    "text": "        ).write(normalized_golden)\n\n      self.assertEqual(normalized_golden, normalized_actual)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "596159039aa4dcc3e7893c7e464399b6b4c1d294811f3411548caa1e299e6fe0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 3,
                  "charOffset": 11920,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 364,
                  "startColumn": 1,
                  "charOffset": 11890,
                  "charLength": 169,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  if NO_STACKTRACE_SUPPORT_FLAG in sys.argv:\n    # unittest.main() can't handle unknown flags\n    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ff8c06aedb8716cb0b1523b0c2eab5cb8061162e4c69adc9e43c99265475474"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 3,
                  "charOffset": 12063,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 368,
                  "startColumn": 1,
                  "charOffset": 12012,
                  "charLength": 154,
                  "snippet": {
                    "text": "    sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n\n  if GENGOLDEN_FLAG in sys.argv:\n    if CAN_GENERATE_GOLDEN_FILE:\n      output = GetOutputOfAllCommands()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "219ee9c7890c1f68319f5ab26355597e46c8f25c7fd9aca17a51a35dd074a84e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 7,
                  "charOffset": 12133,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 370,
                  "startColumn": 1,
                  "charOffset": 12061,
                  "charLength": 190,
                  "snippet": {
                    "text": "  if GENGOLDEN_FLAG in sys.argv:\n    if CAN_GENERATE_GOLDEN_FILE:\n      output = GetOutputOfAllCommands()\n      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71c5220f7d0b942129a22960ec227fa84c6828281d22c90f239a45a1729c15eb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 7,
                  "charOffset": 12173,
                  "charLength": 11,
                  "snippet": {
                    "text": "golden_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 371,
                  "startColumn": 1,
                  "charOffset": 12094,
                  "charLength": 183,
                  "snippet": {
                    "text": "    if CAN_GENERATE_GOLDEN_FILE:\n      output = GetOutputOfAllCommands()\n      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())\n      golden_file.close()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd064a46bdd9c5b4b18a64e73016fd90956ea11b7fd05eed1f8bac9b9d84141f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 7,
                  "charOffset": 12217,
                  "charLength": 11,
                  "snippet": {
                    "text": "golden_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 372,
                  "startColumn": 1,
                  "charOffset": 12127,
                  "charLength": 160,
                  "snippet": {
                    "text": "      output = GetOutputOfAllCommands()\n      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())\n      golden_file.close()\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5538356d1a8645ad105e86f005e308f6825bf97646e3bff5efd5c9ea529b4a6f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 7,
                  "charOffset": 12258,
                  "charLength": 11,
                  "snippet": {
                    "text": "golden_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 373,
                  "startColumn": 1,
                  "charOffset": 12167,
                  "charLength": 201,
                  "snippet": {
                    "text": "      golden_file = open(GOLDEN_PATH, 'wb')\n      golden_file.write(output.encode())\n      golden_file.close()\n    else:\n      message = \"\"\"Unable to write a golden file when compiled in an environment"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "87b7d3b3316ada04d398b05fec8ebbcc56197ae46fca64fc27d2328669e60582"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 7,
                  "charOffset": 12294,
                  "charLength": 7,
                  "snippet": {
                    "text": "message"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 375,
                  "startColumn": 1,
                  "charOffset": 12252,
                  "charLength": 228,
                  "snippet": {
                    "text": "      golden_file.close()\n    else:\n      message = \"\"\"Unable to write a golden file when compiled in an environment\nthat does not support all the required features (death tests,\ntyped tests, stack traces, and multiple threads)."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5be38e6cdd44b27d2d9a4f528a8249040e58726ff6e1835d092fecb82a10731e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 7,
                  "charOffset": 12565,
                  "charLength": 3,
                  "snippet": {
                    "text": "sys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12481,
                  "charLength": 135,
                  "snippet": {
                    "text": "Please build this test and generate the golden file using Blaze on Linux.\"\"\"\n\n      sys.stderr.write(message)\n      sys.exit(1)\n  else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd5fe14b60142c231cda2cca2131f65e8dcc9c4338892ce1fd4e4a4efdc01001"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 7,
                  "charOffset": 12597,
                  "charLength": 3,
                  "snippet": {
                    "text": "sys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 12558,
                  "charLength": 86,
                  "snippet": {
                    "text": "\n      sys.stderr.write(message)\n      sys.exit(1)\n  else:\n    gtest_test_utils.Main()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c9ee1a39f5909ab74edf5ab7a2ec8ee0947c1e07c0dcd6b207f45f260ac4bc2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-output-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 3,
                  "charOffset": 12611,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 382,
                  "startColumn": 1,
                  "charOffset": 12559,
                  "charLength": 86,
                  "snippet": {
                    "text": "      sys.stderr.write(message)\n      sys.exit(1)\n  else:\n    gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "970ce99faad0edaa5f010fbc917045aa461c3eaa5af91a40dc39caa9c9acad65"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "charOffset": 1914,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1879,
                  "charLength": 135,
                  "snippet": {
                    "text": "\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd24503e50222303dfc5780a6e21c7d1df81535cf719b795c698e727223a49a2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 3,
                  "charOffset": 2075,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 2041,
                  "charLength": 130,
                  "snippet": {
                    "text": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a83f96cc80d2e377f4e4dfcfe45475fbbef806c7ecad370c2b6e5384a2863514"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 3,
                  "charOffset": 2150,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2073,
                  "charLength": 154,
                  "snippet": {
                    "text": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3282989be81247fef03dc25b5ce3fb8c8336f73c66a01cb990af31caa7b1f7ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2203,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2148,
                  "charLength": 105,
                  "snippet": {
                    "text": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3006625fd31fba30f00a93e525638212be7ea1a2f1d01b217e218abb57dd9210"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2276,
                  "charLength": 59,
                  "snippet": {
                    "text": "\"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2254,
                  "charLength": 101,
                  "snippet": {
                    "text": "\ndef GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n\n  args = [COMMAND]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3bde8104c117ac30685aed0b65ac5dbdd26b5d63daf930cacdff24ddd0491f2e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "charOffset": 2339,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2274,
                  "charLength": 123,
                  "snippet": {
                    "text": "  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n\n  args = [COMMAND]\n  if flag is not None:\n    args += [flag]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8878c809b8bd951a95beb1874da2c5b543e8439b20ca2596c245247d3075c34e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "charOffset": 2358,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 2336,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n  args = [COMMAND]\n  if flag is not None:\n    args += [flag]\n  return gtest_test_utils.Subprocess(args, env=environ).output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d8619d90f873da01e307d07ee11f74a6e1724483028d97576dd15767c7b28c04"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 3,
                  "charOffset": 2400,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2356,
                  "charLength": 106,
                  "snippet": {
                    "text": "  if flag is not None:\n    args += [flag]\n  return gtest_test_utils.Subprocess(args, env=environ).output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a4cc161f54f7b8b3af9aa3aa58fe7cad974eb0c3c26e9314ccb94f252a739b5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 3,
                  "charOffset": 2508,
                  "charLength": 76,
                  "snippet": {
                    "text": "\"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2462,
                  "charLength": 159,
                  "snippet": {
                    "text": "\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "703d9da3e3edeb6de243eaa1d33747ef3ce5d4eef4e0fed80ec64b17af339ee0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 3,
                  "charOffset": 2588,
                  "charLength": 7,
                  "snippet": {
                    "text": "env_var"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 2506,
                  "charLength": 182,
                  "snippet": {
                    "text": "  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "05e650d32ab9b6b0c7f256503d2cf8d49cba66b453be68ab285ba8d778c642c1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 3,
                  "charOffset": 2624,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2585,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce996c247f21ae0f04f5e9da794edfd0441813073b0267f061312d5e0a0cc31d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 3,
                  "charOffset": 2655,
                  "charLength": 8,
                  "snippet": {
                    "text": "AssertEq"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2586,
                  "charLength": 168,
                  "snippet": {
                    "text": "  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7904f80a86b175e0bf2c22cf3fe7c99be35871f9600ed83df8481dbad47c9e8e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 3,
                  "charOffset": 2691,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2622,
                  "charLength": 133,
                  "snippet": {
                    "text": "  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "391c98925488242be19580b0d007c42dc617bea19b911e8720620e0dcda37c59"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "charOffset": 2718,
                  "charLength": 8,
                  "snippet": {
                    "text": "AssertEq"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2653,
                  "charLength": 103,
                  "snippet": {
                    "text": "  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37cbf0d68f0a7e00f54f6417ea7818007ab1bb39373eb85e957e1b8e13eabeee"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "charOffset": 2810,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2757,
                  "charLength": 166,
                  "snippet": {
                    "text": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5a8a31faf515076043f8daa0e41c46edf1dd1fae1170a1883e22c98f0479922b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "charOffset": 3538,
                  "charLength": 8,
                  "snippet": {
                    "text": "TestFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 3514,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n    if IS_LINUX:\n      TestFlag('death_test_use_fork', '1', '0')\n      TestFlag('stack_trace_depth', '0', '100')\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c0989ecc45ce075e10bdb4c296d1a7b5fb15865492d225ea8a00825fcef8a78"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "charOffset": 3586,
                  "charLength": 8,
                  "snippet": {
                    "text": "TestFlag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3515,
                  "charLength": 144,
                  "snippet": {
                    "text": "    if IS_LINUX:\n      TestFlag('death_test_use_fork', '1', '0')\n      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de64d360fe622ace9db09414dc708f7dd0328cb22ea4fe0762aca517c7ca67e9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 3,
                  "charOffset": 3631,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3580,
                  "charLength": 143,
                  "snippet": {
                    "text": "      TestFlag('stack_trace_depth', '0', '100')\n\n  def testXmlOutputFile(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE affects the output flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4c65979a3c807d10ee91620ec9b6a7181d2d87d7aded053faf62af10184804d8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 3,
                  "charOffset": 3862,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3808,
                  "charLength": 161,
                  "snippet": {
                    "text": "    AssertEq('xml:tmp/bar.xml', GetFlag('output'))\n\n  def testXmlOutputFileOverride(self):\n    \"\"\"Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d09a1ba28cef2c2d30f25ae01ba5a1a40e1bdbf57cc0a309ec59dd9d3eb0091"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-env-var-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 3,
                  "charOffset": 4149,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 4119,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "649d4fabeb7cdfd469be6396d7848ab61a0a07db2aee2bda49a05c8d75a6701a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "charOffset": 1984,
                  "charLength": 51,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns its output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1946,
                  "charLength": 128,
                  "snippet": {
                    "text": "\ndef RunAndReturnOutput(args=None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17558f5b163062e5381abcbf0b28e86f6f0c00e25a058991c94a0fa8cbbe1f01"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "charOffset": 2039,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1982,
                  "charLength": 150,
                  "snippet": {
                    "text": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  return gtest_test_utils.Subprocess(\n      [\n          gtest_test_utils.GetTestExecutablePath("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c07a4b7262454db95f5f43473e50451805c80bffb81233544a8c6482773087d5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 3,
                  "charOffset": 2310,
                  "charLength": 45,
                  "snippet": {
                    "text": "\"\"\"Tests global test environment failures.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2242,
                  "charLength": 153,
                  "snippet": {
                    "text": "\nclass GTestGlobalEnvironmentUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests global test environment failures.\"\"\"\n\n  def testEnvironmentSetUpFails(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4095a2adb5279fa9e481e507f95253072da1dec4869fb5fb9a2c048d590beecb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2359,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2308,
                  "charLength": 150,
                  "snippet": {
                    "text": "  \"\"\"Tests global test environment failures.\"\"\"\n\n  def testEnvironmentSetUpFails(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bff1070694535cc9e66ad3cff98394f62f4c240d4645d6ed90e4f0c83fa5c560"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 3,
                  "charOffset": 2915,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2867,
                  "charLength": 172,
                  "snippet": {
                    "text": "    self.assertNotIn('Unexpected call', txt)\n\n  def testEnvironmentSetUpAndTornDownForEachRepeat(self):\n    \"\"\"Tests the behavior of test environments and gtest_repeat.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f226a5ae227be091c2e1fe498f566c82aa77055431695d9e8f024f52ec30f949"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 3,
                  "charOffset": 3878,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3831,
                  "charLength": 172,
                  "snippet": {
                    "text": "    self.assertRegex(txt, expected_pattern)\n\n  def testEnvironmentSetUpAndTornDownOnce(self):\n    \"\"\"Tests environment and --gtest_recreate_environments_when_repeating.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1416586de8280ec846c088fbbe960cd0e49443d313091c2dad78913cca54bdb1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-global-environment-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "charOffset": 4865,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4835,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "82c909dcf2446ed3e2fcf6506e083c2822471e3340764a6d0de2af0d844531c6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_skip_check_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "charOffset": 2019,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1956,
                  "charLength": 232,
                  "snippet": {
                    "text": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipped\\nskipping single test\\n', OUTPUT)\n    skip_fixture = 'Skipped\\nskipping all tests for this fixture\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "783fe8262ed33de4c3dcea96dcb7463dffb364d5572387e2cd5d0b23f3a447e8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_skip_check_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 3,
                  "charOffset": 2393,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 2363,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d8747d7c753308ac33c5b7d9b59a35fe935fef037e8f40cceefb192015ab168"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 3,
                  "charOffset": 3128,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 3094,
                  "charLength": 130,
                  "snippet": {
                    "text": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b850429b0cafbc146d357110dc1a4cf2f6c744b77dc51375d4342db60cf2e933"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 3,
                  "charOffset": 3203,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 3126,
                  "charLength": 154,
                  "snippet": {
                    "text": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e275f106eb65086d77fc6066a493c6bbcab544404c2663a7c7ab4fda58a3366"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 3,
                  "charOffset": 3256,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3201,
                  "charLength": 105,
                  "snippet": {
                    "text": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cff62fc43d3fe1cef0818ea220cac045d452cf00c26cabdb55a10dfed2ec843a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 3,
                  "charOffset": 3387,
                  "charLength": 51,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns its output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 3307,
                  "charLength": 144,
                  "snippet": {
                    "text": "\ndef RunAndReturnOutput(test_suite=None, fail_fast=None, run_disabled=False):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  args = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b9a88c2e96077cbdab729c38de9785f984ec4dde8b77b40fd8fb3508b39ad91"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 3,
                  "charOffset": 3442,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3385,
                  "charLength": 159,
                  "snippet": {
                    "text": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  args = []\n  xml_path = os.path.join(\n      gtest_test_utils.GetTempDir(), '.GTestFailFastUnitTest.xml'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "906c5448878c234d0b72786b8f688b68710fcbeef3f950e1f75058547cded407"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "charOffset": 3454,
                  "charLength": 8,
                  "snippet": {
                    "text": "xml_path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3439,
                  "charLength": 109,
                  "snippet": {
                    "text": "\n  args = []\n  xml_path = os.path.join(\n      gtest_test_utils.GetTempDir(), '.GTestFailFastUnitTest.xml'\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d18aa50706954d1764ea6ff1e25da0e38393acf12ecf3f1dc2d10d1d06aebd8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 3,
                  "charOffset": 3551,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 3479,
                  "charLength": 177,
                  "snippet": {
                    "text": "      gtest_test_utils.GetTempDir(), '.GTestFailFastUnitTest.xml'\n  )\n  args += ['--gtest_output=xml:' + xml_path]\n  if fail_fast is not None:\n    if isinstance(fail_fast, str):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "788da06d6e59053ea1c0aa569163e1bc44fceb47e73a38145dc0608a9e4e0099"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 3,
                  "charOffset": 3596,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 3545,
                  "charLength": 167,
                  "snippet": {
                    "text": "  )\n  args += ['--gtest_output=xml:' + xml_path]\n  if fail_fast is not None:\n    if isinstance(fail_fast, str):\n      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1966a1d0197271cac67bc20a05de1bcc80e3fcfb916e64db231cd68b31b2db2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "charOffset": 3663,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3594,
                  "charLength": 178,
                  "snippet": {
                    "text": "  if fail_fast is not None:\n    if isinstance(fail_fast, str):\n      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]\n    elif fail_fast:\n      args += ['--%s' % FAIL_FAST_FLAG]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a6f51f0a2f19354c526ad49020f4dc260f2802bbb1faf975fe5eae04f9c0622e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 7,
                  "charOffset": 3739,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3657,
                  "charLength": 167,
                  "snippet": {
                    "text": "      args += ['--%s=%s' % (FAIL_FAST_FLAG, fail_fast)]\n    elif fail_fast:\n      args += ['--%s' % FAIL_FAST_FLAG]\n    else:\n      args += ['--no%s' % FAIL_FAST_FLAG]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f74d1bf2617a1cfcda8752579dde3844932a52b404f80c63339460a4a307b23f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 7,
                  "charOffset": 3789,
                  "charLength": 4,
                  "snippet": {
                    "text": "args"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3733,
                  "charLength": 162,
                  "snippet": {
                    "text": "      args += ['--%s' % FAIL_FAST_FLAG]\n    else:\n      args += ['--no%s' % FAIL_FAST_FLAG]\n  if test_suite:\n    args += ['--%s=%s.*' % (FILTER_FLAG, test_suite)]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "419566af5992be8e4851ab0a16335fb02a5e89a0334231d022fbb15be746d105"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 3,
                  "charOffset": 3827,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3773,
                  "charLength": 141,
                  "snippet": {
                    "text": "    else:\n      args += ['--no%s' % FAIL_FAST_FLAG]\n  if test_suite:\n    args += ['--%s=%s.*' % (FILTER_FLAG, test_suite)]\n  if run_disabled:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d39ffc9bc6a216883032a7fe76fd3ead1d80cb3ed433ecee7db8dcee7fae3d86"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 3,
                  "charOffset": 3898,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3825,
                  "charLength": 208,
                  "snippet": {
                    "text": "  if test_suite:\n    args += ['--%s=%s.*' % (FILTER_FLAG, test_suite)]\n  if run_disabled:\n    args += ['--%s' % RUN_DISABLED_FLAG]\n  txt_out = gtest_test_utils.Subprocess([COMMAND] + args, env=environ).output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf30b295a3629d8050d2bf35eb7ff016f7bf036e5b9411c83f2e528fc1b560b4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 3,
                  "charOffset": 3958,
                  "charLength": 7,
                  "snippet": {
                    "text": "txt_out"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3896,
                  "charLength": 208,
                  "snippet": {
                    "text": "  if run_disabled:\n    args += ['--%s' % RUN_DISABLED_FLAG]\n  txt_out = gtest_test_utils.Subprocess([COMMAND] + args, env=environ).output\n  with open(xml_path) as xml_file:\n    return txt_out, xml_file.read()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8e1517a3da098cd7071df669abd1ada8a82591f0fb0ca1722138ce3d8eb17c6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 3,
                  "charOffset": 4036,
                  "charLength": 4,
                  "snippet": {
                    "text": "with"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 3915,
                  "charLength": 190,
                  "snippet": {
                    "text": "    args += ['--%s' % RUN_DISABLED_FLAG]\n  txt_out = gtest_test_utils.Subprocess([COMMAND] + args, env=environ).output\n  with open(xml_path) as xml_file:\n    return txt_out, xml_file.read()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3363b8cfde9d04c72cda00ad64d848d9107601899f96e4c009759ec1d3f97ccb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 3,
                  "charOffset": 4182,
                  "charLength": 68,
                  "snippet": {
                    "text": "\"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 4107,
                  "charLength": 177,
                  "snippet": {
                    "text": "# The unit test.\nclass GTestFailFastUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4e02ad9f948a2c0ce93fb861b7ec086348b051db31e58be4d190d854f5664dc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 3,
                  "charOffset": 4254,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 4180,
                  "charLength": 167,
                  "snippet": {
                    "text": "  \"\"\"Tests the env variable or the command line flag for fail_fast.\"\"\"\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of not specifying the fail_fast.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d2d0a749ed2988db686fb52ef64dcd5c4e6cef49f8ed744630ea14c93c1b03b8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 3,
                  "charOffset": 4426,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 4382,
                  "charLength": 189,
                  "snippet": {
                    "text": "    self.assertIn('22 FAILED TEST', txt)\n\n  def testGoogletestFlag(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSimpleTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1cb2908626879589fd5bfbb4e43873b49fd898867af434dabdb9d89754086fed"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 3,
                  "charOffset": 4782,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 133,
                  "startColumn": 1,
                  "charOffset": 4737,
                  "charLength": 154,
                  "snippet": {
                    "text": "    self.assertNotIn('[  SKIPPED ]', txt)\n\n  def testGoogletestEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Googletest env var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2c3e71d00140bccd61a48ca10d63a9ff5de78acb9fcd8170b9ce7129ed74003"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 7,
                  "charOffset": 4907,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4891,
                  "charLength": 142,
                  "snippet": {
                    "text": "\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "44bdac0fb8f8eaf5d4461cc2657a811fe539883c813eeb443f7055b376a5bc43"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 7,
                  "charOffset": 4947,
                  "charLength": 3,
                  "snippet": {
                    "text": "txt"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 138,
                  "startColumn": 1,
                  "charOffset": 4892,
                  "charLength": 190,
                  "snippet": {
                    "text": "    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "279bfa09df7f53b91554c549d74c9a79e078e05bd6baf5f5cca7da4d0cafde02"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 7,
                  "charOffset": 4998,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4901,
                  "charLength": 182,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5c5dbad494bcd74b3b0ece293f2b44b31342dc63e8f9443ac86564aa14dfa1ee"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 7,
                  "charOffset": 5040,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 140,
                  "startColumn": 1,
                  "charOffset": 4941,
                  "charLength": 182,
                  "snippet": {
                    "text": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe9de38949b1ff550d02bb170f56b0faec23244b31067e22bab9d48c380b545a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 7,
                  "charOffset": 5090,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 5034,
                  "charLength": 182,
                  "snippet": {
                    "text": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54d9246a5c58ce64b43227892b51655acb988d9d774ae8ce4100e9084468986b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 7,
                  "charOffset": 5130,
                  "charLength": 3,
                  "snippet": {
                    "text": "txt"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 5083,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52081d826d6d564d95bff67fccf85e7c00cc04bab3c5498a3f5a79dad6a5d72c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 7,
                  "charOffset": 5181,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 144,
                  "startColumn": 1,
                  "charOffset": 5084,
                  "charLength": 189,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b8e94bad6983dc2bffba4bcd79d0e3a028596be61bc5fc6d8b13bf0710c0db7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 7,
                  "charOffset": 5223,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 145,
                  "startColumn": 1,
                  "charOffset": 5124,
                  "charLength": 190,
                  "snippet": {
                    "text": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46f5eaf7cbf13cbc81d0092eb12a8dc4ded16b33a03a7e8ba77e230c1ecbf58e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 7,
                  "charOffset": 5280,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 147,
                  "startColumn": 1,
                  "charOffset": 5217,
                  "charLength": 127,
                  "snippet": {
                    "text": "      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testBazelEnvVar(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6756a9b64cd92f9c697d2abc861f68cfe9b25c50cc12e1785c60896513212d05"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 3,
                  "charOffset": 5318,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 5274,
                  "charLength": 146,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testBazelEnvVar(self):\n    \"\"\"Tests the behavior of specifying fail_fast via Bazel testbridge.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0133539330b3db4156e8020bba4efc697914ce9edb3cc4d93324505ee1065a12"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 7,
                  "charOffset": 5436,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 153,
                  "startColumn": 1,
                  "charOffset": 5420,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43343fd7c38cc44192948008bfa909b9715e4cd6243379319adb809adad774a7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 7,
                  "charOffset": 5482,
                  "charLength": 3,
                  "snippet": {
                    "text": "txt"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 5421,
                  "charLength": 196,
                  "snippet": {
                    "text": "    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe293e19a943f082fe687ea6142461a414da5475fdd1025adbf435b1e0c388e1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 7,
                  "charOffset": 5533,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 5430,
                  "charLength": 188,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "039b3a89a4f9b06bd19f254503ce89fe16804ece4b9b3de2637f3ccc1c40a95d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 7,
                  "charOffset": 5575,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 5476,
                  "charLength": 188,
                  "snippet": {
                    "text": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "efcf2c5cc1dbfdfa6da41bfbe78de166becca38bcffeee3d8b60663b9805a940"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 7,
                  "charOffset": 5625,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 5569,
                  "charLength": 188,
                  "snippet": {
                    "text": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2d1af7ae922442d993b7656348489e75ffccf27716ce2309bbe41e99afe45852"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 7,
                  "charOffset": 5671,
                  "charLength": 3,
                  "snippet": {
                    "text": "txt"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 5618,
                  "charLength": 183,
                  "snippet": {
                    "text": "\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90c8b6ebb3a67f56a54ef822c48d14f2bb9efcdb907edea8021aa25ad2eff2b3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 7,
                  "charOffset": 5722,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 5619,
                  "charLength": 195,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae6d05fc25d8170b80588906fc4c4a2f8662885678de40217bb741fad6d52385"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 7,
                  "charOffset": 5764,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 5665,
                  "charLength": 196,
                  "snippet": {
                    "text": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('4 FAILED TEST', txt)\n      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2211de6e3926f08f5bf367540d497136571cf0a8bb41e7943dd0f805572ca7bb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 7,
                  "charOffset": 5821,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5758,
                  "charLength": 141,
                  "snippet": {
                    "text": "      self.assertNotIn('[  SKIPPED ]', txt)\n    finally:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b47c35b4432cbdd6f4c8e159b1b1d62c95a4671f591c0ce62ff57632bf81da5a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 3,
                  "charOffset": 5865,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 5815,
                  "charLength": 134,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests precedence of flag over env var.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4655ea2feaaf32c4daecf5c747f5af8ba48f31e641045507bc1d635e09562147"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "charOffset": 5965,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 5949,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3f6cf60b315c1af8d106f535f626efddb7ea8577511a396812a3d9fad73a681a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 7,
                  "charOffset": 6005,
                  "charLength": 3,
                  "snippet": {
                    "text": "txt"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 170,
                  "startColumn": 1,
                  "charOffset": 5950,
                  "charLength": 196,
                  "snippet": {
                    "text": "    try:\n      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6635c96ffdd19e968ebe2c9af020f47fbf6d6eb8617482ce746e78d3aee389e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 7,
                  "charOffset": 6062,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5959,
                  "charLength": 200,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, '0')\n      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5cc7266c678d57b0071edf2d4eb71c52b89d610a9fa75ad51b8f16142300c5f6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 7,
                  "charOffset": 6104,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "charOffset": 5999,
                  "charLength": 201,
                  "snippet": {
                    "text": "      txt, _ = RunAndReturnOutput('HasSimpleTest', True)\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80542049ba9ce2e2645a8687958edfec23f305340a8ad0cedf84e0f411f8527c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 7,
                  "charOffset": 6166,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 6098,
                  "charLength": 157,
                  "snippet": {
                    "text": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a7438001eb944020c3cee0e05c46904bbd9e32f2f8a95c168fba79c1da8cae3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "charOffset": 6204,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 6160,
                  "charLength": 170,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n\n  def testGoogletestEnvVarOverridesBazelEnvVar(self):\n    \"\"\"Tests that the Googletest native env var over Bazel testbridge.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "208a953e4cee5e49cfdaf4aba5b1d28e4c8626231be8cdb74576d9260884f266"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 7,
                  "charOffset": 6346,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 6330,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5df6e5314796a53d0c82b117a90eb5fcdae61ab0a1af3f4a4eb94da4f4522c1b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 7,
                  "charOffset": 6392,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 6331,
                  "charLength": 187,
                  "snippet": {
                    "text": "    try:\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7791f71f7b03f12f37b56f13d62805f897158f88d0ee68865ac4219aaa5ff1d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 7,
                  "charOffset": 6432,
                  "charLength": 3,
                  "snippet": {
                    "text": "txt"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6340,
                  "charLength": 227,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, '0')\n      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "254a7d9f9c39bc664446f057dc7e5175fa29d0e60a0c7013558a1f866c123cfb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 7,
                  "charOffset": 6483,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 6386,
                  "charLength": 194,
                  "snippet": {
                    "text": "      SetEnvVar(FAIL_FAST_ENV_VAR, '1')\n      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9ed6b068e124b78d7120767fd3c4c3798e974bd70c38fd374627e755693b4ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 7,
                  "charOffset": 6525,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 6426,
                  "charLength": 195,
                  "snippet": {
                    "text": "      txt, _ = RunAndReturnOutput('HasSimpleTest')\n      self.assertIn('1 FAILED TEST', txt)\n      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24f4f9882b37c20911035d5b0618e1cf1eaf50d2c79619eeb96952350d1d6154"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 7,
                  "charOffset": 6587,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6519,
                  "charLength": 150,
                  "snippet": {
                    "text": "      self.assertIn('[  SKIPPED ] 3 tests', txt)\n    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae682a723462aa6084e730fe4782381947aada9ee8dacf24cae26c0a9f219e61"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 7,
                  "charOffset": 6628,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 6568,
                  "charLength": 132,
                  "snippet": {
                    "text": "    finally:\n      SetEnvVar(FAIL_FAST_ENV_VAR, None)\n      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testEventListener(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cf1cea1127af95fadfb1a5ffb1fecb3bb6046e8952ca88c708418e0a40097049"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 3,
                  "charOffset": 6672,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 6622,
                  "charLength": 192,
                  "snippet": {
                    "text": "      SetEnvVar(BAZEL_FAIL_FAST_ENV_VAR, None)\n\n  def testEventListener(self):\n    txt, _ = RunAndReturnOutput(test_suite='HasSkipTest', fail_fast=True)\n    self.assertIn('1 FAILED TEST', txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a5fc372c4d5d1dfc5f18f2b9ac09f4f3d9d8fa490b343a55dea0e0e3b875a810"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 7,
                  "charOffset": 7064,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 200,
                  "startColumn": 1,
                  "charOffset": 7020,
                  "charLength": 118,
                  "snippet": {
                    "text": "        (1, 'OnTestSuiteEnd'),\n    ]:\n      self.assertEqual(\n          expected_count,\n          txt.count(callback),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "91efc1976ab6aa9b0bfd5a23f516b33ecfd00820e7272ca74811ca0894f6ef6e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 7,
                  "charOffset": 7628,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 7584,
                  "charLength": 118,
                  "snippet": {
                    "text": "        (1, 'OnTestSuiteEnd'),\n    ]:\n      self.assertEqual(\n          expected_count,\n          txt.count(callback),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "37fa8a0aacdf4d9b96882000658c2095156dc539b7fa4940118301537bfb49be"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 3,
                  "charOffset": 7831,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 7820,
                  "charLength": 99,
                  "snippet": {
                    "text": "      )\n\n  def assertXmlResultCount(self, result, count, xml):\n    self.assertEqual(\n        count,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "adb133a8ac3a4896e8b6c3b8e32d13b081436da09dfeb22f3098110502723b4c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 3,
                  "charOffset": 8062,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 8053,
                  "charLength": 97,
                  "snippet": {
                    "text": "    )\n\n  def assertXmlStatusCount(self, status, count, xml):\n    self.assertEqual(\n        count,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a28c570ed34b004d8cef2d718935ab210ac8a705ec4921b5372223b58f813a36"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 3,
                  "charOffset": 8293,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 240,
                  "startColumn": 1,
                  "charOffset": 8284,
                  "charLength": 72,
                  "snippet": {
                    "text": "    )\n\n  def assertFailFastXmlAndTxtOutput(\n      self,\n      fail_fast,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "771b86ecacaf14b4b78484dc885d57f8bbc5be3658672af3413610e7566c34f0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 7,
                  "charOffset": 8654,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 8551,
                  "charLength": 248,
                  "snippet": {
                    "text": "    txt, xml = RunAndReturnOutput(test_suite, fail_fast, run_disabled)\n    if failure_count > 0:\n      self.assertIn('%s FAILED TEST' % failure_count, txt)\n    if suppressed_count > 0:\n      self.assertIn('%s DISABLED TEST' % suppressed_count, txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35ba0349b1f00e54eae5d0fcf9462ed602bd63d6649bfa8443a4d316f6bf04c1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 7,
                  "charOffset": 8742,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 256,
                  "startColumn": 1,
                  "charOffset": 8648,
                  "charLength": 243,
                  "snippet": {
                    "text": "      self.assertIn('%s FAILED TEST' % failure_count, txt)\n    if suppressed_count > 0:\n      self.assertIn('%s DISABLED TEST' % suppressed_count, txt)\n    if skipped_count > 0:\n      self.assertIn('[  SKIPPED ] %s tests' % skipped_count, txt)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33456410b8b658821ecae9828802dd13ceeb5fb4a17c30fc513701d6c618b7b0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 7,
                  "charOffset": 8832,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 258,
                  "startColumn": 1,
                  "charOffset": 8736,
                  "charLength": 251,
                  "snippet": {
                    "text": "      self.assertIn('%s DISABLED TEST' % suppressed_count, txt)\n    if skipped_count > 0:\n      self.assertIn('[  SKIPPED ] %s tests' % skipped_count, txt)\n    self.assertXmlStatusCount(\n        'run', passed_count + failure_count + skipped_count, xml"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5f89b0a576c314a4f2b28035bbfbbd110851ecdbecf0e65143ac8a328a06005"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 3,
                  "charOffset": 9266,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 9196,
                  "charLength": 127,
                  "snippet": {
                    "text": "    self.assertXmlResultCount('suppressed', suppressed_count, xml)\n\n  def assertFailFastBehavior(\n      self,\n      test_suite,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "befe21f3831c7feaa8d5b45453fdb15db629ac0a60f708cea15009fdd39d2856"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 7,
                  "charOffset": 9534,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 279,
                  "startColumn": 1,
                  "charOffset": 9480,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n    for fail_fast in ('true', '1', 't', True):\n      self.assertFailFastXmlAndTxtOutput(\n          fail_fast,\n          test_suite,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4691e6198165ff12b693be91a9b5e43bb760cbe1252127721bce027605c2978d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 3,
                  "charOffset": 9750,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 9739,
                  "charLength": 71,
                  "snippet": {
                    "text": "      )\n\n  def assertNotFailFastBehavior(\n      self,\n      test_suite,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66e2663097d3fd325e7f26b07b8aed8fa684055310d29263c11281274af90b68"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 7,
                  "charOffset": 10025,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 301,
                  "startColumn": 1,
                  "charOffset": 9969,
                  "charLength": 134,
                  "snippet": {
                    "text": "\n    for fail_fast in ('false', '0', 'f', False):\n      self.assertFailFastXmlAndTxtOutput(\n          fail_fast,\n          test_suite,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a275dca79519a5119c5e305140179346ea836464cf0f2c98468cc8220259c66"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 3,
                  "charOffset": 10241,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 311,
                  "startColumn": 1,
                  "charOffset": 10230,
                  "charLength": 132,
                  "snippet": {
                    "text": "      )\n\n  def testFlag_HasFixtureTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_F.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0955f44bcf4bb0412c828b59ebdb29032ce5083fe51795a8c8ed48e55ae385b0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 3,
                  "charOffset": 10692,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 328,
                  "startColumn": 1,
                  "charOffset": 10683,
                  "charLength": 127,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasSimpleTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a4b10735ea0f198577f6d2d5a273d327abfecba50e6547b106b627280859ddd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 3,
                  "charOffset": 11138,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 11129,
                  "charLength": 133,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasParametersTest(self):\n    \"\"\"Tests the behavior of fail_fast and TEST_P.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2467744ed1ad68195d83dc95f248e4256ddbb097e5f5f1395b2c2e2884b03cb4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 3,
                  "charOffset": 11636,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 362,
                  "startColumn": 1,
                  "charOffset": 11627,
                  "charLength": 144,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f53142e6f352515081086c3bd6557d68d7da7b640efc17ffd179d49ccc8a7d9f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 3,
                  "charOffset": 12159,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 381,
                  "startColumn": 1,
                  "charOffset": 12150,
                  "charLength": 163,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test cases enabled.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "108ac331a6f143efb69beeb1eeb41afe4055a0dea33f2decf0797d8e9f9e0f02"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 3,
                  "charOffset": 12699,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 12690,
                  "charLength": 150,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledSuiteTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5f970f5c3f8d904718cf2b4eadaadc5528442dbe96f705cf5e5bb88bac7e7c39"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 3,
                  "charOffset": 13248,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 419,
                  "startColumn": 1,
                  "charOffset": 13239,
                  "charLength": 169,
                  "snippet": {
                    "text": "    )\n\n  def testFlag_HasDisabledSuiteRunDisabledTest(self):\n    \"\"\"Tests the behavior of fail_fast and Disabled test suites enabled.\"\"\"\n    self.assertFailFastBehavior("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e02c2ecab80d1bda33c9d4fe45108cdaeed04fd0674c7b1200a5919db4bdd195"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 3,
                  "charOffset": 13814,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 438,
                  "startColumn": 1,
                  "charOffset": 13805,
                  "charLength": 71,
                  "snippet": {
                    "text": "    )\n\n  if SUPPORTS_DEATH_TESTS:\n\n    def testFlag_HasDeathTest(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2943fe74c88e653ae8213d3a81e664c196a23d1f770beb1b3ae3569e2081e03"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 7,
                  "charOffset": 13883,
                  "charLength": 54,
                  "snippet": {
                    "text": "\"\"\"Tests the behavior of fail_fast and death tests.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 441,
                  "startColumn": 1,
                  "charOffset": 13839,
                  "charLength": 170,
                  "snippet": {
                    "text": "\n    def testFlag_HasDeathTest(self):\n      \"\"\"Tests the behavior of fail_fast and death tests.\"\"\"\n      self.assertFailFastBehavior(\n          test_suite='HasDeathTest',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51526b7033ecd683d81f038b80b16546a83276dffaf764bb346796bf54670bc0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 7,
                  "charOffset": 13944,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 442,
                  "startColumn": 1,
                  "charOffset": 13840,
                  "charLength": 195,
                  "snippet": {
                    "text": "    def testFlag_HasDeathTest(self):\n      \"\"\"Tests the behavior of fail_fast and death tests.\"\"\"\n      self.assertFailFastBehavior(\n          test_suite='HasDeathTest',\n          passed_count=1,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24560b190a66c427c27375ab0ce4e76f6e93ae59e0caa9316166edda006e329a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 7,
                  "charOffset": 14134,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 449,
                  "startColumn": 1,
                  "charOffset": 14090,
                  "charLength": 138,
                  "snippet": {
                    "text": "          suppressed_count=0,\n      )\n      self.assertNotFailFastBehavior(\n          test_suite='HasDeathTest',\n          passed_count=1,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00eb9466d4fbc8139c692264c15858069ab666768bb2c4a220de09d016fe65ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-failfast-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 3,
                  "charOffset": 14352,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 459,
                  "startColumn": 1,
                  "charOffset": 14322,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "142e48d058ea44a150b3fdfd70efc8ec83293d67ebdf619a7c65dc2c2b145f92"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_skip_environment_check_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "charOffset": 2035,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1972,
                  "charLength": 203,
                  "snippet": {
                    "text": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d20ebdb122aac40bc3a07fa23ef5f053988df31e49c3f2c21dd1692b209e68a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_skip_environment_check_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 3,
                  "charOffset": 2207,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 2177,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0724676560870995feb3951558e1d5ca529c9fdd978ae9732d8ff7df9ecf693"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "charOffset": 2163,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2128,
                  "charLength": 77,
                  "snippet": {
                    "text": "\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd94a345b7f1a42af5d9ead495c5a944c6c17ce6f5d3ca3103aee90e0266d92a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2237,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2205,
                  "charLength": 77,
                  "snippet": {
                    "text": "\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80626d6d95503c1133a413b6dfe9ac2bbfe6d3b61c43090302901d74534ea2f9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "charOffset": 2304,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2282,
                  "charLength": 57,
                  "snippet": {
                    "text": "\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a9719bee183a6be179840e819cdf6296002ba895768f485337a48a0a71d3b33"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "charOffset": 2361,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2339,
                  "charLength": 48,
                  "snippet": {
                    "text": "\ndef ShuffleFlag():\n  return '--gtest_shuffle'\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "64c7e0a35d1acd4ffcf0f1b9dae9c3e12af2398b8697e685b248d1594590c51b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 3,
                  "charOffset": 2413,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 2387,
                  "charLength": 66,
                  "snippet": {
                    "text": "\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2c5067e8c5003ced39a80a5e026fe1d217dc83655c3c5b8e7cff81957a3269f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 3,
                  "charOffset": 2497,
                  "charLength": 51,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns its output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2453,
                  "charLength": 131,
                  "snippet": {
                    "text": "\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  environ_copy = os.environ.copy()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df5d666d88873e7f535f56dad7809011709a730637d16c77f56e287ee1b39c47"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "charOffset": 2552,
                  "charLength": 12,
                  "snippet": {
                    "text": "environ_copy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2495,
                  "charLength": 123,
                  "snippet": {
                    "text": "  \"\"\"Runs the test program and returns its output.\"\"\"\n\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a35f07355f3e8c0498e62f8c39a43efcebb2f65b496c8b732f53c363a28303a1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "charOffset": 2587,
                  "charLength": 12,
                  "snippet": {
                    "text": "environ_copy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2549,
                  "charLength": 149,
                  "snippet": {
                    "text": "\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a72f63ef15b6c8974219ee8491019d569424a190d0d0c215cf1ceda0600bcd65"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 3,
                  "charOffset": 2621,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2585,
                  "charLength": 115,
                  "snippet": {
                    "text": "  environ_copy.update(extra_env)\n\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb19e99d6b5718f988a08eb083c966f960020ee32d83cb6e7bea36a9942c46e3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 3,
                  "charOffset": 2750,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\"\"Runs the test program and returns a list of test lists."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2700,
                  "charLength": 117,
                  "snippet": {
                    "text": "\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d87804e0feb3632748b80fc94e63c22cb3024cee2de1a73539224f2d4587c98"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 3,
                  "charOffset": 3059,
                  "charLength": 15,
                  "snippet": {
                    "text": "test_iterations"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "charOffset": 3050,
                  "charLength": 124,
                  "snippet": {
                    "text": "  \"\"\"\n\n  test_iterations = []\n  for line in RunAndReturnOutput(extra_env, args).split('\\n'):\n    if line.startswith('----'):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13276b55e39db51d85f7c68884a4867386284e1430161b63fd126e9d87fc491e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 3,
                  "charOffset": 3082,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3056,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n  test_iterations = []\n  for line in RunAndReturnOutput(extra_env, args).split('\\n'):\n    if line.startswith('----'):\n      tests = []"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a9edb0fe6bbfd2bea649cebd353eab5f2b119a55e6f1a0bb1fd45bd8ca6e990"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 7,
                  "charOffset": 3181,
                  "charLength": 5,
                  "snippet": {
                    "text": "tests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 3080,
                  "charLength": 170,
                  "snippet": {
                    "text": "  for line in RunAndReturnOutput(extra_env, args).split('\\n'):\n    if line.startswith('----'):\n      tests = []\n      test_iterations.append(tests)\n    elif line.strip():"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0df234097db5a2a3835f85f237146865f6881e36c8fa04538a437be52bf00ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 7,
                  "charOffset": 3198,
                  "charLength": 15,
                  "snippet": {
                    "text": "test_iterations"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 3143,
                  "charLength": 167,
                  "snippet": {
                    "text": "    if line.startswith('----'):\n      tests = []\n      test_iterations.append(tests)\n    elif line.strip():\n      tests.append(line.strip())  # 'TestCaseName.TestName'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de44d31cc34616b9629a8d6555f041a2c4a73b85fa6cd778feb7b69f693c7730"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 7,
                  "charOffset": 3257,
                  "charLength": 5,
                  "snippet": {
                    "text": "tests"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3192,
                  "charLength": 144,
                  "snippet": {
                    "text": "      test_iterations.append(tests)\n    elif line.strip():\n      tests.append(line.strip())  # 'TestCaseName.TestName'\n\n  return test_iterations"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12589c562844fd6080751aff9fffd9d371c190c07ffd905a6bb346e3a4f1b16a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 3,
                  "charOffset": 3314,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3251,
                  "charLength": 87,
                  "snippet": {
                    "text": "      tests.append(line.strip())  # 'TestCaseName.TestName'\n\n  return test_iterations\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9df284e58643a12ae71db2ead7caa8d369feace8cc562a96a0f44ad859da7e78"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 3,
                  "charOffset": 3366,
                  "charLength": 61,
                  "snippet": {
                    "text": "\"\"\"Returns a list of test cases in the given full test names."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3338,
                  "charLength": 98,
                  "snippet": {
                    "text": "\ndef GetTestCases(tests):\n  \"\"\"Returns a list of test cases in the given full test names.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac645a23d9471fb2dc840f4092f6f1eb3d0770669d7899bff125a9715bd90326"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 3,
                  "charOffset": 3599,
                  "charLength": 10,
                  "snippet": {
                    "text": "test_cases"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3590,
                  "charLength": 80,
                  "snippet": {
                    "text": "  \"\"\"\n\n  test_cases = []\n  for test in tests:\n    test_case = test.split('.')[0]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a7ff4e7e3d5d11c9870c7209b0dcff91342d82c54636765bcc3da08fd6a279ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 3,
                  "charOffset": 3617,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3596,
                  "charLength": 110,
                  "snippet": {
                    "text": "\n  test_cases = []\n  for test in tests:\n    test_case = test.split('.')[0]\n    if not test_case in test_cases:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c9031026abc5e4160f1c075d84c53c5823832f12c6d3821ae3de2cc580be6fef"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E713 test for membership should be 'not in'",
            "markdown": "PEP 8: E713 test for membership should be 'not in'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 8,
                  "charOffset": 3678,
                  "charLength": 3,
                  "snippet": {
                    "text": "not"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 3615,
                  "charLength": 127,
                  "snippet": {
                    "text": "  for test in tests:\n    test_case = test.split('.')[0]\n    if not test_case in test_cases:\n      test_cases.append(test_case)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e4be58b0ccf2a6783843b0bf00afe80249c5443a1cc1bb74ddb5f382763389ee"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "charOffset": 3713,
                  "charLength": 10,
                  "snippet": {
                    "text": "test_cases"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3636,
                  "charLength": 126,
                  "snippet": {
                    "text": "    test_case = test.split('.')[0]\n    if not test_case in test_cases:\n      test_cases.append(test_case)\n\n  return test_cases"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a40a84465193fc5e201268f6fd50e04b70d0034ae3cb7fd4d88774c423089a0c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 3,
                  "charOffset": 3745,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 3707,
                  "charLength": 57,
                  "snippet": {
                    "text": "      test_cases.append(test_case)\n\n  return test_cases\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a0ac22a975f158499c7b4fa5b4fc6e8dea4edde929f7e4f8ff5168d3a9522c0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 3,
                  "charOffset": 3793,
                  "charLength": 61,
                  "snippet": {
                    "text": "\"\"\"Calculates the list of tests run under different flags.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 3764,
                  "charLength": 111,
                  "snippet": {
                    "text": "\ndef CalculateTestLists():\n  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n\n  if not ALL_TESTS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "037820d7d04ba65243dd814a4688253954d31b1dd60a3642ff7a6d75c09093ad"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "charOffset": 3858,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 3791,
                  "charLength": 176,
                  "snippet": {
                    "text": "  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n\n  if not ALL_TESTS:\n    ALL_TESTS.extend(\n        GetTestsForAllIterations({}, [AlsoRunDisabledTestsFlag()])[0]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a59a07484492ff3ea7409d4063fcda8da270372faceae720c2a209346a380bf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 3,
                  "charOffset": 3977,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3968,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n\n  if not ACTIVE_TESTS:\n    ACTIVE_TESTS.extend(GetTestsForAllIterations({}, [])[0])\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "79d77d81fdd3019876d380b6fc14fc1b3844d40b421bccfb45fcfe1c56f3ede2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 3,
                  "charOffset": 4062,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 3998,
                  "charLength": 180,
                  "snippet": {
                    "text": "    ACTIVE_TESTS.extend(GetTestsForAllIterations({}, [])[0])\n\n  if not FILTERED_TESTS:\n    FILTERED_TESTS.extend(\n        GetTestsForAllIterations({}, [FilterFlag(TEST_FILTER)])[0]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a12e4330490f5c7e549c32b6490bd911e5e4fa376f16324fe82001e028308794"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 3,
                  "charOffset": 4188,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4179,
                  "charLength": 90,
                  "snippet": {
                    "text": "    )\n\n  if not SHARDED_TESTS:\n    SHARDED_TESTS.extend(\n        GetTestsForAllIterations("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7d07b358922a8b1c460587f9b0d97d2087f4e7f470e3601a8f24c75a051ac5af"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 3,
                  "charOffset": 4362,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4353,
                  "charLength": 100,
                  "snippet": {
                    "text": "    )\n\n  if not SHUFFLED_ALL_TESTS:\n    SHUFFLED_ALL_TESTS.extend(\n        GetTestsForAllIterations("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23cbe71bbc8bdc1d4d1e874092e50ed6ae8a723658b8dd5a7a2ba2f929a0f250"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 3,
                  "charOffset": 4555,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 156,
                  "startColumn": 1,
                  "charOffset": 4546,
                  "charLength": 148,
                  "snippet": {
                    "text": "    )\n\n  if not SHUFFLED_ACTIVE_TESTS:\n    SHUFFLED_ACTIVE_TESTS.extend(\n        GetTestsForAllIterations({}, [ShuffleFlag(), RandomSeedFlag(1)])[0]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8ba4d4a89761f7d806576172e2075b37d9fb34d8f43938df4b5026e2efced51"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 3,
                  "charOffset": 4704,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 4695,
                  "charLength": 110,
                  "snippet": {
                    "text": "    )\n\n  if not SHUFFLED_FILTERED_TESTS:\n    SHUFFLED_FILTERED_TESTS.extend(\n        GetTestsForAllIterations("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a247394448b69ae2ceea12810119ab79c469acd2049b455ef80056d94e8b7af7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 3,
                  "charOffset": 4904,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 168,
                  "startColumn": 1,
                  "charOffset": 4895,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n  if not SHUFFLED_SHARDED_TESTS:\n    SHUFFLED_SHARDED_TESTS.extend(\n        GetTestsForAllIterations("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "686d77078eedea8535f45abf7706270bea34c96c32b316bd955adc0ed6679cfe"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 3,
                  "charOffset": 5197,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"\"\"Tests test shuffling.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5139,
                  "charLength": 105,
                  "snippet": {
                    "text": "\nclass GTestShuffleUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b28c17537648d9036092f4bc35dfe300fef5a221b67d30ce92558cf5d2eb69ea"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 3,
                  "charOffset": 5228,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 5195,
                  "charLength": 75,
                  "snippet": {
                    "text": "  \"\"\"Tests test shuffling.\"\"\"\n\n  def setUp(self):\n    CalculateTestLists()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf0710104481af3b35eedb4d5120c572e48895ae1868a2c8e451c1c9845893df"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 3,
                  "charOffset": 5273,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 5245,
                  "charLength": 202,
                  "snippet": {
                    "text": "    CalculateTestLists()\n\n  def testShufflePreservesNumberOfTests(self):\n    self.assertEqual(len(ALL_TESTS), len(SHUFFLED_ALL_TESTS))\n    self.assertEqual(len(ACTIVE_TESTS), len(SHUFFLED_ACTIVE_TESTS))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6f940d646e921cafe0d989635efd1501d0fedd1b2e72a871527035850691452"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 3,
                  "charOffset": 5593,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 5520,
                  "charLength": 205,
                  "snippet": {
                    "text": "    self.assertEqual(len(SHARDED_TESTS), len(SHUFFLED_SHARDED_TESTS))\n\n  def testShuffleChangesTestOrder(self):\n    self.assertTrue(SHUFFLED_ALL_TESTS != ALL_TESTS, SHUFFLED_ALL_TESTS)\n    self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "313ffae4269fdd7015b29207c7f93763251db6157926719e71bab92f439fc8e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 3,
                  "charOffset": 6005,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 5996,
                  "charLength": 141,
                  "snippet": {
                    "text": "    )\n\n  def testShuffleChangesTestCaseOrder(self):\n    self.assertTrue(\n        GetTestCases(SHUFFLED_ALL_TESTS) != GetTestCases(ALL_TESTS),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83d93f2715cd6d3b2b9e7d8817753ef19a5a9676df8720018a29b7461ea2dcb1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 3,
                  "charOffset": 6639,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 6630,
                  "charLength": 108,
                  "snippet": {
                    "text": "    )\n\n  def testShuffleDoesNotRepeatTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertEqual("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d22821fc84e6460735567f71573c1d99d530319e0513807392cf75aff90f9b22"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 7,
                  "charOffset": 6721,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 6637,
                  "charLength": 156,
                  "snippet": {
                    "text": "  def testShuffleDoesNotRepeatTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_ALL_TESTS.count(test),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54378e03c0617a6c3901b26003653c4407bd1f285b6a401a6298319661e40aaa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 7,
                  "charOffset": 6896,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 6843,
                  "charLength": 128,
                  "snippet": {
                    "text": "      )\n    for test in SHUFFLED_ACTIVE_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_ACTIVE_TESTS.count(test),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fd4311628b3004620c58f0261b95f3c7aa13bdce7de1b7baa81733112122cc95"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 7,
                  "charOffset": 7076,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 233,
                  "startColumn": 1,
                  "charOffset": 7021,
                  "charLength": 132,
                  "snippet": {
                    "text": "      )\n    for test in SHUFFLED_FILTERED_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_FILTERED_TESTS.count(test),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7da4af5fe19887001f5e3f166ccb40aee6b3d524d95b7726abbe7295a2caf75f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 7,
                  "charOffset": 7257,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 239,
                  "startColumn": 1,
                  "charOffset": 7203,
                  "charLength": 130,
                  "snippet": {
                    "text": "      )\n    for test in SHUFFLED_SHARDED_TESTS:\n      self.assertEqual(\n          1,\n          SHUFFLED_SHARDED_TESTS.count(test),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1e6d7dc1d344a3a3cc76c9742c313f71f3dfb91521d15363f816dc0e2fd8458a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 3,
                  "charOffset": 7394,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 7383,
                  "charLength": 165,
                  "snippet": {
                    "text": "      )\n\n  def testShuffleDoesNotCreateNewTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d37881dc2f80cbae7b436f081f4c5f99aabd23c5ab259818768230c78a7a59ae"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 7,
                  "charOffset": 7479,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "charOffset": 7392,
                  "charLength": 274,
                  "snippet": {
                    "text": "  def testShuffleDoesNotCreateNewTest(self):\n    for test in SHUFFLED_ALL_TESTS:\n      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_ACTIVE_TESTS:\n      self.assertTrue(test in ACTIVE_TESTS, '%s is an invalid test' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60fe86c745a0f867748773174c80a499796b999254e04295e4f452f2f2c32d4c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 7,
                  "charOffset": 7594,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 249,
                  "startColumn": 1,
                  "charOffset": 7473,
                  "charLength": 315,
                  "snippet": {
                    "text": "      self.assertTrue(test in ALL_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_ACTIVE_TESTS:\n      self.assertTrue(test in ACTIVE_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_FILTERED_TESTS:\n      self.assertTrue(test in FILTERED_TESTS, '%s is an invalid test' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bb0ab60be998c435daf3926563a50be1036f7845a6759a6bfc56143ac0d837bc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 7,
                  "charOffset": 7714,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 7588,
                  "charLength": 320,
                  "snippet": {
                    "text": "      self.assertTrue(test in ACTIVE_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_FILTERED_TESTS:\n      self.assertTrue(test in FILTERED_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_SHARDED_TESTS:\n      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e12dc998a6a0d6e5eecdf339b83301b2b273721bc039cbe25299db1c11911092"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 7,
                  "charOffset": 7835,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 7708,
                  "charLength": 242,
                  "snippet": {
                    "text": "      self.assertTrue(test in FILTERED_TESTS, '%s is an invalid test' % (test,))\n    for test in SHUFFLED_SHARDED_TESTS:\n      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))\n\n  def testShuffleIncludesAllTests(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd45630aee7b075f84d95783484f199c298c50a4d73f6eeb69589855cf85b68e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 3,
                  "charOffset": 7912,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 7829,
                  "charLength": 225,
                  "snippet": {
                    "text": "      self.assertTrue(test in SHARDED_TESTS, '%s is an invalid test' % (test,))\n\n  def testShuffleIncludesAllTests(self):\n    for test in ALL_TESTS:\n      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0cce7ea57af08d6bdcb5b4fbfe1839918f6928c5e828d600e5017a1ed77460c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 7,
                  "charOffset": 7984,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 7910,
                  "charLength": 254,
                  "snippet": {
                    "text": "  def testShuffleIncludesAllTests(self):\n    for test in ALL_TESTS:\n      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))\n    for test in ACTIVE_TESTS:\n      self.assertTrue(test in SHUFFLED_ACTIVE_TESTS, '%s is missing' % (test,))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c47897b04aa05a1265292d9b1f7d46b9336c4fbe5d25f4f93be9d2c76d84f581"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 7,
                  "charOffset": 8091,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 7978,
                  "charLength": 241,
                  "snippet": {
                    "text": "      self.assertTrue(test in SHUFFLED_ALL_TESTS, '%s is missing' % (test,))\n    for test in ACTIVE_TESTS:\n      self.assertTrue(test in SHUFFLED_ACTIVE_TESTS, '%s is missing' % (test,))\n    for test in FILTERED_TESTS:\n      self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dac3e16a803786ef37b0afbdf1c8912ded8205e030bdf89ad724fee007ef5e9e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 7,
                  "charOffset": 8203,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 1,
                  "charOffset": 8085,
                  "charLength": 211,
                  "snippet": {
                    "text": "      self.assertTrue(test in SHUFFLED_ACTIVE_TESTS, '%s is missing' % (test,))\n    for test in FILTERED_TESTS:\n      self.assertTrue(\n          test in SHUFFLED_FILTERED_TESTS, '%s is missing' % (test,)\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "df2c7b145a39d9f5fa74e17cd9c78bbc6a57a96f94622f9b795f9d5da7995157"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 7,
                  "charOffset": 8334,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 265,
                  "startColumn": 1,
                  "charOffset": 8289,
                  "charLength": 168,
                  "snippet": {
                    "text": "      )\n    for test in SHARDED_TESTS:\n      self.assertTrue(test in SHUFFLED_SHARDED_TESTS, '%s is missing' % (test,))\n\n  def testShuffleLeavesDeathTestsAtFront(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "580db5dbc4f72867bc196d0e9bf83e8aa4d6cda8512d161c742ae101c63f8a67"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 3,
                  "charOffset": 8412,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 267,
                  "startColumn": 1,
                  "charOffset": 8328,
                  "charLength": 201,
                  "snippet": {
                    "text": "      self.assertTrue(test in SHUFFLED_SHARDED_TESTS, '%s is missing' % (test,))\n\n  def testShuffleLeavesDeathTestsAtFront(self):\n    non_death_test_found = False\n    for test in SHUFFLED_ACTIVE_TESTS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65d461970db9df19d887838454b80672ff31ab099aecd2c58f88e40fd95c7ffa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 7,
                  "charOffset": 8536,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 8458,
                  "charLength": 165,
                  "snippet": {
                    "text": "    non_death_test_found = False\n    for test in SHUFFLED_ACTIVE_TESTS:\n      if 'DeathTest.' in test:\n        self.assertTrue(\n            not non_death_test_found,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cafc67115e135ec7e892e11b83ca992d04837446971f636ef7cb72bc61b17e4e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 7,
                  "charOffset": 8699,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 275,
                  "startColumn": 1,
                  "charOffset": 8624,
                  "charLength": 117,
                  "snippet": {
                    "text": "            '%s appears after a non-death test' % (test,),\n        )\n      else:\n        non_death_test_found = True\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "afbc585815e8c74b99cc8b360dbbf0ca82b1ef84a3ba8db47a570a12af6c3dc6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 3,
                  "charOffset": 8744,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 8705,
                  "charLength": 131,
                  "snippet": {
                    "text": "        non_death_test_found = True\n\n  def _VerifyTestCasesDoNotInterleave(self, tests):\n    test_cases = []\n    for test in tests:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "186ecb3977a404d10da7914420134922866feacf1a6ac6c249e7948b50c1003d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 7,
                  "charOffset": 8843,
                  "charLength": 1,
                  "snippet": {
                    "text": "["
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 8794,
                  "charLength": 171,
                  "snippet": {
                    "text": "    test_cases = []\n    for test in tests:\n      [test_case, _] = test.split('.')\n      if test_cases and test_cases[-1] != test_case:\n        test_cases.append(test_case)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2fb392953f5c163c948d28e08dd4cd14f8916b4df73a74be4367b8cc2eb9d8b8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 7,
                  "charOffset": 8882,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 282,
                  "startColumn": 1,
                  "charOffset": 8814,
                  "charLength": 177,
                  "snippet": {
                    "text": "    for test in tests:\n      [test_case, _] = test.split('.')\n      if test_cases and test_cases[-1] != test_case:\n        test_cases.append(test_case)\n        self.assertEqual("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48e99eaf0acab148fb22d550de9a89fc12bba1c0d23c1988decc9f99d55fa9d1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 3,
                  "charOffset": 9140,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 290,
                  "startColumn": 1,
                  "charOffset": 9127,
                  "charLength": 186,
                  "snippet": {
                    "text": "        )\n\n  def testShuffleDoesNotInterleaveTestCases(self):\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ALL_TESTS)\n    self._VerifyTestCasesDoNotInterleave(SHUFFLED_ACTIVE_TESTS)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0242377a0c282368fbc8c2fbccb4723373cf993ff9097c21405c1b526640ae7b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 3,
                  "charOffset": 9448,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 296,
                  "startColumn": 1,
                  "charOffset": 9380,
                  "charLength": 261,
                  "snippet": {
                    "text": "    self._VerifyTestCasesDoNotInterleave(SHUFFLED_SHARDED_TESTS)\n\n  def testShuffleRestoresOrderAfterEachIteration(self):\n    # Get the test lists in all 3 iterations, using random seed 1, 2,\n    # and 3 respectively.  Google Test picks a different seed in each"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3d7ebd8ac37add92f0114bd1c34a92d20075daee0d0103b034dc6e8e19c84fe"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 3,
                  "charOffset": 11140,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 334,
                  "startColumn": 1,
                  "charOffset": 11077,
                  "charLength": 243,
                  "snippet": {
                    "text": "    self.assertEqual(tests_in_iteration3, tests_with_seed3)\n\n  def testShuffleGeneratesNewOrderInEachIteration(self):\n    # pylint: disable-next=unbalanced-tuple-unpacking\n    [tests_in_iteration1, tests_in_iteration2, tests_in_iteration3] = ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a9d59d16c0ca4037f8aa7bbee95cfda835820c8eccd3ccf064cd6c64b5fdb2c4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 3,
                  "charOffset": 11738,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 352,
                  "startColumn": 1,
                  "charOffset": 11729,
                  "charLength": 196,
                  "snippet": {
                    "text": "    )\n\n  def testShuffleShardedTestsPreservesPartition(self):\n    # If we run M tests on N shards, the same M tests should be run in\n    # total, regardless of the random seeds used by the shards."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e6182070a2a328a39a24052e5ba4ae980abd5fc6fe60bf1d23624218d3fe4738"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-shuffle-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 3,
                  "charOffset": 12677,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 376,
                  "startColumn": 1,
                  "charOffset": 12647,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8f8b863035cc8247378d50161e85b23010b97d6fa154b44831f03b9e70924d8a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_testbridge_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "charOffset": 1845,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1819,
                  "charLength": 69,
                  "snippet": {
                    "text": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae9bc0ab9db72e5fc5d70ce859cef4eb889898174884cf3f007a7066cbe4e64d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_testbridge_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 3,
                  "charOffset": 1947,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1890,
                  "charLength": 213,
                  "snippet": {
                    "text": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13aa18aecc52610fa084155891b62628e3ed7a331da3b1a180aacff63f084755"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_testbridge_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2471,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2441,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3810e3a021e17803e86f0c4c5f16d89c1f7839d7a1b349db43ace07c63c02c2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "charOffset": 1822,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1796,
                  "charLength": 69,
                  "snippet": {
                    "text": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e707839061cfdff833b316408c27083e5a8042006cdcf116d8212fa25207c303"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "charOffset": 1905,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"\"\"Runs the given command and verifies its exit code and output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1866,
                  "charLength": 176,
                  "snippet": {
                    "text": "\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = 'Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d715c7f6609a37a8c6daebc8b575fd6a4e82449fd401f1ca9280fe7c75b10393"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "charOffset": 1976,
                  "charLength": 3,
                  "snippet": {
                    "text": "err"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1903,
                  "charLength": 183,
                  "snippet": {
                    "text": "  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = 'Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid'\n\n  p = gtest_test_utils.Subprocess(command)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "501c16e8420bdef7322ef161ba627a795a79e1adc7bc8c9bc8b95d1c9ca26691"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "charOffset": 2046,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1974,
                  "charLength": 146,
                  "snippet": {
                    "text": "  err = 'Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid'\n\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "669c907ae0c45e6b7aa4c7d28191ea505096c80bbbd351f90c1c7f392bf2e51f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 3,
                  "charOffset": 2089,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 2043,
                  "charLength": 135,
                  "snippet": {
                    "text": "\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n\n  # Verify the output message contains appropriate output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e9df8b76685541a1825d2c2597d42561844854d7b0b43adb78a3b4592e4d5df"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 3,
                  "charOffset": 2123,
                  "charLength": 55,
                  "snippet": {
                    "text": "# Verify the output message contains appropriate output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 2087,
                  "charLength": 118,
                  "snippet": {
                    "text": "  Assert(p.terminated_by_signal)\n\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8d0e862814958e84c106f03ef0b3b46293955360128d47218192c0fb223167c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "charOffset": 2181,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2120,
                  "charLength": 86,
                  "snippet": {
                    "text": "\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d79de3e3364a2ebefba3d90687eb9618f0727d697823c830d1e627bf8749686a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2275,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2207,
                  "charLength": 136,
                  "snippet": {
                    "text": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "056dbdc03e53c210eff13034bdf6d7eca7457a7a67c17e7d9d899b364aca0d0f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name1-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2374,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2344,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d64085db7f1ba832e9deeccdd5de494ecbc567ee5850744491b0ea567861d7e2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 3,
                  "charOffset": 2979,
                  "charLength": 13,
                  "snippet": {
                    "text": "BINARY_OUTPUT"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2948,
                  "charLength": 155,
                  "snippet": {
                    "text": "\nif SUPPORTS_SEH_EXCEPTIONS:\n  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output\n\nEX_BINARY_OUTPUT = gtest_test_utils.Subprocess("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b060d0562c5df295e738f47d81cb422edc908e59966c50497472c39c4e99f0e4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 3,
                  "charOffset": 3190,
                  "charLength": 5,
                  "snippet": {
                    "text": "class"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 3159,
                  "charLength": 133,
                  "snippet": {
                    "text": "if SUPPORTS_SEH_EXCEPTIONS:\n\n  class CatchSehExceptionsTest(gtest_test_utils.TestCase):\n    \"\"\"Tests exception-catching behavior.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d145a4e6f9224137d673de2d9dc9f48bad028abaca9b236666bec268abcdd51"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 7,
                  "charOffset": 3345,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3292,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n    def TestSehExceptions(self, test_output):\n      self.assertIn(\n          (\n              'SEH exception with code 0x2a thrown '"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9552f88de10c8b479fdc82e79f54a1a2ba6c438ee6a4848270741eaf43a8066f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 7,
                  "charOffset": 3525,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3488,
                  "charLength": 116,
                  "snippet": {
                    "text": "          test_output,\n      )\n      self.assertIn(\n          (\n              'SEH exception with code 0x2a thrown '"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "159d9e608ca8144f884feade357034b54c2a9dbd3a54f9106241b0bbeae001b0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 7,
                  "charOffset": 3704,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 3667,
                  "charLength": 140,
                  "snippet": {
                    "text": "          test_output,\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in SetUpTestSuite()', test_output\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4eaff17856197426de136998ea44a1cc84e6a4af35c29b5fff1a8551644f06ab"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 7,
                  "charOffset": 3814,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3719,
                  "charLength": 204,
                  "snippet": {
                    "text": "          'SEH exception with code 0x2a thrown in SetUpTestSuite()', test_output\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in TearDownTestSuite()',\n          test_output,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "52a819154c90345abc44001546ad4d609bcf0693493e1626e6662269c79c958c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 7,
                  "charOffset": 3938,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3901,
                  "charLength": 131,
                  "snippet": {
                    "text": "          test_output,\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in SetUp()', test_output\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f80361ff5281249ed755fcb7707177bd239ac66c4415b033a26ed73a094b8d70"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 7,
                  "charOffset": 4039,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3953,
                  "charLength": 183,
                  "snippet": {
                    "text": "          'SEH exception with code 0x2a thrown in SetUp()', test_output\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in TearDown()', test_output\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b0761aea7a50dcaa46a5bb56788af104be0e8f6817a1553bf76e12b52607d94"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 7,
                  "charOffset": 4143,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 4054,
                  "charLength": 189,
                  "snippet": {
                    "text": "          'SEH exception with code 0x2a thrown in TearDown()', test_output\n      )\n      self.assertIn(\n          'SEH exception with code 0x2a thrown in the test body', test_output\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "832a573355c985b1abc108c50d4d30949fcd5538548783bb17ad8f0f0969a160"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 7,
                  "charOffset": 4315,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 4244,
                  "charLength": 177,
                  "snippet": {
                    "text": "\n    def testCatchesSehExceptionsWithCxxExceptionsEnabled(self):\n      self.TestSehExceptions(EX_BINARY_OUTPUT)\n\n    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bf5db0f98530a321c9d3651fc4e121bfd72d6bfbe2140d41071c2678cfdabdef"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 7,
                  "charOffset": 4428,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 4356,
                  "charLength": 111,
                  "snippet": {
                    "text": "\n    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):\n      self.TestSehExceptions(BINARY_OUTPUT)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e31c4d5e1152b7e3586d0efde3b3b05fdd5f51a6758581cfaef5bde1b6dbc2cf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 3,
                  "charOffset": 4527,
                  "charLength": 41,
                  "snippet": {
                    "text": "\"\"\"Tests C++ exception-catching behavior."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 126,
                  "startColumn": 1,
                  "charOffset": 4467,
                  "charLength": 141,
                  "snippet": {
                    "text": "\nclass CatchCxxExceptionsTest(gtest_test_utils.TestCase):\n  \"\"\"Tests C++ exception-catching behavior.\n\n  Tests in this test case verify that:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5d7a2dbb6703d43923f2d45c557bd1e8075a5c8d7cc2befb968fb1af5cfc030a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 3,
                  "charOffset": 4779,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 4770,
                  "charLength": 127,
                  "snippet": {
                    "text": "  \"\"\"\n\n  def testCatchesCxxExceptionsInFixtureConstructor(self):\n    self.assertTrue(\n        'C++ exception with description '"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9316bf0c1a64633267f39dbffd6bbc83516ef98c013f5fb3eaf3adc2f191f5c2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 3,
                  "charOffset": 5329,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5320,
                  "charLength": 104,
                  "snippet": {
                    "text": "    )\n\n  if (\n      'CxxExceptionInDestructorTest.ThrowsExceptionInDestructor'\n      in EX_BINARY_OUTPUT"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c997d60f6c5e1aa1a84fffe2f3c218dca7086102936fefa8acfe926edcca8cd5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "charOffset": 5496,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 5430,
                  "charLength": 171,
                  "snippet": {
                    "text": "\n    def testCatchesCxxExceptionsInFixtureDestructor(self):\n      self.assertTrue(\n          'C++ exception with description '\n          '\"Standard C++ exception\" thrown '"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "902e2f771948a617f15137da4f52e1c8ef8f28b6759800a128c23d66f7301300"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 7,
                  "charOffset": 5720,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 5678,
                  "charLength": 153,
                  "snippet": {
                    "text": "          EX_BINARY_OUTPUT,\n      )\n      self.assertTrue(\n          'CxxExceptionInDestructorTest::TearDownTestSuite() '\n          'called as expected.'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "769dfd0dde91dc565a42000531c87983330039cceea0db85233504ccf9a49a2b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 3,
                  "charOffset": 5902,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5891,
                  "charLength": 148,
                  "snippet": {
                    "text": "      )\n\n  def testCatchesCxxExceptionsInSetUpTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1f44b685f3e673722147ed752c027b65e1eccf63b5eb55d29a57d5e885220d7a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 3,
                  "charOffset": 7089,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 7080,
                  "charLength": 149,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInTearDownTestCase(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f5a39ddbeba5640119adb680caac4e6f9cc8aa1ad17e45ebe4c930a8d0f72cb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 3,
                  "charOffset": 7335,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 7326,
                  "charLength": 138,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInSetUp(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26b77d8b449bb2386f9fcf18835ac4283c27db80e3a15a3b5669e91f2a847a45"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 3,
                  "charOffset": 8284,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 8275,
                  "charLength": 141,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInTearDown(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74560f7ae090524c8d84dd2f9292ba74c6271e97f3aad65c2c4aa6fdd76d561f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 3,
                  "charOffset": 8823,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 266,
                  "startColumn": 1,
                  "charOffset": 8814,
                  "charLength": 141,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesCxxExceptionsInTestBody(self):\n    self.assertTrue(\n        'C++ exception with description \"Standard C++ exception\"'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c866a01f44868b427d7f882c207e4cabfca7e2471f4a133a68ba4f9030e5ac4f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 3,
                  "charOffset": 9516,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 289,
                  "startColumn": 1,
                  "charOffset": 9507,
                  "charLength": 148,
                  "snippet": {
                    "text": "    )\n\n  def testCatchesNonStdCxxExceptions(self):\n    self.assertTrue(\n        'Unknown C++ exception thrown in the test body' in EX_BINARY_OUTPUT,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9724b8af11d52befc4111c1f4007f775edc5c4a27a3dce193a48eb78f82087b9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 3,
                  "charOffset": 9691,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 295,
                  "startColumn": 1,
                  "charOffset": 9682,
                  "charLength": 184,
                  "snippet": {
                    "text": "    )\n\n  def testUnhandledCxxExceptionsAbortTheProgram(self):\n    # Filters out SEH exception tests on Windows. Unhandled SEH exceptions\n    # cause tests to show pop-up windows there."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "20a71728dbced469e263a651677208ae2c50d43e9a841a35d4640aca85d76e7d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-catch-exceptions-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 3,
                  "charOffset": 10400,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 313,
                  "startColumn": 1,
                  "charOffset": 10370,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "12eb50f015bead0faeb0602dbf94d30a851413e552750d0d119dcce1ac0382e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "charOffset": 1822,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1796,
                  "charLength": 69,
                  "snippet": {
                    "text": "\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "47253c35177bf80e4981d283893884a82ddc6db3882e84c1a2602f5b70e574fa"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "charOffset": 1905,
                  "charLength": 67,
                  "snippet": {
                    "text": "\"\"\"Runs the given command and verifies its exit code and output.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1866,
                  "charLength": 155,
                  "snippet": {
                    "text": "\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = \"Duplicate parameterized test name 'a'\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "782b03a0fcc537e6ecdbe88c69f314869e30dca615cf7362f426dee148bae51a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "charOffset": 1976,
                  "charLength": 3,
                  "snippet": {
                    "text": "err"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1903,
                  "charLength": 162,
                  "snippet": {
                    "text": "  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n\n  err = \"Duplicate parameterized test name 'a'\"\n\n  p = gtest_test_utils.Subprocess(command)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53cc46a59969eba84043af5ede4c6d8f8d90a33971540fd3504447408cb633c0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "charOffset": 2025,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1974,
                  "charLength": 125,
                  "snippet": {
                    "text": "  err = \"Duplicate parameterized test name 'a'\"\n\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee506604cfe9435cd566fe86616fc8c3907642bb2fe3206373194eedadecbc18"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 3,
                  "charOffset": 2068,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 2022,
                  "charLength": 110,
                  "snippet": {
                    "text": "\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n\n  # Check for appropriate output"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ada50fecbbc339f01e2835fc42b4fd6a8bce662d411e74269e84605f1a197652"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 3,
                  "charOffset": 2102,
                  "charLength": 30,
                  "snippet": {
                    "text": "# Check for appropriate output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 2066,
                  "charLength": 93,
                  "snippet": {
                    "text": "  Assert(p.terminated_by_signal)\n\n  # Check for appropriate output\n  Assert(err in p.output)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bf21b59ace900a1d553571fce8a13b1c91720ddc6327c73cd13783ccfa99495"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 3,
                  "charOffset": 2135,
                  "charLength": 6,
                  "snippet": {
                    "text": "Assert"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2099,
                  "charLength": 61,
                  "snippet": {
                    "text": "\n  # Check for appropriate output\n  Assert(err in p.output)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "967490b42354f267e9a0c1dae58efa2158541d5979e5597928d3751e8d4a873e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2229,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2161,
                  "charLength": 136,
                  "snippet": {
                    "text": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "69cc3282e5e09d56d2b7af6d7418d6c6516087ce7b5aa53cb4b253124432ca40"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-param-test-invalid-name2-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2328,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2298,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c20ece41a0fb14d92f49e1bc6418dfe21dd712764fc8fe0680e0ee59e14b0b92"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2400,
                  "charLength": 20,
                  "snippet": {
                    "text": "STACK_TRACE_TEMPLATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2371,
                  "charLength": 112,
                  "snippet": {
                    "text": "\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\n  STACK_TRACE_ENTITY_TEMPLATE = ''\nelse:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c63e29899c74a2a60802a416b25fb264fbd1b44674aa4dbd591fa000123e9e93"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 3,
                  "charOffset": 2445,
                  "charLength": 27,
                  "snippet": {
                    "text": "STACK_TRACE_ENTITY_TEMPLATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 60,
                  "startColumn": 1,
                  "charOffset": 2372,
                  "charLength": 141,
                  "snippet": {
                    "text": "if SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\n  STACK_TRACE_ENTITY_TEMPLATE = ''\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "33f5914689f1f500b3cf4cf3f6d86cdcc576457e9596d474855d8c668dd226d0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 3,
                  "charOffset": 2486,
                  "charLength": 20,
                  "snippet": {
                    "text": "STACK_TRACE_TEMPLATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2443,
                  "charLength": 158,
                  "snippet": {
                    "text": "  STACK_TRACE_ENTITY_TEMPLATE = ''\nelse:\n  STACK_TRACE_TEMPLATE = '\\n'\n  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "26c1c15292726bfe39259faa4845da3a2d27115e2987a8f6df7b68f626c5a72c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 3,
                  "charOffset": 2516,
                  "charLength": 27,
                  "snippet": {
                    "text": "STACK_TRACE_ENTITY_TEMPLATE"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 2478,
                  "charLength": 169,
                  "snippet": {
                    "text": "else:\n  STACK_TRACE_TEMPLATE = '\\n'\n  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e15048d15110ebd0ddd7c003b7bdfa0f1b804a95996c67c6217a96c8e063080f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 3,
                  "charOffset": 2557,
                  "charLength": 44,
                  "snippet": {
                    "text": "# unittest.main() can't handle unknown flags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 2484,
                  "charLength": 164,
                  "snippet": {
                    "text": "  STACK_TRACE_TEMPLATE = '\\n'\n  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d170ce14a790ea8a219bc1a29d33f0e0a7afec06b585fa6b6a36be642083c5e5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "charOffset": 2604,
                  "charLength": 3,
                  "snippet": {
                    "text": "sys"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2514,
                  "charLength": 201,
                  "snippet": {
                    "text": "  STACK_TRACE_ENTITY_TEMPLATE = '&#x0A;'\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\n\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d3cae2010f4575230bc70d57b6afbd968ae2fa6e836ea9bf4550c62434820c02"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (160 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (160 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 121,
                  "charOffset": 3075,
                  "charLength": 40,
                  "snippet": {
                    "text": "mestamp=\"*\" classname=\"SuccessfulTest\"/>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 2716,
                  "charLength": 528,
                  "snippet": {
                    "text": "<testsuites tests=\"26\" failures=\"5\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88ca764248bcbefd87ba83330115980a1691d17018459e2407a9657c6a441845"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (152 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (152 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 121,
                  "charOffset": 3365,
                  "charLength": 32,
                  "snippet": {
                    "text": "tamp=\"*\" classname=\"FailedTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 3116,
                  "charLength": 496,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"61\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"FailedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5e023bda469b6066335428323c0680f1ebac4a84fc7b4e1cfac132a4edd18bec"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (179 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (179 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 121,
                  "charOffset": 3518,
                  "charLength": 59,
                  "snippet": {
                    "text": "_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 3131,
                  "charLength": 485,
                  "snippet": {
                    "text": "  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"61\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"FailedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "653898fbb0687672f6f3aba345f2c24410cd9942d2f673fbf192b083ef78dd8d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (161 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (161 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 121,
                  "charOffset": 3913,
                  "charLength": 41,
                  "snippet": {
                    "text": "mestamp=\"*\" classname=\"MixedResultTest\"/>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 3659,
                  "charLength": 633,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"MixedResultTest\" tests=\"3\" failures=\"1\" disabled=\"1\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"88\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"93\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b7c4470504802d76c419149091e5e22541fe83126d3bc043447d9a5447261ae3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (157 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (157 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 121,
                  "charOffset": 4075,
                  "charLength": 37,
                  "snippet": {
                    "text": "tamp=\"*\" classname=\"MixedResultTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 3674,
                  "charLength": 653,
                  "snippet": {
                    "text": "  <testsuite name=\"MixedResultTest\" tests=\"3\" failures=\"1\" disabled=\"1\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"88\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"93\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f384c3fb538007cb5e8f3625d4d01ada54f61cb982fdac440a724dbe52417f9d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (179 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (179 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 121,
                  "charOffset": 4233,
                  "charLength": 59,
                  "snippet": {
                    "text": "_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 3793,
                  "charLength": 538,
                  "snippet": {
                    "text": "    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"88\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n    <testcase name=\"Fails\" file=\"gtest_xml_output_unittest_.cc\" line=\"93\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23367c4dddc0fc65d66179f351bec01c011487f201b533f4b940d35b829ef10a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (179 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (179 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 121,
                  "charOffset": 4478,
                  "charLength": 59,
                  "snippet": {
                    "text": "_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 4328,
                  "charLength": 248,
                  "snippet": {
                    "text": "  1\n  2%(stack)s]]></failure>\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  2&#x0A;  3%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  2"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4f95d070ad09c784418592372a4c837ed7707d013df5c541874620b453731837"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (170 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (170 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 121,
                  "charOffset": 4739,
                  "charLength": 50,
                  "snippet": {
                    "text": "me=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 4577,
                  "charLength": 345,
                  "snippet": {
                    "text": "  3%(stack)s]]></failure>\n    </testcase>\n    <testcase name=\"DISABLED_test\" file=\"gtest_xml_output_unittest_.cc\" line=\"98\" status=\"notrun\" result=\"suppressed\" time=\"*\" timestamp=\"*\" classname=\"MixedResultTest\"/>\n  </testsuite>\n  <testsuite name=\"XmlQuotingTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "83764d8cd2537cdaa1cfebdd3acbed6939855017eccf9e6eb43629ee7d010f34"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (164 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (164 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 121,
                  "charOffset": 5043,
                  "charLength": 44,
                  "snippet": {
                    "text": "*\" timestamp=\"*\" classname=\"XmlQuotingTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 95,
                  "startColumn": 1,
                  "charOffset": 4790,
                  "charLength": 546,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"XmlQuotingTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"OutputsCData\" file=\"gtest_xml_output_unittest_.cc\" line=\"102\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"XmlQuotingTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;XML output: &lt;?xml encoding=&quot;utf-8&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11a4b308efb8958f482d450506133086b12b66baf854dc197c52caaf6a920e58"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (241 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (241 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 121,
                  "charOffset": 5208,
                  "charLength": 121,
                  "snippet": {
                    "text": "&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 4805,
                  "charLength": 637,
                  "snippet": {
                    "text": "  <testsuite name=\"XmlQuotingTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"OutputsCData\" file=\"gtest_xml_output_unittest_.cc\" line=\"102\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"XmlQuotingTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;XML output: &lt;?xml encoding=&quot;utf-8&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed\nXML output: <?xml encoding=\"utf-8\"><top><![CDATA[cdata text]]>]]&gt;<![CDATA[</top>%(stack)s]]></failure>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ae7078fa93127c8f890455d7a3d4c369ff41740746cad75231b5f07c194cd54d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 121,
                  "charOffset": 5594,
                  "charLength": 4,
                  "snippet": {
                    "text": "\"*\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 5443,
                  "charLength": 514,
                  "snippet": {
                    "text": "    </testcase>\n  </testsuite>\n  <testsuite name=\"InvalidCharactersTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"InvalidCharactersInMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"109\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "11ab6dad7794947db11b0cee4102cf02ba5b47dc1651fde618f00d3e3549f2a3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (185 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (185 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 121,
                  "charOffset": 5719,
                  "charLength": 65,
                  "snippet": {
                    "text": "pleted\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 5459,
                  "charLength": 505,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"InvalidCharactersTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"InvalidCharactersInMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"109\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90d4d941c91b7a72f46f725a14cd4c0a639b96f0163d4f50c1692302ee232ee1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (172 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (172 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 121,
                  "charOffset": 5905,
                  "charLength": 52,
                  "snippet": {
                    "text": ")s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 5474,
                  "charLength": 546,
                  "snippet": {
                    "text": "  <testsuite name=\"InvalidCharactersTest\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"InvalidCharactersInMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"109\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"InvalidCharactersTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;Invalid characters in brackets []%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nFailed\nInvalid characters in brackets []%(stack)s]]></failure>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5441cdedf649760f9cdae7f58d32cf96401f9a752de2b0afab6df477a76663b6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (175 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (175 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 121,
                  "charOffset": 6288,
                  "charLength": 55,
                  "snippet": {
                    "text": "ssed\" time=\"*\" timestamp=\"*\" classname=\"DisabledTest\"/>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 6037,
                  "charLength": 436,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"DisabledTest\" tests=\"1\" failures=\"0\" disabled=\"1\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"DISABLED_test_not_run\" file=\"gtest_xml_output_unittest_.cc\" line=\"68\" status=\"notrun\" result=\"suppressed\" time=\"*\" timestamp=\"*\" classname=\"DisabledTest\"/>\n  </testsuite>\n  <testsuite name=\"SkippedTest\" tests=\"3\" failures=\"1\" disabled=\"0\" skipped=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aebbcf5cc37ae95ad3158fbb7942e23d74f13721d5d016e95280203dc27c058a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (153 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (153 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 121,
                  "charOffset": 6594,
                  "charLength": 33,
                  "snippet": {
                    "text": "tamp=\"*\" classname=\"SkippedTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 6344,
                  "charLength": 426,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"SkippedTest\" tests=\"3\" failures=\"1\" disabled=\"0\" skipped=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Skipped\" status=\"run\" file=\"gtest_xml_output_unittest_.cc\" line=\"75\" result=\"skipped\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\n%(stack)s]]></skipped>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9a4cf854641aabceebec0a9ec501ebd9ae15d3ab8249d3962ee2275bb5ca1e77"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (164 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (164 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 121,
                  "charOffset": 6907,
                  "charLength": 44,
                  "snippet": {
                    "text": "e=\"*\" timestamp=\"*\" classname=\"SkippedTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 6748,
                  "charLength": 442,
                  "snippet": {
                    "text": "%(stack)s]]></skipped>\n    </testcase>\n    <testcase name=\"SkippedWithMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"79\" status=\"run\" result=\"skipped\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;It is good practice to tell why you skip a test.%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\nIt is good practice to tell why you skip a test.%(stack)s]]></skipped>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a5b93e979a94f57f47ecdfbaffa94192a34d43feff1feb0f9f5bed2ef715c07"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (167 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (167 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 121,
                  "charOffset": 7072,
                  "charLength": 47,
                  "snippet": {
                    "text": "ity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 6771,
                  "charLength": 435,
                  "snippet": {
                    "text": "    </testcase>\n    <testcase name=\"SkippedWithMessage\" file=\"gtest_xml_output_unittest_.cc\" line=\"79\" status=\"run\" result=\"skipped\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;It is good practice to tell why you skip a test.%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\nIt is good practice to tell why you skip a test.%(stack)s]]></skipped>\n    </testcase>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa3e163f984b3b589899a4e34ba81c3a35b592f2e7d3ef20696ddbaa4dd456b0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (167 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (167 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 121,
                  "charOffset": 7327,
                  "charLength": 47,
                  "snippet": {
                    "text": "time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 7120,
                  "charLength": 469,
                  "snippet": {
                    "text": "It is good practice to tell why you skip a test.%(stack)s]]></skipped>\n    </testcase>\n    <testcase name=\"SkippedAfterFailure\" file=\"gtest_xml_output_unittest_.cc\" line=\"83\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eb70102f55377172b9538918172972f88b414b9e08f6fc44c159af247600d331"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (179 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (179 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 121,
                  "charOffset": 7495,
                  "charLength": 59,
                  "snippet": {
                    "text": "_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 7191,
                  "charLength": 402,
                  "snippet": {
                    "text": "    </testcase>\n    <testcase name=\"SkippedAfterFailure\" file=\"gtest_xml_output_unittest_.cc\" line=\"83\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SkippedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "071cbeeac94806e2f3717666fbe26c70fd346b2e1ec4f95d3fb015525e4c9f64"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (167 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (167 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 121,
                  "charOffset": 7740,
                  "charLength": 47,
                  "snippet": {
                    "text": "ity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 125,
                  "startColumn": 1,
                  "charOffset": 7590,
                  "charLength": 284,
                  "snippet": {
                    "text": "  1\n  2%(stack)s]]></failure>\n      <skipped message=\"gtest_xml_output_unittest_.cc:*&#x0A;It is good practice to tell why you skip a test.%(stack_entity)s\"><![CDATA[gtest_xml_output_unittest_.cc:*\nIt is good practice to tell why you skip a test.%(stack)s]]></skipped>\n    </testcase>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "43c32ad2a5a8d7d534ea6a968d53e278a56feebb43f0b92105d485e14c331d01"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (169 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (169 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 121,
                  "charOffset": 8011,
                  "charLength": 49,
                  "snippet": {
                    "text": "\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 7875,
                  "charLength": 375,
                  "snippet": {
                    "text": "\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"OneProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"121\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b8353b79f557e51e31c2621f2b9b443af3b294a2ed8e2fad16bb5dd93c7296c7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (170 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (170 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 121,
                  "charOffset": 8181,
                  "charLength": 50,
                  "snippet": {
                    "text": "\" timestamp=\"*\" classname=\"PropertyRecordingTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 7876,
                  "charLength": 417,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"OneProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"121\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a4b171bf4a577bc287da8ee7021ec4c6c9238bf48d89d2975f365a11ea959754"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (176 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (176 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 121,
                  "charOffset": 8450,
                  "charLength": 56,
                  "snippet": {
                    "text": "ime=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 8294,
                  "charLength": 276,
                  "snippet": {
                    "text": "      </properties>\n    </testcase>\n    <testcase name=\"IntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"125\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_int\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7c015396726cc30189fae70c5fe71dce23cef6ec8e411a650545693cc373f748"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (174 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (174 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 121,
                  "charOffset": 8727,
                  "charLength": 54,
                  "snippet": {
                    "text": "e=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 8571,
                  "charLength": 272,
                  "snippet": {
                    "text": "      </properties>\n    </testcase>\n    <testcase name=\"ThreeProperties\" file=\"gtest_xml_output_unittest_.cc\" line=\"129\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5acc335a8f88c489750246268ac6d1a0c0fcb7e50a2f1a867a7b4a5a91d5d81d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (190 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (190 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 121,
                  "charOffset": 9086,
                  "charLength": 70,
                  "snippet": {
                    "text": "=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 8930,
                  "charLength": 288,
                  "snippet": {
                    "text": "      </properties>\n    </testcase>\n    <testcase name=\"TwoValuesForOneKeyUsesLastValue\" file=\"gtest_xml_output_unittest_.cc\" line=\"135\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"2\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "27e90074c5243ddb8a5c1244c01faf95a8c3567b7930c522d9868496835bc956"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (166 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (166 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 121,
                  "charOffset": 9507,
                  "charLength": 46,
                  "snippet": {
                    "text": "e=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 155,
                  "startColumn": 1,
                  "charOffset": 9255,
                  "charLength": 360,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"NoFixtureTest\" tests=\"3\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n     <testcase name=\"RecordProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"140\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6543e3439564efc1919876af9e541dae5c3387041368e805eed1147831d39dd8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (199 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (199 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 121,
                  "charOffset": 9774,
                  "charLength": 79,
                  "snippet": {
                    "text": "atus=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 9616,
                  "charLength": 315,
                  "snippet": {
                    "text": "       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordIntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"153\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_int\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "60de5f58c2e13cd7968a996d6342ba88bedff40617ea90f230f04555ff6a0d40"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (202 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (202 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 121,
                  "charOffset": 10090,
                  "charLength": 82,
                  "snippet": {
                    "text": " status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 165,
                  "startColumn": 1,
                  "charOffset": 9932,
                  "charLength": 321,
                  "snippet": {
                    "text": "       </properties>\n     </testcase>\n     <testcase name=\"ExternalUtilityThatCallsRecordStringValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"157\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"NoFixtureTest\">\n       <properties>\n         <property name=\"key_for_utility_string\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f7044ee4b57e4cea9b327361b742fa85291ca1f8005f4b602023e39fde0541f3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 121,
                  "charOffset": 10427,
                  "charLength": 4,
                  "snippet": {
                    "text": "\"*\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 10275,
                  "charLength": 562,
                  "snippet": {
                    "text": "     </testcase>\n  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b6899c5116dc617611985ee32df71cc88064c08ae190d327eda11b6e27f6ebd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (202 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (202 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 121,
                  "charOffset": 10552,
                  "charLength": 82,
                  "snippet": {
                    "text": "un\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "charOffset": 10292,
                  "charLength": 763,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f4876efd3fbb27d1aa54cc7f5114021b6be1849c0e24c3f0cda7d68bf99b59e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (202 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (202 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 121,
                  "charOffset": 10755,
                  "charLength": 82,
                  "snippet": {
                    "text": "un\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 173,
                  "startColumn": 1,
                  "charOffset": 10307,
                  "charLength": 966,
                  "snippet": {
                    "text": "  <testsuite name=\"Single/ValueParamTest\" tests=\"4\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88b36bf667dbe98e6195df5ccef5aea2aea896ce2cc446112ebe5a487ba45366"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (217 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (217 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 121,
                  "charOffset": 10958,
                  "charLength": 97,
                  "snippet": {
                    "text": "=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 174,
                  "startColumn": 1,
                  "charOffset": 10432,
                  "charLength": 856,
                  "snippet": {
                    "text": "    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a8c14f4bb9cb4984fd4c84366cd4f45864d49f6affbb5b6063bd5ff944ba9ea4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (217 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (217 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 121,
                  "charOffset": 11176,
                  "charLength": 97,
                  "snippet": {
                    "text": "=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 10635,
                  "charLength": 768,
                  "snippet": {
                    "text": "    <testcase name=\"HasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n    <testcase name=\"AnotherTestThatHasValueParamAttribute/1\" file=\"gtest_xml_output_unittest_.cc\" line=\"165\" value_param=\"42\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>\n  <testsuite name=\"TypedTest/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "405c8b5601df3c724dcb4381c662b8552e415826cd1c6ea068071244330d4d7d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (187 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (187 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 121,
                  "charOffset": 11524,
                  "charLength": 67,
                  "snippet": {
                    "text": "esult=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/0\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 11274,
                  "charLength": 447,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"TypedTest/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"173\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/0\" />\n  </testsuite>\n  <testsuite name=\"TypedTest/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bd2922a8a90e144566a1f89f5b4a087fa8935c8bfe7c7078fdad3b5aef80afc5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (187 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (187 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 121,
                  "charOffset": 11842,
                  "charLength": 67,
                  "snippet": {
                    "text": "esult=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/1\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 11592,
                  "charLength": 471,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"TypedTest/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"173\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/1\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "302fd8cbcfc3409dd937c744e0564cde0dc91d8dfe6030a20331d3e4a10bfcd6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (138 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (138 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 121,
                  "charOffset": 12045,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"*\" timestamp=\"*\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 11722,
                  "charLength": 568,
                  "snippet": {
                    "text": "    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"173\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"TypedTest/1\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />\n  </testsuite>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7df7aa921030e0e2585a5d721e152df2429f4e074f404d60da5fc847da0f46da"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (211 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (211 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 121,
                  "charOffset": 12184,
                  "charLength": 91,
                  "snippet": {
                    "text": "esult=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 11910,
                  "charLength": 519,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/0\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fe032fc313a44edcc7ec6670464a3cf5021aaa773d00ffa44d43b5a507aa2b60"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (138 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (138 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 121,
                  "charOffset": 12411,
                  "charLength": 18,
                  "snippet": {
                    "text": "\"*\" timestamp=\"*\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 12064,
                  "charLength": 592,
                  "snippet": {
                    "text": "    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/0\" />\n  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/1\" />\n  </testsuite>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "65b185b52da2e9c6654cab7bb9c713fa80fae0308c5644450d4acc621655d67f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (211 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (211 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 121,
                  "charOffset": 12550,
                  "charLength": 91,
                  "snippet": {
                    "text": "esult=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/1\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 187,
                  "startColumn": 1,
                  "charOffset": 12276,
                  "charLength": 401,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"Single/TypeParameterizedTestSuite/1\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasTypeParamAttribute\" file=\"gtest_xml_output_unittest_.cc\" line=\"180\" type_param=\"*\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/TypeParameterizedTestSuite/1\" />\n  </testsuite>\n</testsuites>\"\"\" % {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "768fda920fda15d49e95fdb6f87dc3f0f02029e4eac1b5d99a6a15916b66138e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (160 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (160 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 121,
                  "charOffset": 13219,
                  "charLength": 40,
                  "snippet": {
                    "text": "mestamp=\"*\" classname=\"SuccessfulTest\"/>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 12968,
                  "charLength": 323,
                  "snippet": {
                    "text": "  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\"\n             errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n</testsuites>\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "efa22726eb60d7acd66bf6b6c889c057a881756612d13d134e1618ee9c011520"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (160 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (160 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 121,
                  "charOffset": 13721,
                  "charLength": 40,
                  "snippet": {
                    "text": "mestamp=\"*\" classname=\"SuccessfulTest\"/>"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 206,
                  "startColumn": 1,
                  "charOffset": 13363,
                  "charLength": 583,
                  "snippet": {
                    "text": "<testsuites tests=\"3\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1988bf670496cc7fc076cae3c7fe10ab0049dae8bfe2e0d82378dae94fff7b20"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (169 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (169 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 121,
                  "charOffset": 13897,
                  "charLength": 49,
                  "snippet": {
                    "text": "\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 208,
                  "startColumn": 1,
                  "charOffset": 13601,
                  "charLength": 541,
                  "snippet": {
                    "text": "    <testcase name=\"Succeeds\" file=\"gtest_xml_output_unittest_.cc\" line=\"53\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"IntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"125\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2108461411f4abbee2752898e536ee707997982edde29260864c5d7b4d1749b1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (176 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (176 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 121,
                  "charOffset": 14067,
                  "charLength": 56,
                  "snippet": {
                    "text": "ime=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 13762,
                  "charLength": 425,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"IntValuedProperty\" file=\"gtest_xml_output_unittest_.cc\" line=\"125\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_int\" value=\"1\"/>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "152eeae8c23fe87ccf40644721f6056e479530b0545e8461c159dde5593e0eb0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (124 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (124 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 121,
                  "charOffset": 14359,
                  "charLength": 4,
                  "snippet": {
                    "text": "\"*\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 215,
                  "startColumn": 1,
                  "charOffset": 14208,
                  "charLength": 373,
                  "snippet": {
                    "text": "    </testcase>\n  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "640f2e885e706f09e042ce68c0389c8995301388b229c80626709ca3d64b5a52"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (202 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (202 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 121,
                  "charOffset": 14484,
                  "charLength": 82,
                  "snippet": {
                    "text": "un\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 14224,
                  "charLength": 374,
                  "snippet": {
                    "text": "  </testsuite>\n  <testsuite name=\"Single/ValueParamTest\" tests=\"1\" failures=\"0\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"HasValueParamAttribute/0\" file=\"gtest_xml_output_unittest_.cc\" line=\"164\" value_param=\"33\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"Single/ValueParamTest\" />\n  </testsuite>\n</testsuites>\"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2371927f9ad305b1131a926d50a4e6b71b683ef7a7b2e8964670627ed31ac30e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (122 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (122 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 121,
                  "charOffset": 14896,
                  "charLength": 2,
                  "snippet": {
                    "text": "\">"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 14665,
                  "charLength": 496,
                  "snippet": {
                    "text": "<testsuites tests=\"0\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\"\n            timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"NonTestSuiteFailure\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"\">\n      <failure message=\"gtest_no_test_unittest.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_no_test_unittest.cc:*"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8fb6bf558b2f16c1248f7f5277dc02360161fe5d4dfb04f2c46056ae6c4f24ef"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E501 line too long (171 > 120 characters)",
            "markdown": "PEP 8: E501 line too long (171 \\> 120 characters)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 121,
                  "charOffset": 15110,
                  "charLength": 51,
                  "snippet": {
                    "text": "ity)s\" type=\"\"><![CDATA[gtest_no_test_unittest.cc:*"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 225,
                  "startColumn": 1,
                  "charOffset": 14776,
                  "charLength": 424,
                  "snippet": {
                    "text": "  <testsuite name=\"NonTestSuiteFailure\" tests=\"1\" failures=\"1\" disabled=\"0\" skipped=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\">\n    <testcase name=\"\" status=\"run\" result=\"completed\" time=\"*\" timestamp=\"*\" classname=\"\">\n      <failure message=\"gtest_no_test_unittest.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2%(stack_entity)s\" type=\"\"><![CDATA[gtest_no_test_unittest.cc:*\nExpected equality of these values:\n  1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88ac192eff1e73e59d0696b70a8901aba323489a9972c9018e825c537697c866"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 3,
                  "charOffset": 15686,
                  "charLength": 59,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's XML output functionality.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 247,
                  "startColumn": 1,
                  "charOffset": 15614,
                  "charLength": 206,
                  "snippet": {
                    "text": "\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0d39a76cad333f9d59c36d9d31ca49ecfb85e4f61e124e0e82b648d8a33ea19b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 3,
                  "charOffset": 15749,
                  "charLength": 71,
                  "snippet": {
                    "text": "# This test currently breaks on platforms that do not support typed and"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 249,
                  "startColumn": 1,
                  "charOffset": 15684,
                  "charLength": 224,
                  "snippet": {
                    "text": "  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0f968986b460e5da2a194f04b923bf6d76725d1179bdf802ec038a53df66b166"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 3,
                  "charOffset": 15823,
                  "charLength": 58,
                  "snippet": {
                    "text": "# type-parameterized tests, so we don't run it under them."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 250,
                  "startColumn": 1,
                  "charOffset": 15746,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7bcde00de26efe445459504ca26c2bc03b1b7bc29dca3787f219b39dd5598966"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 3,
                  "charOffset": 15884,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 15747,
                  "charLength": 199,
                  "snippet": {
                    "text": "  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n\n    def testNonEmptyXmlOutput(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8bbbfce3fde7638c5a81717fd527d872aaf2651f86ca3c87e810612bee48230e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 7,
                  "charOffset": 15953,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Generates non-empty XML and verifies it matches the expected output."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 15909,
                  "charLength": 185,
                  "snippet": {
                    "text": "\n    def testNonEmptyXmlOutput(self):\n      \"\"\"Generates non-empty XML and verifies it matches the expected output.\n\n      Runs a test program that generates a non-empty XML output, and"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5eb077c4c4695de6242e1649fe774f8eb95fb670a686dd949765fb48ab146b43"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 7,
                  "charOffset": 16156,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 16095,
                  "charLength": 161,
                  "snippet": {
                    "text": "      tests that the XML output is expected.\n      \"\"\"\n      self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)\n\n  def testNoTestXmlOutput(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a84e8ad558332bb386ea5394dbda2ce97ae04934339481d567ccdb335b2fe865"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 3,
                  "charOffset": 16226,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 1,
                  "charOffset": 16150,
                  "charLength": 181,
                  "snippet": {
                    "text": "      self._TestXmlOutput(GTEST_PROGRAM_NAME, EXPECTED_NON_EMPTY_XML, 1)\n\n  def testNoTestXmlOutput(self):\n    \"\"\"Verifies XML output for a Google Test binary without actual tests.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3598b293d1a994facfd033239bd99c59361f6cb86ff28a0e552843f5360ab7ec"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 3,
                  "charOffset": 16547,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 16469,
                  "charLength": 182,
                  "snippet": {
                    "text": "    self._TestXmlOutput('gtest_no_test_unittest', EXPECTED_NO_TEST_XML, 0)\n\n  def testTimestampValue(self):\n    \"\"\"Checks whether the timestamp attribute in the XML output is valid.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23f1e616acfc8a641cb5ff1e859ec697d1b47dadb61638da2efb136447c95aa9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 3,
                  "charOffset": 17722,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 17699,
                  "charLength": 135,
                  "snippet": {
                    "text": "    actual.unlink()\n\n  def testDefaultOutputFile(self):\n    \"\"\"Tests XML file with default name is created when name is not specified.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00185a43fac92e6667d17641144f49279911ff46859439231ebd79befaf06beb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 7,
                  "charOffset": 18191,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 311,
                  "startColumn": 1,
                  "charOffset": 18170,
                  "charLength": 91,
                  "snippet": {
                    "text": "    )\n    try:\n      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "80163d96321fb83100baf0a69d16f5ee888e973a162f5d48f8d09230435b13d0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 7,
                  "charOffset": 18240,
                  "charLength": 1,
                  "snippet": {
                    "text": "e"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 313,
                  "startColumn": 1,
                  "charOffset": 18185,
                  "charLength": 124,
                  "snippet": {
                    "text": "      os.remove(output_file)\n    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b86475e61a230b66a3e134f6dcc94a3e8424b8d97acb4ef340fb2177521f6aac"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 7,
                  "charOffset": 18268,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 314,
                  "startColumn": 1,
                  "charOffset": 18214,
                  "charLength": 96,
                  "snippet": {
                    "text": "    except OSError:\n      e = sys.exc_info()[1]\n      if e.errno != errno.ENOENT:\n        raise\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46378180b763f7aeb6d433b6591de687152f4caf52527fc8ad021067bad244dd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 3,
                  "charOffset": 18581,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 325,
                  "startColumn": 1,
                  "charOffset": 18529,
                  "charLength": 162,
                  "snippet": {
                    "text": "    self.assertTrue(os.path.isfile(output_file))\n\n  def testSuppressedXmlOutput(self):\n    \"\"\"Verifies XML output is suppressed if default listener is shut down.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c936714ea1fe1dd9a71ed1405eb8efa20ea9aec903156ede3dcb83f9d248fb8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 7,
                  "charOffset": 18963,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 336,
                  "startColumn": 1,
                  "charOffset": 18918,
                  "charLength": 81,
                  "snippet": {
                    "text": "    )\n    if os.path.isfile(xml_path):\n      os.remove(xml_path)\n\n    command = ["
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a04593f51f66eb7a0447f6715c3458c4b06be8bdd7ec0fb30e6062fdec4b4faf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 7,
                  "charOffset": 19196,
                  "charLength": 63,
                  "snippet": {
                    "text": "# p.signal is available only if p.terminated_by_signal is True."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 345,
                  "startColumn": 1,
                  "charOffset": 19114,
                  "charLength": 203,
                  "snippet": {
                    "text": "    p = gtest_test_utils.Subprocess(command)\n    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "63910089f63e84b6749cf923069334e3b0f8050b248544799563ac827d65e096"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 7,
                  "charOffset": 19266,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 346,
                  "startColumn": 1,
                  "charOffset": 19159,
                  "charLength": 231,
                  "snippet": {
                    "text": "    if p.terminated_by_signal:\n      # p.signal is available only if p.terminated_by_signal is True.\n      self.assertFalse(\n          p.terminated_by_signal,\n          '%s was killed by signal %d' % (GTEST_PROGRAM_NAME, p.signal),"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af25288b19bfc5739818cc25a1a90d7d113ad3d6d0ba912d01d30fa7e534170e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 7,
                  "charOffset": 19415,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 351,
                  "startColumn": 1,
                  "charOffset": 19391,
                  "charLength": 86,
                  "snippet": {
                    "text": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "201e5b702504539a26fea2e4260cbbb6cf1f3de986f649ca17fdc07b8fa1b45d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 7,
                  "charOffset": 19447,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 352,
                  "startColumn": 1,
                  "charOffset": 19399,
                  "charLength": 101,
                  "snippet": {
                    "text": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          1,\n          p.exit_code,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1bd213639798ed5523afe7ee5be85ff6653e12e2b62a9ba77fd3ca6ac009da87"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 3,
                  "charOffset": 19687,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 361,
                  "startColumn": 1,
                  "charOffset": 19637,
                  "charLength": 140,
                  "snippet": {
                    "text": "    self.assertFalse(os.path.isfile(xml_path))\n\n  def testFilteredTestXmlOutput(self):\n    \"\"\"Verifies XML output when a filter is applied.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cf9133bcd96f28e3582c8414131c128c7048d97f41451380ce0e8b8290f1972"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 3,
                  "charOffset": 20089,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 375,
                  "startColumn": 1,
                  "charOffset": 20080,
                  "charLength": 104,
                  "snippet": {
                    "text": "    )\n\n  def testShardedTestXmlOutput(self):\n    \"\"\"Verifies XML output when run using multiple shards.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca64e59abc9c50f99cf9473a550a90054b73d8f5001aa394728bf4e53cc9ea5b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 3,
                  "charOffset": 20509,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 389,
                  "startColumn": 1,
                  "charOffset": 20500,
                  "charLength": 103,
                  "snippet": {
                    "text": "    )\n\n  def _GetXmlOutput(\n      self, gtest_prog_name, extra_args, extra_env, expected_exit_code\n  ):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3e0ea73fabced992f80e93764dcdec7f60e5f1ed63f000d14931d8e3be18144"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 7,
                  "charOffset": 21355,
                  "charLength": 12,
                  "snippet": {
                    "text": "environ_copy"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 413,
                  "startColumn": 1,
                  "charOffset": 21294,
                  "charLength": 155,
                  "snippet": {
                    "text": "    environ_copy = os.environ.copy()\n    if extra_env:\n      environ_copy.update(extra_env)\n    p = gtest_test_utils.Subprocess(command, env=environ_copy)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ea7fbb0fde0581dbca44c6268a631bc982a788caede329d1ba1f91ce1b302eaf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 7,
                  "charOffset": 21487,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 417,
                  "startColumn": 1,
                  "charOffset": 21449,
                  "charLength": 138,
                  "snippet": {
                    "text": "\n    if p.terminated_by_signal:\n      self.assertTrue(\n          False, '%s was killed by signal %d' % (gtest_prog_name, p.signal)\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a172ff591be58f5ca4896a6b285a9d979440bebf3056874bcbdbb35277aa528e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 7,
                  "charOffset": 21604,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 421,
                  "startColumn": 1,
                  "charOffset": 21580,
                  "charLength": 103,
                  "snippet": {
                    "text": "      )\n    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "67e795041bc018a239dce889156269c3993b021046acb4dadce3c8eb39cc6260"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 7,
                  "charOffset": 21636,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 422,
                  "startColumn": 1,
                  "charOffset": 21588,
                  "charLength": 118,
                  "snippet": {
                    "text": "    else:\n      self.assertTrue(p.exited)\n      self.assertEqual(\n          expected_exit_code,\n          p.exit_code,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d81e976dcb85b6d028030c045c6a242ecf99d54304884de8e9ac150c576aec90"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 3,
                  "charOffset": 21927,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 432,
                  "startColumn": 1,
                  "charOffset": 21906,
                  "charLength": 75,
                  "snippet": {
                    "text": "    return actual\n\n  def _TestXmlOutput(\n      self,\n      gtest_prog_name,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7b0e0718fe260fcff71dcbda691ff648596e1769c2be8071bb32abc0f96d1688"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 3,
                  "charOffset": 23015,
                  "charLength": 2,
                  "snippet": {
                    "text": "os"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 466,
                  "startColumn": 1,
                  "charOffset": 22985,
                  "charLength": 100,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ad8b90f041d894fdc1bccb564a1f5ec6ee7265c93b2b8afeb617ade14b013c6e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_output_unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 3,
                  "charOffset": 23061,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 467,
                  "startColumn": 1,
                  "charOffset": 22986,
                  "charLength": 99,
                  "snippet": {
                    "text": "if __name__ == '__main__':\n  os.environ['GTEST_STACK_TRACE_DEPTH'] = '1'\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7df68c1f07a5f8db200d0e681dfb57acb1be23fd98eb9bede5a884754a8e0eb3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "charOffset": 3157,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 3136,
                  "charLength": 155,
                  "snippet": {
                    "text": "\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n\n  p = gtest_test_utils.Subprocess(command, env=environ)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "77a9b092276adfa8f118c84ae56e1b46c5638a7a838c03641555a5e76deb7a11"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "charOffset": 3238,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 3155,
                  "charLength": 178,
                  "snippet": {
                    "text": "  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n\n  p = gtest_test_utils.Subprocess(command, env=environ)\n  if p.terminated_by_signal:\n    return 1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3b3eceabbfe49805b3b6ecd2b1293bd2004f9f4c1be52b49340b52da6f8bb121"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 3,
                  "charOffset": 3294,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 3235,
                  "charLength": 106,
                  "snippet": {
                    "text": "\n  p = gtest_test_utils.Subprocess(command, env=environ)\n  if p.terminated_by_signal:\n    return 1\n  else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7c8f9c827cbf6162903c9a7b39a78e25eddade5e10ccd4c1cf3a071ef43efd1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "charOffset": 3336,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 3292,
                  "charLength": 63,
                  "snippet": {
                    "text": "  if p.terminated_by_signal:\n    return 1\n  else:\n    return 0\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0159aff53abcb9dfdd566b76ab2e27efea19bba4f533ac180d952b6d2e1d2ef8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 3,
                  "charOffset": 3436,
                  "charLength": 53,
                  "snippet": {
                    "text": "\"\"\"Unit test for Google Test's break-on-failure mode."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3371,
                  "charLength": 184,
                  "snippet": {
                    "text": "\nclass GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's break-on-failure mode.\n\n  Tests using the GTEST_BREAK_ON_FAILURE environment variable or"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "59b7c70d919075580aeaa89b5c74a191c0db2ea821c67f1fbfd28e006d4463f1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 3,
                  "charOffset": 3656,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3647,
                  "charLength": 155,
                  "snippet": {
                    "text": "  \"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):\n    \"\"\"Runs googletest-break-on-failure-unittest_ and verifies its behavior.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1798b87f19f048da0b74e53acc31f26e54ae3fed2fe0d8630fc4968447d51e37"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 7,
                  "charOffset": 4367,
                  "charLength": 17,
                  "snippet": {
                    "text": "env_var_value_msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 4330,
                  "charLength": 126,
                  "snippet": {
                    "text": "\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "070257e91e1068ff3dbca56fa858e856613231db80166785c61243fa53c75330"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "charOffset": 4417,
                  "charLength": 17,
                  "snippet": {
                    "text": "env_var_value_msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 116,
                  "startColumn": 1,
                  "charOffset": 4361,
                  "charLength": 123,
                  "snippet": {
                    "text": "      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "400b084db2d610baa494ee70e3ef1b238e5876437eb21b734eb991f0958ebfc7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 7,
                  "charOffset": 4491,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 4457,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "426314c387cfc20fc2f4624a978090b23b810fd170ca9d14cf3e0a0f83353b8e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "charOffset": 4535,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4485,
                  "charLength": 143,
                  "snippet": {
                    "text": "      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed618a0de96a6fabb20210ea62ba112d985aaa0185c68ede8b01dc1d17994bf2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 7,
                  "charOffset": 4591,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4529,
                  "charLength": 125,
                  "snippet": {
                    "text": "      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG\n    else:\n      flag = '--%s' % BREAK_ON_FAILURE_FLAG\n\n    command = [EXE_PATH]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2751893401f92d4a463b352a8dc3012078738f41197c88820ef63f31c2dd6e70"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 7,
                  "charOffset": 4674,
                  "charLength": 7,
                  "snippet": {
                    "text": "command"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 4630,
                  "charLength": 90,
                  "snippet": {
                    "text": "    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if expect_seg_fault:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78c4778a33ea9b8cbac6fea4424d5ed9bcb6132903dd126da60c9037040b08e9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 7,
                  "charOffset": 4727,
                  "charLength": 13,
                  "snippet": {
                    "text": "should_or_not"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4695,
                  "charLength": 101,
                  "snippet": {
                    "text": "\n    if expect_seg_fault:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e326ef73a526ca7be868b2202f01506860a04514ccd695c6c89070469579a78d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 7,
                  "charOffset": 4768,
                  "charLength": 13,
                  "snippet": {
                    "text": "should_or_not"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4721,
                  "charLength": 109,
                  "snippet": {
                    "text": "      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'\n\n    has_seg_fault = Run(command)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "28086631adba306d8f566ca0319f48d0427b8e84445da596119ef236119eea49"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 3,
                  "charOffset": 5137,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 5074,
                  "charLength": 144,
                  "snippet": {
                    "text": "    self.assertTrue(has_seg_fault == expect_seg_fault, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2737ee2e782d20326ae6f79f59bd21acf7408580a04881ec09bc0a64b96ced1f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 3,
                  "charOffset": 5301,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 151,
                  "startColumn": 1,
                  "charOffset": 5219,
                  "charLength": 175,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value=None, expect_seg_fault=0)\n\n  def testEnvVar(self):\n    \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4e3fdaf4a47605dabf9b10f6c6e8397b81fbd0f05e917a6bc15675c07b9fedbb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 3,
                  "charOffset": 5554,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 5473,
                  "charLength": 158,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value='1', flag_value=None, expect_seg_fault=1)\n\n  def testFlag(self):\n    \"\"\"Tests using the --gtest_break_on_failure flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0b70f738fc07d2a810b75e2343180049405b1021289afa14801287ece3b8f89"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 3,
                  "charOffset": 5791,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5710,
                  "charLength": 182,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n\n  def testFlagOverridesEnvVar(self):\n    \"\"\"Tests that the flag overrides the environment variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48f909465626901f217b41aa862dbb2ac18c546494bb15e0496305ee06533d71"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 3,
                  "charOffset": 6204,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 6124,
                  "charLength": 211,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n\n  def testBreakOnFailureOverridesThrowOnFailure(self):\n    \"\"\"Tests that gtest_break_on_failure overrides gtest_throw_on_failure.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1b650dac4dcc5fdfc57a568f3d286ddda54d17a27457092b09cf5d75c508697"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 7,
                  "charOffset": 6396,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 6336,
                  "charLength": 194,
                  "snippet": {
                    "text": "    SetEnvVar(THROW_ON_FAILURE_ENV_VAR, '1')\n    try:\n      self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n    finally:\n      SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9c00b8e845306365bda110ff1848c0dd3910884cd1b9dcf81a7a0d8dcdf0fcc0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 7,
                  "charOffset": 6489,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 6390,
                  "charLength": 158,
                  "snippet": {
                    "text": "      self.RunAndVerify(env_var_value=None, flag_value='1', expect_seg_fault=1)\n    finally:\n      SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)\n\n  if IS_WINDOWS:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b03a5fe806129e8ac18455cd7b173c42dfbe8d4576f71d0d6b6ea51ac880ddc0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 3,
                  "charOffset": 6534,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 6483,
                  "charLength": 117,
                  "snippet": {
                    "text": "      SetEnvVar(THROW_ON_FAILURE_ENV_VAR, None)\n\n  if IS_WINDOWS:\n\n    def testCatchExceptionsDoesNotInterfere(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6a5b701df3a2386b918831a21522cfef08bf240f165d4de3f863100323bba7cb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 7,
                  "charOffset": 6607,
                  "charLength": 58,
                  "snippet": {
                    "text": "\"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 6549,
                  "charLength": 164,
                  "snippet": {
                    "text": "\n    def testCatchExceptionsDoesNotInterfere(self):\n      \"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\"\n\n      SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "881c8194d5acf4e77f4a49ce251d6832ab921a0b8cf2136187fe732e504f4ef0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 7,
                  "charOffset": 6673,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 185,
                  "startColumn": 1,
                  "charOffset": 6601,
                  "charLength": 204,
                  "snippet": {
                    "text": "      \"\"\"Tests that gtest_catch_exceptions doesn't interfere.\"\"\"\n\n      SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')\n      try:\n        self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6f23ff7e1d6b965ae5a3fd8a8e2348e218bb8b0576a2371cc280c0c37e2d0ed4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 7,
                  "charOffset": 6720,
                  "charLength": 3,
                  "snippet": {
                    "text": "try"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6666,
                  "charLength": 154,
                  "snippet": {
                    "text": "\n      SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, '1')\n      try:\n        self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n      finally:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1515a5a1d55982bde481e0d5cf2fb1c9dac0ef19c473bbccc1150e871536339d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 7,
                  "charOffset": 6812,
                  "charLength": 7,
                  "snippet": {
                    "text": "finally"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 6714,
                  "charLength": 157,
                  "snippet": {
                    "text": "      try:\n        self.RunAndVerify(env_var_value='1', flag_value='1', expect_seg_fault=1)\n      finally:\n        SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR, None)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1148347577ea38c9cb51b8520ff802d19a3c3052b30cd4ba5a354e18f8c410c3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-break-on-failure-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 3,
                  "charOffset": 6902,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 193,
                  "startColumn": 1,
                  "charOffset": 6872,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8d954d27d22a45432440c05077d35fd905a270c8328c0a6c1da58694900a02bd"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E402 module level import not at top of file",
            "markdown": "PEP 8: E402 module level import not at top of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1866,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1839,
                  "charLength": 70,
                  "snippet": {
                    "text": "IS_OS2 = os.name == 'os2'\n\nimport atexit\nimport shutil\nimport tempfile"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f28b2f4e879cd0f5ab7a70f2689b603af8bbba9be7512a5f048bca451f09b64"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E402 module level import not at top of file",
            "markdown": "PEP 8: E402 module level import not at top of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1880,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1865,
                  "charLength": 76,
                  "snippet": {
                    "text": "\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7967806460562e7e95dc2fa10c2e99ed47b86601b06abda6e350a7260d0a07c2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E402 module level import not at top of file",
            "markdown": "PEP 8: E402 module level import not at top of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1894,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1866,
                  "charLength": 112,
                  "snippet": {
                    "text": "import atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\n# pylint: enable=g-import-not-at-top"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f8cb4321f5cdc1c45e9e107c1e684f9ae17476dd0545d3fc6c5f7c096ae2d4d7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E402 module level import not at top of file",
            "markdown": "PEP 8: E402 module level import not at top of file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1910,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1880,
                  "charLength": 99,
                  "snippet": {
                    "text": "import shutil\nimport tempfile\nimport unittest as _test_module\n# pylint: enable=g-import-not-at-top\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7f9ceb4e1e002df419496bbf18156a710234416286e5c3141dac5270039f871a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "charOffset": 2220,
                  "charLength": 59,
                  "snippet": {
                    "text": "\"\"\"Sets/unsets an environment variable to a given value.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2186,
                  "charLength": 118,
                  "snippet": {
                    "text": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n\n  if value is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "13e16f6be88b9251e2acf54f3144a62fcba5098b83df659c7446bc212d9544f2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "charOffset": 2283,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2218,
                  "charLength": 142,
                  "snippet": {
                    "text": "  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dd15ec1c461bb301ff1b9485343c99e232c20e7ada53e973f7248d7444966384"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2336,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2281,
                  "charLength": 105,
                  "snippet": {
                    "text": "  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1acd06944698f8504704510df4b04d06f28165f602b2522e725276b6b842673f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "charOffset": 2813,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2774,
                  "charLength": 146,
                  "snippet": {
                    "text": "\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n\n  global _gtest_flags_are_parsed"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "944a5d5638e78af25e3be31ee5b8633d182c4685a294e0f3d4ebeaddce0f14e8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 3,
                  "charOffset": 2890,
                  "charLength": 6,
                  "snippet": {
                    "text": "global"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2811,
                  "charLength": 150,
                  "snippet": {
                    "text": "  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n\n  global _gtest_flags_are_parsed\n  if _gtest_flags_are_parsed:\n    return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0ba54ae205b85f95d0ba3b12086cad62f225f66c14dd21f744332c27e52d2d08"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 3,
                  "charOffset": 2923,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2887,
                  "charLength": 75,
                  "snippet": {
                    "text": "\n  global _gtest_flags_are_parsed\n  if _gtest_flags_are_parsed:\n    return\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7a651cb077939b39a8c6e1ccee4319237d40e479193b167040283d8aeebbd0e3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 3,
                  "charOffset": 2965,
                  "charLength": 23,
                  "snippet": {
                    "text": "_gtest_flags_are_parsed"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2951,
                  "charLength": 129,
                  "snippet": {
                    "text": "    return\n\n  _gtest_flags_are_parsed = True\n  for flag in _flag_map:\n    # The environment variable overrides the default value."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6537c7d56ea199c7c1a92ad1c725331627a76272af0c661ba055027d015e557b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 3,
                  "charOffset": 2998,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2962,
                  "charLength": 153,
                  "snippet": {
                    "text": "\n  _gtest_flags_are_parsed = True\n  for flag in _flag_map:\n    # The environment variable overrides the default value.\n    if flag.upper() in os.environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e94c30b3b5064dd6bd65d60c3ee5ecbb81e8b1c75ed8fe98c8107345d74fbd22"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 7,
                  "charOffset": 3122,
                  "charLength": 9,
                  "snippet": {
                    "text": "_flag_map"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3021,
                  "charLength": 208,
                  "snippet": {
                    "text": "    # The environment variable overrides the default value.\n    if flag.upper() in os.environ:\n      _flag_map[flag] = os.environ[flag.upper()]\n\n    # The command line flag overrides the environment variable."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "49c56ede3531c6ba4bcbd120710ea7c9a7d2d0efda2a227883a5f7f53be04c87"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 7,
                  "charOffset": 3298,
                  "charLength": 6,
                  "snippet": {
                    "text": "prefix"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3230,
                  "charLength": 180,
                  "snippet": {
                    "text": "    i = 1  # Skips the program name.\n    while i < len(argv):\n      prefix = '--' + flag + '='\n      if argv[i].startswith(prefix):\n        _flag_map[flag] = argv[i][len(prefix) :]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "72b331acc9af27f95d84090b20012a37195d182a6198f592f9b21ed09c55e2d1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 7,
                  "charOffset": 3331,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3267,
                  "charLength": 163,
                  "snippet": {
                    "text": "    while i < len(argv):\n      prefix = '--' + flag + '='\n      if argv[i].startswith(prefix):\n        _flag_map[flag] = argv[i][len(prefix) :]\n        del argv[i]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d76ee5fa823fcf1dde6100815766fbc806e6f56b539001d96339b5a16dd59c17"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E203 whitespace before ':'",
            "markdown": "PEP 8: E203 whitespace before ':'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 46,
                  "charOffset": 3407,
                  "charLength": 1,
                  "snippet": {
                    "text": " "
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3292,
                  "charLength": 152,
                  "snippet": {
                    "text": "      prefix = '--' + flag + '='\n      if argv[i].startswith(prefix):\n        _flag_map[flag] = argv[i][len(prefix) :]\n        del argv[i]\n        break"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6d7a23eae069545d4f30ca1b0dbb3c165b95ddd55c31ad6ec18e14ec5f66b0e4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 7,
                  "charOffset": 3451,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 3411,
                  "charLength": 151,
                  "snippet": {
                    "text": "        del argv[i]\n        break\n      else:\n        # We don't increment i in case we just found a --gtest_* flag\n        # and removed it from argv."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68c3fc23b734de090a0a628431e1c65097bf34a803026bed9dafa2fafb04b42c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 3,
                  "charOffset": 3601,
                  "charLength": 42,
                  "snippet": {
                    "text": "\"\"\"Returns the value of the given flag.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3579,
                  "charLength": 127,
                  "snippet": {
                    "text": "\ndef GetFlag(flag):\n  \"\"\"Returns the value of the given flag.\"\"\"\n\n  # In case GetFlag() is called before Main(), we always call"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cba2f1d1a026c5ec02130999ee7c23f90d8c1e485127ba3532216d331aa11a66"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 3,
                  "charOffset": 3647,
                  "charLength": 59,
                  "snippet": {
                    "text": "# In case GetFlag() is called before Main(), we always call"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3599,
                  "charLength": 192,
                  "snippet": {
                    "text": "  \"\"\"Returns the value of the given flag.\"\"\"\n\n  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0cf3a1094ecf3bd34cade03c457d24b086964ab881bb9a5d464c68642b28adc0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 3,
                  "charOffset": 3709,
                  "charLength": 66,
                  "snippet": {
                    "text": "# _ParseAndStripGTestFlags() here to make sure the --gtest_* flags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3644,
                  "charLength": 184,
                  "snippet": {
                    "text": "\n  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02ea6c52fcafb1438fb9287de00f268403799103be667aa1bc858a8216335c96"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 3,
                  "charOffset": 3778,
                  "charLength": 13,
                  "snippet": {
                    "text": "# are parsed."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3645,
                  "charLength": 184,
                  "snippet": {
                    "text": "  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce5acee797f7b2e8378f22e3d84db1c83b5129c85afa57c3a325fd0e8f45f88b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 3,
                  "charOffset": 3794,
                  "charLength": 24,
                  "snippet": {
                    "text": "_ParseAndStripGTestFlags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3707,
                  "charLength": 147,
                  "snippet": {
                    "text": "  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)\n\n  return _flag_map[flag]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "09046cfcd4d661e5a6e5991a616fd5b0b9af3ff20d4ceccd84bbb2e593a3ca88"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 3,
                  "charOffset": 3832,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3792,
                  "charLength": 64,
                  "snippet": {
                    "text": "  _ParseAndStripGTestFlags(sys.argv)\n\n  return _flag_map[flag]\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bcc9b6d3754421eacb29eab0f73c7a385f409a6fb6d1947e9bbc4c54f0ed3453"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 3,
                  "charOffset": 3879,
                  "charLength": 73,
                  "snippet": {
                    "text": "\"\"\"Returns the absolute path of the directory where the .py files are.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3856,
                  "charLength": 145,
                  "snippet": {
                    "text": "\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return os.path.abspath(GetFlag('source_dir'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "fbe7a9d84765138a303a81cb6987f80d6bad17c1d27e9bee6fc7617769319fff"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 3,
                  "charOffset": 3956,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 117,
                  "startColumn": 1,
                  "charOffset": 3877,
                  "charLength": 126,
                  "snippet": {
                    "text": "  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n\n  return os.path.abspath(GetFlag('source_dir'))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c599f519af80ae28022c9625df0281446ba74b8242503684dae39dde81d87e03"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 3,
                  "charOffset": 4025,
                  "charLength": 77,
                  "snippet": {
                    "text": "\"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4003,
                  "charLength": 147,
                  "snippet": {
                    "text": "\ndef GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n\n  return os.path.abspath(GetFlag('build_dir'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "48d60ab1dec4af1abad75401abc2f989660dae2a52a39153c0116a933791963f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 3,
                  "charOffset": 4106,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 4023,
                  "charLength": 129,
                  "snippet": {
                    "text": "  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n\n  return os.path.abspath(GetFlag('build_dir'))\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "86f4f8f5c08912468434bb8b0ca2dc693bc29cd358d262d630984a731c74673f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E302 expected 2 blank lines, found 1",
            "markdown": "PEP 8: E302 expected 2 blank lines, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4171,
                  "charLength": 21,
                  "snippet": {
                    "text": "def _RemoveTempDir():"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 4153,
                  "charLength": 104,
                  "snippet": {
                    "text": "_temp_dir = None\n\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78652865852e441771b2c46ca92ffd1a6886ea9ba393f39e67f235f762f87f5b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "charOffset": 4195,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 4170,
                  "charLength": 88,
                  "snippet": {
                    "text": "\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "14b8f10e72bc222448657f521f59fa543e2205bf15f9ac7ce6bfba1135af3a2d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1",
            "markdown": "PEP 8: E305 expected 2 blank lines after class or function definition, found 1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 4259,
                  "charLength": 31,
                  "snippet": {
                    "text": "atexit.register(_RemoveTempDir)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 4209,
                  "charLength": 83,
                  "snippet": {
                    "text": "    shutil.rmtree(_temp_dir, ignore_errors=True)\n\natexit.register(_RemoveTempDir)\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "51c5d264d18264071c57e689ce0a11d5bc0e4317514b672bf216b20541633e7a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 3,
                  "charOffset": 4313,
                  "charLength": 6,
                  "snippet": {
                    "text": "global"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 4292,
                  "charLength": 92,
                  "snippet": {
                    "text": "\ndef GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2a3306bb0674786bf49d39a2e40289975624d284552e4cce8650f5702adc3afe"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 3,
                  "charOffset": 4332,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4293,
                  "charLength": 110,
                  "snippet": {
                    "text": "def GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b22b49d6333390706f1be788fb3bec003e8dd7896a12ca8f1fd87689101a7ac0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 3,
                  "charOffset": 4387,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 4330,
                  "charLength": 75,
                  "snippet": {
                    "text": "  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "88e01b52636b7584744035682a0accada49f71aef23f30d427037c558ad6016a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 3,
                  "charOffset": 4468,
                  "charLength": 63,
                  "snippet": {
                    "text": "\"\"\"Returns the absolute path of the test binary given its name."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 4405,
                  "charLength": 207,
                  "snippet": {
                    "text": "\ndef GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n\n  The function will print a message and abort the program if the resulting file"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8dbb0b7b96b53771a748812dec9364fc86b7e2b6d5243731537d303ea2cf7c2e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 3,
                  "charOffset": 4882,
                  "charLength": 4,
                  "snippet": {
                    "text": "path"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 157,
                  "startColumn": 1,
                  "charOffset": 4873,
                  "charLength": 100,
                  "snippet": {
                    "text": "  \"\"\"\n\n  path = os.path.abspath(\n      os.path.join(build_dir or GetBuildDir(), executable_name)\n  )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c7ca63a64c6a72569336c5d94d3899129372ba7a0968abe8829ffd789cd8c346"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 3,
                  "charOffset": 4976,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 4906,
                  "charLength": 159,
                  "snippet": {
                    "text": "      os.path.join(build_dir or GetBuildDir(), executable_name)\n  )\n  if (IS_WINDOWS or IS_CYGWIN or IS_OS2) and not path.endswith('.exe'):\n    path += '.exe'\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c9f3207d617145141117084048a0ac149a32a15d4be0a9fd783859f038b5077"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 3,
                  "charOffset": 5068,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 5046,
                  "charLength": 143,
                  "snippet": {
                    "text": "    path += '.exe'\n\n  if not os.path.exists(path):\n    message = (\n        'Unable to find the test binary \"%s\". Please make sure to provide\\n'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af8c4e3acb7ed537270eddf8d2143865507f8d145e071d67c49d0dca6be46d83"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 3,
                  "charOffset": 5365,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 172,
                  "startColumn": 1,
                  "charOffset": 5346,
                  "charLength": 32,
                  "snippet": {
                    "text": "    sys.exit(1)\n\n  return path\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73cfa64ffd9c3ec6fa237d4d52169ee8b00fbf581153609d89dc3633d08dba18"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 3,
                  "charOffset": 5411,
                  "charLength": 65,
                  "snippet": {
                    "text": "\"\"\"Returns the argument to exit(), or -1 if exit() wasn't called."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 176,
                  "startColumn": 1,
                  "charOffset": 5378,
                  "charLength": 107,
                  "snippet": {
                    "text": "\ndef GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "31e32beabf99b8daa745d2085f134c631cb0cc0750158d0dca6b91bd2b8c782d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 3,
                  "charOffset": 5550,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5541,
                  "charLength": 139,
                  "snippet": {
                    "text": "  \"\"\"\n\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "41b3ad0fb36cf6578fd9661212d6cad6865e6c93329f5ce3cc85b6741b4f085a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 3,
                  "charOffset": 5704,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 5642,
                  "charLength": 177,
                  "snippet": {
                    "text": "    # the argument to exit() directly.\n    return exit_code\n  else:\n    # On Unix, os.WEXITSTATUS() must be used to extract the exit status\n    # from the result of os.system()."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0eb83ac3c466c36a044622aaaccaa74863c813497f3f97d2f2c0746ccebb9c67"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 7,
                  "charOffset": 5858,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 5782,
                  "charLength": 134,
                  "snippet": {
                    "text": "    # from the result of os.system().\n    if os.WIFEXITED(exit_code):\n      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50af60b6cb767e7491f7aa5682ae34fbe387fba4b7af7036c939422c5e0d00a6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 7,
                  "charOffset": 5907,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 192,
                  "startColumn": 1,
                  "charOffset": 5852,
                  "charLength": 66,
                  "snippet": {
                    "text": "      return os.WEXITSTATUS(exit_code)\n    else:\n      return -1\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1ad53a59d265b7f9188d0ded8948f563dfa779312d3be818337a75b2e7a87d80"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 3,
                  "charOffset": 5940,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 5919,
                  "charLength": 179,
                  "snippet": {
                    "text": "class Subprocess:\n\n  def __init__(self, command, working_dir=None, capture_stderr=True, env=None):\n    \"\"\"Changes into a specified directory, if provided, and executes a command.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "eabf64fd9848cf2d19cf9a173538e0d3a6c6b0c1a57363640344e669572aaf5a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 7,
                  "charOffset": 7063,
                  "charLength": 6,
                  "snippet": {
                    "text": "stderr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 7033,
                  "charLength": 97,
                  "snippet": {
                    "text": "\n    if capture_stderr:\n      stderr = subprocess.STDOUT\n    else:\n      stderr = subprocess.PIPE"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f6dabd0ad6e448216701cee6497014f673fe2d27b1836cbb08538c9184f03a1c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 7,
                  "charOffset": 7106,
                  "charLength": 6,
                  "snippet": {
                    "text": "stderr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 224,
                  "startColumn": 1,
                  "charOffset": 7057,
                  "charLength": 100,
                  "snippet": {
                    "text": "      stderr = subprocess.STDOUT\n    else:\n      stderr = subprocess.PIPE\n\n    p = subprocess.Popen("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bc3b6a057c355bbefd82226e1db4a1c7fe1c00214b8109991d349c9e4e75202"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 7,
                  "charOffset": 7522,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 240,
                  "startColumn": 1,
                  "charOffset": 7470,
                  "charLength": 120,
                  "snippet": {
                    "text": "\n    if bool(self._return_code & 0x80000000):\n      self.terminated_by_signal = True\n      self.exited = False\n    else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ba0d795587f6ab5559679937b3e49876847701d53c1baf3e9c34c9714ecf1eeb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 7,
                  "charOffset": 7561,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "charOffset": 7471,
                  "charLength": 159,
                  "snippet": {
                    "text": "    if bool(self._return_code & 0x80000000):\n      self.terminated_by_signal = True\n      self.exited = False\n    else:\n      self.terminated_by_signal = False"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "90c35fc060bb3b6b2fcdedf66b119efd237e677cb8eb1b342e4e283bb0d1fb23"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 7,
                  "charOffset": 7597,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 243,
                  "startColumn": 1,
                  "charOffset": 7555,
                  "charLength": 141,
                  "snippet": {
                    "text": "      self.exited = False\n    else:\n      self.terminated_by_signal = False\n      self.exited = True\n      self.exit_code = self._return_code"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6086858299a353583a75ce03d2dfe3f42886269815d87c1f4aa1ede7a8c4bea1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 7,
                  "charOffset": 7637,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 244,
                  "startColumn": 1,
                  "charOffset": 7581,
                  "charLength": 116,
                  "snippet": {
                    "text": "    else:\n      self.terminated_by_signal = False\n      self.exited = True\n      self.exit_code = self._return_code\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f18091b8c599afa4abb2f27fcc02272b0815b0b9c3da446e3d03d28935092f8f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 7,
                  "charOffset": 7662,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 245,
                  "startColumn": 1,
                  "charOffset": 7591,
                  "charLength": 107,
                  "snippet": {
                    "text": "      self.terminated_by_signal = False\n      self.exited = True\n      self.exit_code = self._return_code\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b2a0dc08985423f547371cd98e4152dd2a8ac1a76a0e05ccbe7f78de3fc95a82"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 3,
                  "charOffset": 7713,
                  "charLength": 25,
                  "snippet": {
                    "text": "\"\"\"Runs the unit test.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 249,
                  "startColumn": 1,
                  "charOffset": 7698,
                  "charLength": 100,
                  "snippet": {
                    "text": "\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n\n  # We must call _ParseAndStripGTestFlags() before calling"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "54b6e31601831f1b58d2e5a32753c9df8787188b571656279359ea1d116124b6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 3,
                  "charOffset": 7742,
                  "charLength": 56,
                  "snippet": {
                    "text": "# We must call _ParseAndStripGTestFlags() before calling"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 7711,
                  "charLength": 175,
                  "snippet": {
                    "text": "  \"\"\"Runs the unit test.\"\"\"\n\n  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cbd7a70d82139ac65d006c554ac27c1c839f012682d450981fa1c833fc3a68c3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 3,
                  "charOffset": 7801,
                  "charLength": 64,
                  "snippet": {
                    "text": "# unittest.main().  Otherwise the latter will be confused by the"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "charOffset": 7739,
                  "charLength": 184,
                  "snippet": {
                    "text": "\n  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "7fafdf25c1a7b566cc5ddcdc3eec34c64f0dbca83698093035d079a9e2901056"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 3,
                  "charOffset": 7868,
                  "charLength": 18,
                  "snippet": {
                    "text": "# --gtest_* flags."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 253,
                  "startColumn": 1,
                  "charOffset": 7740,
                  "charLength": 257,
                  "snippet": {
                    "text": "  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0088a02eaa920fcbb99101c88ae719e004b9ea048c4b9b819853ba4ab4b9dee4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 3,
                  "charOffset": 7889,
                  "charLength": 24,
                  "snippet": {
                    "text": "_ParseAndStripGTestFlags"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 7799,
                  "charLength": 239,
                  "snippet": {
                    "text": "  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "29b7baee6bf795bb6bdb95f00893e99220cec98e50fa2c83c573e9ff0d4b801e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 3,
                  "charOffset": 7926,
                  "charLength": 71,
                  "snippet": {
                    "text": "# The tested binaries should not be writing XML output files unless the"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 255,
                  "startColumn": 1,
                  "charOffset": 7866,
                  "charLength": 214,
                  "snippet": {
                    "text": "  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4d0ca71cad870ea9b078669a8e6f8621b6e26d35d5a2ef5679e115fa6db91c9d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 3,
                  "charOffset": 8000,
                  "charLength": 38,
                  "snippet": {
                    "text": "# script explicitly instructs them to."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 256,
                  "startColumn": 1,
                  "charOffset": 7887,
                  "charLength": 235,
                  "snippet": {
                    "text": "  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c827f69260a55ef33a89f46fb5b680a3970a3dee7dbb1b0fe9a5004cae60d02d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 3,
                  "charOffset": 8041,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 7924,
                  "charLength": 199,
                  "snippet": {
                    "text": "  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "71cdfcd315e971ef9ad3046cba92c674dacfb648ac037a512f79ab6c596c65f4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 3,
                  "charOffset": 8126,
                  "charLength": 12,
                  "snippet": {
                    "text": "_test_module"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 260,
                  "startColumn": 1,
                  "charOffset": 8081,
                  "charLength": 65,
                  "snippet": {
                    "text": "    del os.environ[GTEST_OUTPUT_VAR_NAME]\n\n  _test_module.main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "73879b567cf94cfff4648ea8f0e2285a56f4959e33a32c5851576ca20ff2aed2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2200,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"\"\"Sets an environment variable."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2166,
                  "charLength": 135,
                  "snippet": {
                    "text": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable.\n\n  Sets an environment variable to a given value; unsets it when the"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e7992b43af4d694e34e401a79b78344eeb6aec71cab1261382b4b2c233fb0f6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 3,
                  "charOffset": 2403,
                  "charLength": 7,
                  "snippet": {
                    "text": "env_var"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2394,
                  "charLength": 90,
                  "snippet": {
                    "text": "  \"\"\"\n\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4fa3a5a5b92095e13e47456e203aad3bd7d87d3a2b4715659dd7eafc1af137e3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "charOffset": 2431,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2400,
                  "charLength": 114,
                  "snippet": {
                    "text": "\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a30c375077c431410f067fd427e62b059fbdb741abb05d3dd2903dd99e00f81b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 3,
                  "charOffset": 2487,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 69,
                  "startColumn": 1,
                  "charOffset": 2429,
                  "charLength": 114,
                  "snippet": {
                    "text": "  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "793167b3702da65af7c474f3193e2f425e220a303e7007e467cf92cb9958c24a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 3,
                  "charOffset": 2565,
                  "charLength": 69,
                  "snippet": {
                    "text": "\"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2544,
                  "charLength": 140,
                  "snippet": {
                    "text": "\ndef Run(command):\n  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n\n  print('Running \"%s\". . .' % ' '.join(command))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef64afaae6efdea5dd9a78334c3e799f1fdbfa6042f9f801763f1ad4dfe601c5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "charOffset": 2638,
                  "charLength": 5,
                  "snippet": {
                    "text": "print"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 2563,
                  "charLength": 203,
                  "snippet": {
                    "text": "  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n\n  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "386e8c7427008cbc38595b253ddade762db77d0c9fb877cf4277e00d7e6028f9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 3,
                  "charOffset": 2687,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2635,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "dc148482dd241b4df4f9215124c215a8da5b207fe973dcbd8e6eafa5e21b4aa9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 3,
                  "charOffset": 2730,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 2636,
                  "charLength": 132,
                  "snippet": {
                    "text": "  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "670212dff50d8d7ff321db304fe1eba0b0651086c8b17aa3aed04fb397f76fc5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 3,
                  "charOffset": 2837,
                  "charLength": 38,
                  "snippet": {
                    "text": "\"\"\"Tests the throw-on-failure mode.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 2769,
                  "charLength": 173,
                  "snippet": {
                    "text": "# The tests.\nclass ThrowOnFailureTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the throw-on-failure mode.\"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c0822870303c5007ad60a0816e1a9445bdced6522a44887fba0f2bb68904bcef"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 3,
                  "charOffset": 2879,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2835,
                  "charLength": 181,
                  "snippet": {
                    "text": "  \"\"\"Tests the throw-on-failure mode.\"\"\"\n\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies its behavior.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23c055ebdebff46c1036a61e353379814af7f3f0b9987ecd9bdf58207fff0dc0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 7,
                  "charOffset": 3556,
                  "charLength": 17,
                  "snippet": {
                    "text": "env_var_value_msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3519,
                  "charLength": 126,
                  "snippet": {
                    "text": "\n    if env_var_value is None:\n      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3de58d1da85ba5f9303378a3b625cd532386e5832b3f9a2a3dbf4860fb8040eb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 7,
                  "charOffset": 3606,
                  "charLength": 17,
                  "snippet": {
                    "text": "env_var_value_msg"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 3550,
                  "charLength": 123,
                  "snippet": {
                    "text": "      env_var_value_msg = ' is not set'\n    else:\n      env_var_value_msg = '=' + env_var_value\n\n    if flag_value is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3cb11ac1addc85862df560072604d9883ae66de6aad8d001b65f09a7b2869573"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 7,
                  "charOffset": 3680,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3646,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n    if flag_value is None:\n      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "50a64d394b9452f829ef4b9d13a19807dc7699ac5d58f0865a19bd1befb245b8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 7,
                  "charOffset": 3724,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3674,
                  "charLength": 133,
                  "snippet": {
                    "text": "      flag = ''\n    elif flag_value == '0':\n      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24165fdfc0479d4937c2d1269f6c2615a0f379453685365dc8f3e1929ee74cc2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 7,
                  "charOffset": 3775,
                  "charLength": 4,
                  "snippet": {
                    "text": "flag"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 111,
                  "startColumn": 1,
                  "charOffset": 3718,
                  "charLength": 115,
                  "snippet": {
                    "text": "      flag = '--%s=0' % THROW_ON_FAILURE\n    else:\n      flag = '--%s' % THROW_ON_FAILURE\n\n    command = [EXE_PATH]"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1639843e9322d1db3b173ce43493ffc102099528fbfd172b28fde2885c86f982"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 7,
                  "charOffset": 3853,
                  "charLength": 7,
                  "snippet": {
                    "text": "command"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3809,
                  "charLength": 85,
                  "snippet": {
                    "text": "    command = [EXE_PATH]\n    if flag:\n      command.append(flag)\n\n    if should_fail:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "613408292cd4e34fd828db7c1faf60b663f111e95225ad2451a3b95555074d07"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 7,
                  "charOffset": 3901,
                  "charLength": 13,
                  "snippet": {
                    "text": "should_or_not"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3874,
                  "charLength": 96,
                  "snippet": {
                    "text": "\n    if should_fail:\n      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "17015b15804cffcf66c7070abf5301bcf2aacdf7621dfb099827d66591b849e0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 7,
                  "charOffset": 3942,
                  "charLength": 13,
                  "snippet": {
                    "text": "should_or_not"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 3895,
                  "charLength": 106,
                  "snippet": {
                    "text": "      should_or_not = 'should'\n    else:\n      should_or_not = 'should not'\n\n    failed = not Run(command)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c5b4efe9bc64941da1e9dbc66812aba52757c4345c9611dff3933e060e6518e7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 3,
                  "charOffset": 4333,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 4282,
                  "charLength": 132,
                  "snippet": {
                    "text": "    self.assertTrue(failed == should_fail, msg)\n\n  def testDefaultBehavior(self):\n    \"\"\"Tests the behavior of the default mode.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ff9cf3f535e6c706bcf3c02f11a361ed80c713c186bd53337171068f563eefb4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 3,
                  "charOffset": 4496,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 142,
                  "startColumn": 1,
                  "charOffset": 4415,
                  "charLength": 188,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value=None, should_fail=False)\n\n  def testThrowOnFailureEnvVar(self):\n    \"\"\"Tests using the GTEST_THROW_ON_FAILURE environment variable.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0bb699e466948167412e3544b156bf7f92fdfb53b4b50c852a8cb616f0eac19d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 3,
                  "charOffset": 4760,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 4681,
                  "charLength": 170,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value='1', flag_value=None, should_fail=True)\n\n  def testThrowOnFailureFlag(self):\n    \"\"\"Tests using the --gtest_throw_on_failure flag.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b4a7de3e64d8d9778d6385a827af144372693c20f139b31ad092cb2e01a74f4b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 3,
                  "charOffset": 5008,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 4929,
                  "charLength": 208,
                  "snippet": {
                    "text": "    self.RunAndVerify(env_var_value=None, flag_value='1', should_fail=True)\n\n  def testThrowOnFailureFlagOverridesEnvVar(self):\n    \"\"\"Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "55d69c0a477e82708377092dc565caa6981a47f591df884d336145a697f38b4d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-throw-on-failure-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 3,
                  "charOffset": 5471,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 5441,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "bc8878c910172da76f95df95d647fa982b0252a2421eae33b7230dfb16df4d41"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 3,
                  "charOffset": 1613,
                  "charLength": 27,
                  "snippet": {
                    "text": "\"\"\"Normalize output object."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1590,
                  "charLength": 59,
                  "snippet": {
                    "text": "\ndef normalize(obj):\n  \"\"\"Normalize output object.\n\n  Args:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "23b064dfe0ad48fffad5d5bf340c70bb9067b56c11e13d32f451aa2ae5fec203"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 3,
                  "charOffset": 1837,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1828,
                  "charLength": 109,
                  "snippet": {
                    "text": "  \"\"\"\n\n  def _normalize(key, value):\n    if key == 'time':\n      return re.sub(r'^\\d+(\\.\\d+)?s$', '*', value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c2b2a767b154422e08191ef568afe346e5232a9702035f2fec328d21ee6d514"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 7,
                  "charOffset": 1893,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1835,
                  "charLength": 201,
                  "snippet": {
                    "text": "  def _normalize(key, value):\n    if key == 'time':\n      return re.sub(r'^\\d+(\\.\\d+)?s$', '*', value)\n    elif key == 'timestamp':\n      return re.sub(r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$', '*', value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "35b36075325e758995075648dfdb742a26719b1d80eb491cb7b31cb3e37b4a92"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 7,
                  "charOffset": 1973,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1887,
                  "charLength": 237,
                  "snippet": {
                    "text": "      return re.sub(r'^\\d+(\\.\\d+)?s$', '*', value)\n    elif key == 'timestamp':\n      return re.sub(r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$', '*', value)\n    elif key == 'failure':\n      value = re.sub(r'^.*[/\\\\](.*:)\\d+\\n', '\\\\1*\\n', value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "285ec519ee9dbc829bd6c41d92412fb9c046226fb04642a1bcc00ef71987fa10"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 7,
                  "charOffset": 2070,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1967,
                  "charLength": 253,
                  "snippet": {
                    "text": "      return re.sub(r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\dZ$', '*', value)\n    elif key == 'failure':\n      value = re.sub(r'^.*[/\\\\](.*:)\\d+\\n', '\\\\1*\\n', value)\n      return re.sub(r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', value)\n    elif key == 'file':"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa2333fc896bbe9d17a338ad106bc6eada4c77f1499592a8a8e87d09ab16244e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 7,
                  "charOffset": 2131,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 2037,
                  "charLength": 234,
                  "snippet": {
                    "text": "    elif key == 'failure':\n      value = re.sub(r'^.*[/\\\\](.*:)\\d+\\n', '\\\\1*\\n', value)\n      return re.sub(r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', value)\n    elif key == 'file':\n      return re.sub(r'^.*[/\\\\](.*)', '\\\\1', value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac146bce452f1fb1dc344b73b1597406771d9235823cc86550d15622290b5415"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 7,
                  "charOffset": 2227,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 2125,
                  "charLength": 186,
                  "snippet": {
                    "text": "      return re.sub(r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', value)\n    elif key == 'file':\n      return re.sub(r'^.*[/\\\\](.*)', '\\\\1', value)\n    else:\n      return normalize(value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c599581c4b84d005b362d21994ed426e3bc851d7d355d63ea122af732136554d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 7,
                  "charOffset": 2288,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2221,
                  "charLength": 119,
                  "snippet": {
                    "text": "      return re.sub(r'^.*[/\\\\](.*)', '\\\\1', value)\n    else:\n      return normalize(value)\n\n  if isinstance(obj, dict):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "889e917b542b3a3332b85ad470d7f8a8d9141baf7c731e45142b698ece0b65b1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "charOffset": 2315,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2282,
                  "charLength": 143,
                  "snippet": {
                    "text": "      return normalize(value)\n\n  if isinstance(obj, dict):\n    return {k: _normalize(k, v) for k, v in obj.items()}\n  if isinstance(obj, list):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "774918162d4b17d6c7521e33f27baac7754ac19cc30b7f162864b762b2cb2e09"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2400,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2313,
                  "charLength": 159,
                  "snippet": {
                    "text": "  if isinstance(obj, dict):\n    return {k: _normalize(k, v) for k, v in obj.items()}\n  if isinstance(obj, list):\n    return [normalize(x) for x in obj]\n  else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "74fa39e680b6296bb9283d36bc8ede3e95a0ae096bebcf389a9281b774666a00"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_json_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2467,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2398,
                  "charLength": 90,
                  "snippet": {
                    "text": "  if isinstance(obj, list):\n    return [normalize(x) for x in obj]\n  else:\n    return obj\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfaab170cac916a33a3832ef7bfe8233889f663392df43857465871d432466d9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 3,
                  "charOffset": 1883,
                  "charLength": 71,
                  "snippet": {
                    "text": "\"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1849,
                  "charLength": 130,
                  "snippet": {
                    "text": "\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f85453797ad6c49e44a7966aee4b1095d1e6c383f385ff5e77c4b2f1bd3e9a88"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 3,
                  "charOffset": 1958,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1881,
                  "charLength": 160,
                  "snippet": {
                    "text": "  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1fb7c42039a32b4b182da9d87d4461f8aa9b38629cc468c81117cd1355244be"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 3,
                  "charOffset": 2014,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1956,
                  "charLength": 114,
                  "snippet": {
                    "text": "  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "484da6e828b4e065d1122bb07b682ba8bce4d2f0b1a04d695fbf8786ac06a8fb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 3,
                  "charOffset": 2122,
                  "charLength": 60,
                  "snippet": {
                    "text": "\"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 2071,
                  "charLength": 138,
                  "snippet": {
                    "text": "\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n\n  SetEnvVar('TERM', term)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "53410b18ef3e150ec033e05699362c5497d5659944b29ea9972dfb2f7548a876"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 3,
                  "charOffset": 2186,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2120,
                  "charLength": 132,
                  "snippet": {
                    "text": "  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a3f958e5a1c47e1b6fa02358d9edff396312669a5a38bb5f6f25bc9ad0a11103"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 3,
                  "charOffset": 2212,
                  "charLength": 9,
                  "snippet": {
                    "text": "SetEnvVar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 2183,
                  "charLength": 94,
                  "snippet": {
                    "text": "\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n\n  if color_flag is None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f26f75eea98a2be8eff1c98a24840ff67e5aac8f6b764fb335569ff097060319"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 3,
                  "charOffset": 2255,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 2210,
                  "charLength": 89,
                  "snippet": {
                    "text": "  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n\n  if color_flag is None:\n    args = []\n  else:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfadc0cd0cffcf28f3cbbd31715295627d65e0d4e8ba247811e3737f2e0a771e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 3,
                  "charOffset": 2294,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 2253,
                  "charLength": 148,
                  "snippet": {
                    "text": "  if color_flag is None:\n    args = []\n  else:\n    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "62c7924a5dc62dfd17bac06e5cbb6a64343c47420fc807462fe1c07055ff0a7a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 3,
                  "charOffset": 2352,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 2292,
                  "charLength": 147,
                  "snippet": {
                    "text": "  else:\n    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)\n  return not p.exited or p.exit_code\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "61444b8a82f3be419142aeb58e5e4d5e132dbeeee224be1d1f62d3f4be064ba7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 3,
                  "charOffset": 2404,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 2300,
                  "charLength": 140,
                  "snippet": {
                    "text": "    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)\n  return not p.exited or p.exit_code\n\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d1e316792efa669f98e2a16fe42219337649ceb76d9a3bce0f60ed8a6a6ddfef"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 3,
                  "charOffset": 2493,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2441,
                  "charLength": 159,
                  "snippet": {
                    "text": "class GTestColorTest(gtest_test_utils.TestCase):\n\n  def testNoEnvVarNoFlag(self):\n    \"\"\"Tests the case when there's neither GTEST_COLOR nor --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "5617fc552ed638949ad75726711506fe57ae41e89f84d3dcc0f97ff2d8ca4a20"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 7,
                  "charOffset": 2630,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 2600,
                  "charLength": 201,
                  "snippet": {
                    "text": "\n    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('dumb', None, None))\n      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4143388a47d9a58d3b2c29d24ab6dd40e3159311d7ea913dd97acd46a0f0a9b2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 7,
                  "charOffset": 2687,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 72,
                  "startColumn": 1,
                  "charOffset": 2601,
                  "charLength": 260,
                  "snippet": {
                    "text": "    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('dumb', None, None))\n      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e7559e0e1fa6647ec9f886821dab9ece4cff229b8d1dce9b79229c23d4016dec"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 7,
                  "charOffset": 2745,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2624,
                  "charLength": 292,
                  "snippet": {
                    "text": "      self.assertTrue(not UsesColor('dumb', None, None))\n      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))\n      self.assertTrue(not UsesColor(None, None, None))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e02a5ddb20b6b263d52c4ed91d401bdafaf5583c4fd89c418ed9a8f70fa5ba3f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 7,
                  "charOffset": 2808,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 2681,
                  "charLength": 287,
                  "snippet": {
                    "text": "      self.assertTrue(not UsesColor('emacs', None, None))\n      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))\n      self.assertTrue(not UsesColor(None, None, None))\n    self.assertTrue(UsesColor('linux', None, None))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2be60443d96e26384c4696f2558015d5aac35b8b382636c75bab7e0522eb75cf"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "charOffset": 2868,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2739,
                  "charLength": 282,
                  "snippet": {
                    "text": "      self.assertTrue(not UsesColor('xterm-mono', None, None))\n      self.assertTrue(not UsesColor('unknown', None, None))\n      self.assertTrue(not UsesColor(None, None, None))\n    self.assertTrue(UsesColor('linux', None, None))\n    self.assertTrue(UsesColor('cygwin', None, None))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1055a8f2c1bde3d0b8c23a9e2a9aed2f2d77075259042c8d0e2c2701c395e73e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 3,
                  "charOffset": 3254,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 3190,
                  "charLength": 161,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm-256color', None, None))\n\n  def testFlagOnly(self):\n    \"\"\"Tests the case when there's --gtest_color but not GTEST_COLOR.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "aa3f63c4e600f8a913b93ae53c957272b5b49f1edf13ee7d600b3d3246d65902"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 7,
                  "charOffset": 3498,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 3407,
                  "charLength": 250,
                  "snippet": {
                    "text": "    self.assertTrue(not UsesColor('xterm-color', None, 'no'))\n    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('emacs', None, 'auto'))\n    self.assertTrue(UsesColor('xterm', None, 'auto'))\n    self.assertTrue(UsesColor('dumb', None, 'yes'))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3a56b68edf681d1331ad187ee556819f9c9ad7c85575d17c3b9f92998a3f8968"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 3,
                  "charOffset": 3714,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 3658,
                  "charLength": 155,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm', None, 'yes'))\n\n  def testEnvVarOnly(self):\n    \"\"\"Tests the case when there's GTEST_COLOR but not --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f95e9e85e84387b9a238ae740f26c1882e886ca1feb5ed31c694cc9990fd57a9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "charOffset": 3960,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 100,
                  "startColumn": 1,
                  "charOffset": 3869,
                  "charLength": 255,
                  "snippet": {
                    "text": "    self.assertTrue(not UsesColor('xterm-color', 'no', None))\n    if not IS_WINDOWS:\n      self.assertTrue(not UsesColor('dumb', 'auto', None))\n    self.assertTrue(UsesColor('xterm-color', 'auto', None))\n    self.assertTrue(UsesColor('dumb', 'yes', None))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6399d6e2c692960261e8d0571dc424daa76dff2503cd8e755ebeb8b09fcb9a42"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 3,
                  "charOffset": 4187,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 4125,
                  "charLength": 167,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm-color', 'yes', None))\n\n  def testEnvVarAndFlag(self):\n    \"\"\"Tests the case when there are both GTEST_COLOR and --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d104146604b6cec8087390c46d1d9242ea7e1a00c36961fafa1b64d33be636b9"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 3,
                  "charOffset": 4470,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 4407,
                  "charLength": 155,
                  "snippet": {
                    "text": "    self.assertTrue(UsesColor('xterm-color', 'no', 'auto'))\n\n  def testAliasesOfYesAndNo(self):\n    \"\"\"Tests using aliases in specifying --gtest_color.\"\"\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a1f2721a930e9558db55dc43eec89edaf2535c72329e35cf47556b9a211815b8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-color-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 3,
                  "charOffset": 5030,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 127,
                  "startColumn": 1,
                  "charOffset": 5000,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "89e1b82643c94d7abf4019b672090dd1c42a4fdc5e003f0beaafabdaf2d7e00d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-setuptestsuite-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 3,
                  "charOffset": 1830,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1769,
                  "charLength": 201,
                  "snippet": {
                    "text": "class GTestSetUpTestSuiteTest(gtest_test_utils.TestCase):\n\n  def testSetupErrorAndTearDownError(self):\n    p = gtest_test_utils.Subprocess(COMMAND)\n    self.assertNotEqual(p.exit_code, 0, msg=p.output)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "955617fce09c23070277801df28c1e58ae8d68b2989c163588fd954efb6b4e51"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-setuptestsuite-test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 3,
                  "charOffset": 2270,
                  "charLength": 16,
                  "snippet": {
                    "text": "gtest_test_utils"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 2240,
                  "charLength": 54,
                  "snippet": {
                    "text": "\nif __name__ == '__main__':\n  gtest_test_utils.Main()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e66d2c33725b9405d72c97ca24671bdf2b0c2c948e4de8b456e81b22a1b8a7cc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 3,
                  "charOffset": 1768,
                  "charLength": 69,
                  "snippet": {
                    "text": "\"\"\"Base class for tests of Google Test's XML output functionality.\"\"\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1714,
                  "charLength": 187,
                  "snippet": {
                    "text": "\nclass GTestXMLTestCase(gtest_test_utils.TestCase):\n  \"\"\"Base class for tests of Google Test's XML output functionality.\"\"\"\n\n  def AssertEquivalentNodes(self, expected_node, actual_node):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ee1ff04ae3c4a68bf8fe0aa5fb4f771b87fdd770dd995ddc0c566a7287879f98"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "charOffset": 1841,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1766,
                  "charLength": 200,
                  "snippet": {
                    "text": "  \"\"\"Base class for tests of Google Test's XML output functionality.\"\"\"\n\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"Asserts that actual_node is equivalent to expected_node.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9ea12bb0d1fd8c019098ae455da5d2bdcca3ba2c558473ee0c53f84cc8e551f2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 7,
                  "charOffset": 3021,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 2956,
                  "charLength": 212,
                  "snippet": {
                    "text": "\n    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n      self.assertEqual(Node.CDATA_SECTION_NODE, actual_node.nodeType)\n      self.assertEqual(expected_node.nodeValue, actual_node.nodeValue)\n      return"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "af43e85436b86a16a57f6742a3af4192bfde21f142586710fb42c08105032199"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 7,
                  "charOffset": 3091,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 2957,
                  "charLength": 212,
                  "snippet": {
                    "text": "    if expected_node.nodeType == Node.CDATA_SECTION_NODE:\n      self.assertEqual(Node.CDATA_SECTION_NODE, actual_node.nodeType)\n      self.assertEqual(expected_node.nodeValue, actual_node.nodeValue)\n      return\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d69c37ee1414219d4b2b8b4e10b31d1b41049b517482d36c89adcc67aea41a6c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 7,
                  "charOffset": 3162,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 3015,
                  "charLength": 216,
                  "snippet": {
                    "text": "      self.assertEqual(Node.CDATA_SECTION_NODE, actual_node.nodeType)\n      self.assertEqual(expected_node.nodeValue, actual_node.nodeValue)\n      return\n\n    self.assertEqual(Node.ELEMENT_NODE, actual_node.nodeType)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "186838038a63b54a16909d1c853a711ea26ac821b893b9d1edd8e551924bd27d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 7,
                  "charOffset": 3822,
                  "charLength": 13,
                  "snippet": {
                    "text": "expected_attr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 3762,
                  "charLength": 188,
                  "snippet": {
                    "text": "    )\n    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78a41e6d3686b81b7075717a0f9409bb1de3eaa451408f7d0e6b59fcac7ff928"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 7,
                  "charOffset": 3872,
                  "charLength": 11,
                  "snippet": {
                    "text": "actual_attr"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3768,
                  "charLength": 217,
                  "snippet": {
                    "text": "    for i in range(expected_attributes.length):\n      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8c8a4332a6220b107d4f5cdd1d2f7ad48db0d247d0b2f8fe9f95ddcb747271a3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 7,
                  "charOffset": 3934,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 88,
                  "startColumn": 1,
                  "charOffset": 3816,
                  "charLength": 227,
                  "snippet": {
                    "text": "      expected_attr = expected_attributes.item(i)\n      actual_attr = actual_attributes.get(expected_attr.name)\n      self.assertTrue(\n          actual_attr is not None,\n          'expected attribute %s not found in element %s'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b3ee55018511ff6c7cbc591fa6b74b65b19b542081ba042e7db36c9a4b9b97cb"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 7,
                  "charOffset": 4113,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 4044,
                  "charLength": 146,
                  "snippet": {
                    "text": "          % (expected_attr.name, actual_node.tagName),\n      )\n      self.assertEqual(\n          expected_attr.value,\n          actual_attr.value,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57297e1091277b98b326d9be64a61e2195bd8333673e8ae36756a7be9d29bde1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 7,
                  "charOffset": 4768,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 4702,
                  "charLength": 169,
                  "snippet": {
                    "text": "    )\n    for child_id, child in expected_children.items():\n      self.assertTrue(\n          child_id in actual_children,\n          '<%s> is not in <%s> (in element %s)'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "68876e11cf7a799c1c58681dc67e1b2d9c44cc0f11296e37760bf43be3f308d8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 7,
                  "charOffset": 4948,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 4872,
                  "charLength": 165,
                  "snippet": {
                    "text": "          % (child_id, actual_children, actual_node.tagName),\n      )\n      self.AssertEquivalentNodes(child, actual_children[child_id])\n\n  identifying_attribute = {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "083f26e98465df135a6fb0345d56d3a34ab940b36d44fdca82a53545a541b633"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 3,
                  "charOffset": 5012,
                  "charLength": 21,
                  "snippet": {
                    "text": "identifying_attribute"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 120,
                  "startColumn": 1,
                  "charOffset": 4942,
                  "charLength": 150,
                  "snippet": {
                    "text": "      self.AssertEquivalentNodes(child, actual_children[child_id])\n\n  identifying_attribute = {\n      'testsuites': 'name',\n      'testsuite': 'name',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ca058c4415761f36946ed49698ecdffd8e26b627efdc843c4d1248cd2ca1da13"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 3,
                  "charOffset": 5208,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 5201,
                  "charLength": 112,
                  "snippet": {
                    "text": "  }\n\n  def _GetChildren(self, element):\n    \"\"\"Fetches all of the child nodes of element, a DOM Element object.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f0c5b52739ee39489baf785b63591007a26b4dce47ed95e7150dcd4ec2975b88"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 7,
                  "charOffset": 6226,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 152,
                  "startColumn": 1,
                  "charOffset": 6165,
                  "charLength": 169,
                  "snippet": {
                    "text": "    children = {}\n    for child in element.childNodes:\n      if child.nodeType == Node.ELEMENT_NODE:\n        if child.tagName == 'properties':\n          self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "978e5b0c6579ddde9080111d31d49bc1594fbcf270e59d35d875d5d64d55ec8e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 11,
                  "charOffset": 6318,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 6220,
                  "charLength": 225,
                  "snippet": {
                    "text": "      if child.nodeType == Node.ELEMENT_NODE:\n        if child.tagName == 'properties':\n          self.assertTrue(\n              child.parentNode is not None,\n              'Encountered <properties> element without a parent',"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b166d6ca060d41b962cfc44b4174dc45d157658e03a994063e83264cb232c1d3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 11,
                  "charOffset": 6468,
                  "charLength": 8,
                  "snippet": {
                    "text": "child_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 158,
                  "startColumn": 1,
                  "charOffset": 6379,
                  "charLength": 194,
                  "snippet": {
                    "text": "              'Encountered <properties> element without a parent',\n          )\n          child_id = child.parentNode.getAttribute('name') + '-properties'\n        else:\n          self.assertTrue("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "66a27d8dde142e2d1bfd8ccc7bed93c409b2633a877471dc02daf6ea204e38c0"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 11,
                  "charOffset": 6557,
                  "charLength": 4,
                  "snippet": {
                    "text": "self"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 160,
                  "startColumn": 1,
                  "charOffset": 6458,
                  "charLength": 240,
                  "snippet": {
                    "text": "          child_id = child.parentNode.getAttribute('name') + '-properties'\n        else:\n          self.assertTrue(\n              child.tagName in self.identifying_attribute,\n              'Encountered unknown element <%s>' % child.tagName,"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58c42f6f3b1bd5977086286a2d72324086e70093943a79cb7967978f7bd969c8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 11,
                  "charOffset": 6721,
                  "charLength": 8,
                  "snippet": {
                    "text": "child_id"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 6633,
                  "charLength": 186,
                  "snippet": {
                    "text": "              'Encountered unknown element <%s>' % child.tagName,\n          )\n          child_id = child.getAttribute(\n              self.identifying_attribute[child.tagName]\n          )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ed48c2a1aad4067cdfd32a27aa5703bfb612891d02e832916b87074a4d46e22d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "charOffset": 6906,
                  "charLength": 4,
                  "snippet": {
                    "text": "elif"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 169,
                  "startColumn": 1,
                  "charOffset": 6820,
                  "charLength": 203,
                  "snippet": {
                    "text": "        self.assertNotIn(child_id, children)\n        children[child_id] = child\n      elif child.nodeType in [Node.TEXT_NODE, Node.CDATA_SECTION_NODE]:\n        if 'detail' not in children:\n          if ("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "090001f4cced121fb4fcd7e8bb2002f21e4668ea0b78f23ed6cb9f7b3421e469"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 11,
                  "charOffset": 7019,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 6900,
                  "charLength": 226,
                  "snippet": {
                    "text": "      elif child.nodeType in [Node.TEXT_NODE, Node.CDATA_SECTION_NODE]:\n        if 'detail' not in children:\n          if (\n              child.nodeType == Node.CDATA_SECTION_NODE\n              or not child.nodeValue.isspace()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cd741227727628601df43267b87e9388d8fc64ff82903f6e60dc51d68d612d17"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 11,
                  "charOffset": 7283,
                  "charLength": 8,
                  "snippet": {
                    "text": "children"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 7245,
                  "charLength": 171,
                  "snippet": {
                    "text": "            )\n        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "911c6f4765e6d5a254eaca834bf9cfea3cb1fd6ae6195f418d38b30f2bf84bc6"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 7,
                  "charOffset": 7337,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 7259,
                  "charLength": 177,
                  "snippet": {
                    "text": "        else:\n          children['detail'].nodeValue += child.nodeValue\n      else:\n        self.fail('Encountered unexpected node type %d' % child.nodeType)\n    return children"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1b1027e0878a7f481133fd123941251f1debccbcbbc506a48e185567afc11827"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 3,
                  "charOffset": 7440,
                  "charLength": 3,
                  "snippet": {
                    "text": "def"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 184,
                  "startColumn": 1,
                  "charOffset": 7417,
                  "charLength": 111,
                  "snippet": {
                    "text": "    return children\n\n  def NormalizeXml(self, element):\n    \"\"\"Normalizes XML that may change from run to run.\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e2fe864865d3b1cd2cee535c62ba168adac00d53cd03ef13e4595dce271e4846"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 7,
                  "charOffset": 8579,
                  "charLength": 11,
                  "snippet": {
                    "text": "source_file"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 8534,
                  "charLength": 191,
                  "snippet": {
                    "text": "\n    if element.tagName == 'testcase':\n      source_file = element.getAttributeNode('file')\n      if source_file:\n        source_file.value = re.sub(r'^.*[/\\\\](.*)', '\\\\1', source_file.value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9f27c575426995a447e86c4596eb39420459542bb506c2727e64af5999aa2a41"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 7,
                  "charOffset": 8632,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 8535,
                  "charLength": 257,
                  "snippet": {
                    "text": "    if element.tagName == 'testcase':\n      source_file = element.getAttributeNode('file')\n      if source_file:\n        source_file.value = re.sub(r'^.*[/\\\\](.*)', '\\\\1', source_file.value)\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "844d5c33d58d372a326056bfeb7fb9e026759d41e183f211ffacd7f2c0e33dce"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 7,
                  "charOffset": 8799,
                  "charLength": 9,
                  "snippet": {
                    "text": "timestamp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 213,
                  "startColumn": 1,
                  "charOffset": 8648,
                  "charLength": 308,
                  "snippet": {
                    "text": "        source_file.value = re.sub(r'^.*[/\\\\](.*)', '\\\\1', source_file.value)\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      timestamp = element.getAttributeNode('timestamp')\n      timestamp.value = re.sub(\n          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f738040ccdf377fc016045d0dd1a28c4392d1debefe019390946dd2a29e57af1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 7,
                  "charOffset": 8855,
                  "charLength": 9,
                  "snippet": {
                    "text": "timestamp"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 214,
                  "startColumn": 1,
                  "charOffset": 8726,
                  "charLength": 238,
                  "snippet": {
                    "text": "    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      timestamp = element.getAttributeNode('timestamp')\n      timestamp.value = re.sub(\n          r'^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d$', '*', timestamp.value\n      )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0e61f27a64200f257b9ff0207166498f628f31978896eb0cf6276fdbd1d59481"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 7,
                  "charOffset": 9038,
                  "charLength": 4,
                  "snippet": {
                    "text": "time"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 218,
                  "startColumn": 1,
                  "charOffset": 8957,
                  "charLength": 225,
                  "snippet": {
                    "text": "      )\n    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e3557e5bd201fce65e3687fd0ec0131164a51a6e5c868294e71dd9b22a40a3a"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 7,
                  "charOffset": 9084,
                  "charLength": 73,
                  "snippet": {
                    "text": "# The value for exact N seconds has a trailing decimal point (e.g., \"10.\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 8965,
                  "charLength": 278,
                  "snippet": {
                    "text": "    if element.tagName in ('testsuites', 'testsuite', 'testcase'):\n      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "da2c67cea684f892eea77c08f0e82daa6ac8f2a797e73ca8459b9b1934e320e4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 7,
                  "charOffset": 9164,
                  "charLength": 18,
                  "snippet": {
                    "text": "# instead of \"10\")"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 9032,
                  "charLength": 269,
                  "snippet": {
                    "text": "      time = element.getAttributeNode('time')\n      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8b5104e730ab3b41ce0d2befc44836ec3254034be9e61a4d238fee9817d108f3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 7,
                  "charOffset": 9189,
                  "charLength": 4,
                  "snippet": {
                    "text": "time"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 221,
                  "startColumn": 1,
                  "charOffset": 9078,
                  "charLength": 265,
                  "snippet": {
                    "text": "      # The value for exact N seconds has a trailing decimal point (e.g., \"10.\"\n      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')\n      if type_param and type_param.value:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ef75b43b02a8ce2de6641427565751cdc2e912c4886486d26c58a7b6d3994ee2"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 7,
                  "charOffset": 9250,
                  "charLength": 10,
                  "snippet": {
                    "text": "type_param"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 9158,
                  "charLength": 216,
                  "snippet": {
                    "text": "      # instead of \"10\")\n      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')\n      if type_param and type_param.value:\n        type_param.value = '*'"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1a68f92c426dcab1b359dcd3163c3b1c9b86608faec121598122a1f6ef1c1b75"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 7,
                  "charOffset": 9308,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 223,
                  "startColumn": 1,
                  "charOffset": 9183,
                  "charLength": 262,
                  "snippet": {
                    "text": "      time.value = re.sub(r'^\\d+\\.(\\d+)?$', '*', time.value)\n      type_param = element.getAttributeNode('type_param')\n      if type_param and type_param.value:\n        type_param.value = '*'\n    elif element.tagName == 'failure' or element.tagName == 'skipped':"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c22a71e6055851ee732f57c407eb32e344f3ff73d6f027928444459967bb3b5c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 7,
                  "charOffset": 9452,
                  "charLength": 15,
                  "snippet": {
                    "text": "source_line_pat"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 1,
                  "charOffset": 9344,
                  "charLength": 268,
                  "snippet": {
                    "text": "        type_param.value = '*'\n    elif element.tagName == 'failure' or element.tagName == 'skipped':\n      source_line_pat = r'^.*[/\\\\](.*:)\\d+\\n'\n      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cfe5ae9de018d5b5d5fd499b2aab278c7658617886555721d1f3aa8f2cb33763"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 7,
                  "charOffset": 9498,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Replaces the source line information with a normalized form."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 227,
                  "startColumn": 1,
                  "charOffset": 9375,
                  "charLength": 308,
                  "snippet": {
                    "text": "    elif element.tagName == 'failure' or element.tagName == 'skipped':\n      source_line_pat = r'^.*[/\\\\](.*:)\\d+\\n'\n      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4ccdfd01e82c111b161683d4b510bb2ee61e215dfbc1b3d81ff96b4363b6a7c1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 7,
                  "charOffset": 9567,
                  "charLength": 7,
                  "snippet": {
                    "text": "message"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 9446,
                  "charLength": 276,
                  "snippet": {
                    "text": "      source_line_pat = r'^.*[/\\\\](.*:)\\d+\\n'\n      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)\n      for child in element.childNodes:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "de235bf1adf6d5a6ca52ea3c53471b86ebdd298b648ddd7776f492855a6a8b4f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 7,
                  "charOffset": 9619,
                  "charLength": 7,
                  "snippet": {
                    "text": "message"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 229,
                  "startColumn": 1,
                  "charOffset": 9492,
                  "charLength": 284,
                  "snippet": {
                    "text": "      # Replaces the source line information with a normalized form.\n      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)\n      for child in element.childNodes:\n        if child.nodeType == Node.CDATA_SECTION_NODE:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "30c57bf707f1993ffffc7a5b0e3d91fb38129ca22019fb8736509fcec3836787"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 7,
                  "charOffset": 9690,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 230,
                  "startColumn": 1,
                  "charOffset": 9561,
                  "charLength": 288,
                  "snippet": {
                    "text": "      message = element.getAttributeNode('message')\n      message.value = re.sub(source_line_pat, '\\\\1*\\n', message.value)\n      for child in element.childNodes:\n        if child.nodeType == Node.CDATA_SECTION_NODE:\n          # Replaces the source line information with a normalized form."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "00226f5bfe4f9aa67e831a57b82c87cdc7add58b8b7e6309d3d20dadeb845d0b"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 11,
                  "charOffset": 9787,
                  "charLength": 62,
                  "snippet": {
                    "text": "# Replaces the source line information with a normalized form."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 9684,
                  "charLength": 278,
                  "snippet": {
                    "text": "      for child in element.childNodes:\n        if child.nodeType == Node.CDATA_SECTION_NODE:\n          # Replaces the source line information with a normalized form.\n          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace."
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f2e6388fe3d1fef4e43cc2dd0ce6efc96d698f02c3677045b752df46e9380c12"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 11,
                  "charOffset": 9860,
                  "charLength": 5,
                  "snippet": {
                    "text": "cdata"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 233,
                  "startColumn": 1,
                  "charOffset": 9723,
                  "charLength": 275,
                  "snippet": {
                    "text": "        if child.nodeType == Node.CDATA_SECTION_NODE:\n          # Replaces the source line information with a normalized form.\n          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace.\n          child.nodeValue = re.sub("
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f00a9a62e7efd2148793512d5a2669427685bd9ad4bfcc581ebc96234efe5990"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E114 indentation is not a multiple of 4 (comment)",
            "markdown": "PEP 8: E114 indentation is not a multiple of 4 (comment)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 11,
                  "charOffset": 9929,
                  "charLength": 33,
                  "snippet": {
                    "text": "# Removes the actual stack trace."
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 9777,
                  "charLength": 286,
                  "snippet": {
                    "text": "          # Replaces the source line information with a normalized form.\n          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace.\n          child.nodeValue = re.sub(\n              r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', cdata"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6c8a40c8a8a96531053fec06f6d35add213f2ec92fae6c217f8c5751ad172527"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 11,
                  "charOffset": 9973,
                  "charLength": 5,
                  "snippet": {
                    "text": "child"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 235,
                  "startColumn": 1,
                  "charOffset": 9850,
                  "charLength": 225,
                  "snippet": {
                    "text": "          cdata = re.sub(source_line_pat, '\\\\1*\\n', child.nodeValue)\n          # Removes the actual stack trace.\n          child.nodeValue = re.sub(\n              r'Stack trace:\\n(.|\\n)*', 'Stack trace:\\n*', cdata\n          )"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "0c965568527b41441cbfd371142bc5926253f3615c1d31739eb01bb00f9d7fc4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyPep8Inspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "PEP 8: E111 indentation is not a multiple of 4",
            "markdown": "PEP 8: E111 indentation is not a multiple of 4"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_xml_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 7,
                  "charOffset": 10119,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 239,
                  "startColumn": 1,
                  "charOffset": 10064,
                  "charLength": 128,
                  "snippet": {
                    "text": "          )\n    for child in element.childNodes:\n      if child.nodeType == Node.ELEMENT_NODE:\n        self.NormalizeXml(child)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c700846dc890a2fb819b5323deb1817e6ddfd71cc530579a7baa4be555813201"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'str' instead",
            "markdown": "Expected type 'bytes' (matched generic type 'AnyStr'), got 'str' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 23,
                  "charOffset": 6148,
                  "charLength": 6,
                  "snippet": {
                    "text": "output"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 6017,
                  "charLength": 237,
                  "snippet": {
                    "text": "    (output, _) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'wb')\n    golden_file.write(output)\n    golden_file.close()\n    # Suppress the error \"googletest was imported but a call to its main()"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "04c1ca51d30dd8f638b7ffdc6fb83ffd2200c956fd2787230b1091791d8cb3b4"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 35,
                  "charOffset": 13559,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 401,
                  "startColumn": 1,
                  "charOffset": 13452,
                  "charLength": 263,
                  "snippet": {
                    "text": "    \"\"\"Tests the behavior without the filter, with sharding enabled.\"\"\"\n\n    self.RunAndVerifyWithSharding(None, 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d0e4d22497733c449a832ee4bc118076d3eb61cc27b0672a7171ba3988acf710"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 35,
                  "charOffset": 13616,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 402,
                  "startColumn": 1,
                  "charOffset": 13524,
                  "charLength": 264,
                  "snippet": {
                    "text": "\n    self.RunAndVerifyWithSharding(None, 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "57268884d3941f434fd5f393e63bf6e394b7db089bfd0c5c84e1e7fa61ceabb5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 35,
                  "charOffset": 13673,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 13525,
                  "charLength": 340,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding(None, 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f52f19eb4662ed5a6c532ce5d1dece54319c3323207da797c7032e4ad40c0ba5"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 35,
                  "charOffset": 13750,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 404,
                  "startColumn": 1,
                  "charOffset": 13582,
                  "charLength": 284,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding(None, 2, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8aef36f5ca231fa0c804c95106c178f25a9d0896401021796e2bdee23ccc446e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expected type '{__ne__}', got 'None' instead",
            "markdown": "Expected type '{__ne__}', got 'None' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/googletest-filter-unittest.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 35,
                  "charOffset": 13823,
                  "charLength": 4,
                  "snippet": {
                    "text": "None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 405,
                  "startColumn": 1,
                  "charOffset": 13639,
                  "charLength": 256,
                  "snippet": {
                    "text": "    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS), ACTIVE_TESTS)\n    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) + 1, ACTIVE_TESTS)\n\n  def testEmptyFilter(self):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4a4afe5b03dc22880ffd94fcaaffd3c06858aaf3f6ec1304ccbc5a936b0a0d41"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeCheckerInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unexpected type(s): (None, bool) Possible type(s): (str | bytes | PathLike[str] | PathLike[bytes], bool) (str | bytes | PathLike[str] | PathLike[bytes], bool)",
            "markdown": "Unexpected type(s): (None, bool) Possible type(s): (str \\| bytes \\| PathLike\\[str\\] \\| PathLike\\[bytes\\], bool) (str \\| bytes \\| PathLike\\[str\\] \\| PathLike\\[bytes\\], bool)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/googletest/googletest/test/gtest_test_utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 18,
                  "charOffset": 4226,
                  "charLength": 31,
                  "snippet": {
                    "text": "(_temp_dir, ignore_errors=True)"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4171,
                  "charLength": 119,
                  "snippet": {
                    "text": "def _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\n\natexit.register(_RemoveTempDir)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9e20d59cdbc0313975f808134858795c5ab39ff2f27bb825881cb66a4f31879c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "Python"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2023-05-29",
        "guid": "c6b46741-54d3-420c-9d44-7de499a72cd6",
        "properties": {
          "jobUrl": "https://github.com/LizardByte/Sunshine/actions/runs/5107495213"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googlemock'",
              "markdown": "Unresolved reference 'googlemock'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 46,
                    "startColumn": 6,
                    "charOffset": 1928,
                    "charLength": 10,
                    "snippet": {
                      "text": "googlemock"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 44,
                    "startColumn": 1,
                    "charOffset": 1902,
                    "charLength": 67,
                    "snippet": {
                      "text": "import re\nimport sys\nfrom googlemock.test import gmock_test_utils\n\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "1642a49b9466a5353355ec3bffb5d17a243595346d55bddd35795ff721a06a93"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gmock_test_utils'",
              "markdown": "Unresolved reference 'gmock_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 46,
                    "startColumn": 29,
                    "charOffset": 1951,
                    "charLength": 16,
                    "snippet": {
                      "text": "gmock_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 44,
                    "startColumn": 1,
                    "charOffset": 1902,
                    "charLength": 67,
                    "snippet": {
                      "text": "import re\nimport sys\nfrom googlemock.test import gmock_test_utils\n\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "f5127e596049881c6b9200eb92d1b0258b4d9f41cca2dbcf86d0a9a51ce9bb22"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Cannot find reference '_exit' in '__init__.pyi'",
              "markdown": "Cannot find reference '_exit' in '__init__.pyi'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_output_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 188,
                    "startColumn": 8,
                    "charOffset": 6289,
                    "charLength": 5,
                    "snippet": {
                      "text": "_exit"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 186,
                    "startColumn": 1,
                    "charOffset": 6180,
                    "charLength": 153,
                    "snippet": {
                      "text": "    # Suppress the error \"googletest was imported but a call to its main()\n    # was never detected.\"\n    os._exit(0)\n  else:\n    gmock_test_utils.Main()"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b18f7c551f89588f8c3a3b4889cc957f6b63653b9b6937ab12081db6dab5a330"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googlemock'",
              "markdown": "Unresolved reference 'googlemock'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 34,
                    "startColumn": 6,
                    "charOffset": 1626,
                    "charLength": 10,
                    "snippet": {
                      "text": "googlemock"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 32,
                    "startColumn": 1,
                    "charOffset": 1553,
                    "charLength": 187,
                    "snippet": {
                      "text": "\"\"\"Tests that leaked mock objects can be caught be Google Mock.\"\"\"\n\nfrom googlemock.test import gmock_test_utils\n\nPROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_leak_test_')"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "76edbf756be8c492561d8bc73b19dcd7e88c607d4168576ee1edaa96dbae447c"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gmock_test_utils'",
              "markdown": "Unresolved reference 'gmock_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_leak_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 34,
                    "startColumn": 29,
                    "charOffset": 1649,
                    "charLength": 16,
                    "snippet": {
                      "text": "gmock_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 32,
                    "startColumn": 1,
                    "charOffset": 1553,
                    "charLength": 187,
                    "snippet": {
                      "text": "\"\"\"Tests that leaked mock objects can be caught be Google Mock.\"\"\"\n\nfrom googlemock.test import gmock_test_utils\n\nPROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_leak_test_')"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "fa895872285d8f5af9f982eb28e373f0dd5f713ba502fd212f20568e827b35c8"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 35,
                    "startColumn": 6,
                    "charOffset": 1630,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 33,
                    "startColumn": 1,
                    "charOffset": 1600,
                    "charLength": 71,
                    "snippet": {
                      "text": "\n# pylint: disable=C6204\nfrom googletest.test import gtest_test_utils\n\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "7dbb8a9e0d048e126fecc360c782cc6a252b91a7a4a17c9500b0a36fdf91f14a"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_test_utils'",
              "markdown": "Unresolved reference 'gtest_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googlemock/test/gmock_test_utils.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 35,
                    "startColumn": 29,
                    "charOffset": 1653,
                    "charLength": 16,
                    "snippet": {
                      "text": "gtest_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 33,
                    "startColumn": 1,
                    "charOffset": 1600,
                    "charLength": 71,
                    "snippet": {
                      "text": "\n# pylint: disable=C6204\nfrom googletest.test import gtest_test_utils\n\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "3cf649a340a9b1b136bb3665988a0a4ce7e766745fb03beb57e60a05a08eb476"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 35,
                    "startColumn": 6,
                    "charOffset": 1629,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 33,
                    "startColumn": 1,
                    "charOffset": 1602,
                    "charLength": 117,
                    "snippet": {
                      "text": "import json\nimport os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d40cb542533e81c989af2503a74dfbf3916b89e0508fd17c9c2947d5317707b7"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_json_test_utils'",
              "markdown": "Unresolved reference 'gtest_json_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 35,
                    "startColumn": 29,
                    "charOffset": 1652,
                    "charLength": 21,
                    "snippet": {
                      "text": "gtest_json_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 33,
                    "startColumn": 1,
                    "charOffset": 1602,
                    "charLength": 117,
                    "snippet": {
                      "text": "import json\nimport os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b23cb2fb188f76dc91c64b059a8013b83fdd4155bf7fc68f1046cde1401140d4"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 36,
                    "startColumn": 6,
                    "charOffset": 1679,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 34,
                    "startColumn": 1,
                    "charOffset": 1614,
                    "charLength": 143,
                    "snippet": {
                      "text": "import os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_OUTPUT_SUBDIR = 'json_outfiles'"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "38c14e9e9ab2be47988eb57f0abe4ca6769fa51a4d08acbc69fadccdf5541d1d"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_test_utils'",
              "markdown": "Unresolved reference 'gtest_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-outfiles-test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 36,
                    "startColumn": 29,
                    "charOffset": 1702,
                    "charLength": 16,
                    "snippet": {
                      "text": "gtest_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 34,
                    "startColumn": 1,
                    "charOffset": 1614,
                    "charLength": 143,
                    "snippet": {
                      "text": "import os\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_OUTPUT_SUBDIR = 'json_outfiles'"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "5f15fea528a986de3c2b886f8a9d9bbf2a6538708423fd88379d8d815ae5d877"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 43,
                    "startColumn": 6,
                    "charOffset": 1817,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 41,
                    "startColumn": 1,
                    "charOffset": 1791,
                    "charLength": 67,
                    "snippet": {
                      "text": "import re\nimport sys\nfrom googletest.test import gtest_test_utils\n\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "f5d5bae5475cd3de3cb08d3e3c21430ee97cde3f581f4a941b13a1f8ba8ac763"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_test_utils'",
              "markdown": "Unresolved reference 'gtest_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_help_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 43,
                    "startColumn": 29,
                    "charOffset": 1840,
                    "charLength": 16,
                    "snippet": {
                      "text": "gtest_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 41,
                    "startColumn": 1,
                    "charOffset": 1791,
                    "charLength": 67,
                    "snippet": {
                      "text": "import re\nimport sys\nfrom googletest.test import gtest_test_utils\n\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b1afcbb39a399bc10d5d790b09e459d0be2c633eb589ceb781bc5581f5e06a0f"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 40,
                    "startColumn": 6,
                    "charOffset": 1680,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 38,
                    "startColumn": 1,
                    "charOffset": 1663,
                    "charLength": 107,
                    "snippet": {
                      "text": "import sys\n\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "93ece206fbf2a5b75ca5145ee597aa17630bddb5ad70ea81adedec4366283bbf"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_json_test_utils'",
              "markdown": "Unresolved reference 'gtest_json_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 40,
                    "startColumn": 29,
                    "charOffset": 1703,
                    "charLength": 21,
                    "snippet": {
                      "text": "gtest_json_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 38,
                    "startColumn": 1,
                    "charOffset": 1663,
                    "charLength": 107,
                    "snippet": {
                      "text": "import sys\n\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "1517d2edbcd233e2a17996485931dbceb4de465cc2f15a278f9b3e3192a63719"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 41,
                    "startColumn": 6,
                    "charOffset": 1730,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 39,
                    "startColumn": 1,
                    "charOffset": 1674,
                    "charLength": 133,
                    "snippet": {
                      "text": "\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_FILTER_FLAG = '--gtest_filter'"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "29f2c8372de132906c6f1d192b79567f6ed19d58ffcaae2cde45ce7ffcb07274"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_test_utils'",
              "markdown": "Unresolved reference 'gtest_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/googletest-json-output-unittest.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 41,
                    "startColumn": 29,
                    "charOffset": 1753,
                    "charLength": 16,
                    "snippet": {
                      "text": "gtest_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 39,
                    "startColumn": 1,
                    "charOffset": 1674,
                    "charLength": 133,
                    "snippet": {
                      "text": "\nfrom googletest.test import gtest_json_test_utils\nfrom googletest.test import gtest_test_utils\n\nGTEST_FILTER_FLAG = '--gtest_filter'"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "e8a1e0ea3c83fca2fc1fb8afc07a629c4c4ff89d32e5f9454cf94df1cc26872e"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unused import statement 'Node'",
              "markdown": "Unused import statement `Node`"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 35,
                    "startColumn": 30,
                    "charOffset": 1642,
                    "charLength": 4,
                    "snippet": {
                      "text": "Node"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 33,
                    "startColumn": 1,
                    "charOffset": 1602,
                    "charLength": 138,
                    "snippet": {
                      "text": "\nimport os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "cbd8c1cc1dbd77002a1c4c4ecb2b169ca199388c69049083afd0e6ed31d8d16d"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 36,
                    "startColumn": 6,
                    "charOffset": 1652,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 34,
                    "startColumn": 1,
                    "charOffset": 1603,
                    "charLength": 138,
                    "snippet": {
                      "text": "import os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "6a1e823f819007bc4f594747afb458433a37aa98251b74841afa87b5842322ee"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_test_utils'",
              "markdown": "Unresolved reference 'gtest_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 36,
                    "startColumn": 29,
                    "charOffset": 1675,
                    "charLength": 16,
                    "snippet": {
                      "text": "gtest_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 34,
                    "startColumn": 1,
                    "charOffset": 1603,
                    "charLength": 138,
                    "snippet": {
                      "text": "import os\nfrom xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "9944b9a1ffcd8278337d3c0b0d96397bd4cab18f0eeb7780d82283c2575249d2"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_xml_outfiles_test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 37,
                    "startColumn": 6,
                    "charOffset": 1697,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 35,
                    "startColumn": 1,
                    "charOffset": 1613,
                    "charLength": 165,
                    "snippet": {
                      "text": "from xml.dom import minidom, Node\nfrom googletest.test import gtest_test_utils\nfrom googletest.test import gtest_xml_test_utils\n\nGTEST_OUTPUT_SUBDIR = \"xml_outfiles\""
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "9c8473c1dbcbea4e58a8c20e6627ad6a26af13ac25dcf006cc857d263aa10678"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'googletest'",
              "markdown": "Unresolved reference 'googletest'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 43,
                    "startColumn": 6,
                    "charOffset": 2002,
                    "charLength": 10,
                    "snippet": {
                      "text": "googletest"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 41,
                    "startColumn": 1,
                    "charOffset": 1977,
                    "charLength": 110,
                    "snippet": {
                      "text": "import os\nimport re\nfrom googletest.test import gtest_test_utils\n\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "cc8750a06683b89114ebce5c8bd54c8732b7f62feb199d7b3834e81cf5438183"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'gtest_test_utils'",
              "markdown": "Unresolved reference 'gtest_test_utils'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "lib/googletest/googletest/test/gtest_list_output_unittest.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 43,
                    "startColumn": 29,
                    "charOffset": 2025,
                    "charLength": 16,
                    "snippet": {
                      "text": "gtest_test_utils"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 41,
                    "startColumn": 1,
                    "charOffset": 1977,
                    "charLength": 110,
                    "snippet": {
                      "text": "import os\nimport re\nfrom googletest.test import gtest_test_utils\n\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "8d064ef142442aae0e91e1ae27c1cd9379c2c898f28b984759c0ef2e61efa681"
            },
            "properties": {
              "ideaSeverity": "ERROR",
              "qodanaSeverity": "Critical"
            }
          }
        ],
        "configProfile": "recommended",
        "deviceId": "200820300000000-5b92-5f5e-260f-08d3c7c7759f"
      }
    }
  ]
}