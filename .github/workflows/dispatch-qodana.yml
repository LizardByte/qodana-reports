---
# Receive dispatch events from LizardByte repositories that test with Qodana. This workflow will publish
# artifacts to the `gh-pages` branch.

name: Qodana Publish

on:
  repository_dispatch:
    types: [qodana-publish]

concurrency:
  # ensure only one workflow runs for a given repo and ref, cancel in progress to only run the latest
  group: ${{ github.event.client_payload.repo }}-${{ github.event.client_payload.ref }}
  cancel-in-progress: true

jobs:
  qodana-upload:
    runs-on: ubuntu-latest
    name: Qodana Upload
    steps:
      - name: Queue
        # we only want to run one add job at a time, so queue them
        uses: ahmadnassri/action-workflow-queue@v1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout qodana-reports/gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
          persist-credentials: false  # otherwise, the token used is the GITHUB_TOKEN, instead of the personal token
          fetch-depth: 0  # otherwise, will fail to push refs to dest repo

      - name: Download artifacts from triggering repo
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GH_BOT_TOKEN }}
          repo: ${{ github.event.client_payload.repo }}
          run_id: ${{ github.event.client_payload.run_id }}
          path: ${{ runner.temp }}/artifacts

      - name: Parse artifacts
        run: |
          # constants
          repo_name=${{ github.event.client_payload.repo_name }}
          destination=${{ github.event.client_payload.destination }}

          # for each directory in artifacts directory, not recursive
          for dir in ${{ runner.temp }}/artifacts/*; do
            # get the language from the directory name, e.g. qodana-language
            language=${dir##*-}

            # check if language is accepted
            languages=("default" "dotnet" "go" "java" "js" "php" "python")
            if [[ ! " ${languages[@]} " =~ " ${language} " ]]
            then
              echo "Language ${language} is not supported"
              exit 1
            fi

            # create the output directory
            output_dir=./gh-pages/${repo_name}/${destination}/${language}
            mkdir -p $output_dir

            # empty contents
            rm -f -r $output_dir/*

            # copy qodana report
            cp -f -r $dir/results/report/. $output_dir/
          done

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r ./requirements.txt

      - name: Build index
        run: |
          # generate index.html
          python ./build_index.py

      - name: Deploy to gh-pages
        id: deploy
        uses: actions-js/push@v1.4
        with:
          github_token: ${{ secrets.GH_BOT_TOKEN }}
          author_email: ${{ secrets.GH_BOT_EMAIL }}
          author_name: ${{ secrets.GH_BOT_NAME }}
          directory: gh-pages
          branch: gh-pages
          force: false
          message: >-
            update ${{ github.event.client_payload.repo_name }}/${{ github.event.client_payload.destination }}

      - name: Setup final notification client payload
        id: client_payload
        run: |
          # check if destination is integer
          if [[ ${{ github.event.client_payload.destination }} =~ ^[0-9]+$ ]]; then
            # destination is integer, so it's a PR

            if [[ ${{ github.event.client_payload.status }} == 'success' ]]; then
              status=":white_check_mark: **Qodana success** :white_check_mark:"
            else
              status=":x: **Qodana failed** :x:"
            fi

            message=$(cat <<- EOF
              ${status}
              Results: ${{ github.event.client_payload.results_markdown }}
          EOF
          )

            # escape json control characters
            message=$(jq -n --arg message "$message" '$message' | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')

            client_payload=$(echo '{
              "issue_message": "'"${message}"'",
              "issue_message_id": "'"qodana"'",
              "issue_number": "'"${{ github.event.client_payload.destination }}"'"
            }' | jq -c .)

            echo $client_payload
            echo $client_payload | jq .
            echo "client_payload=$client_payload" >> $GITHUB_OUTPUT
          fi

      - name: Repository Dispatch
        if: ${{ steps.client_payload.outputs.client_payload != '' }}
        uses: peter-evans/repository-dispatch@v2.1.1
        with:
          token: ${{ secrets.GH_BOT_TOKEN }}
          repository: ${{ github.repository_owner }}/.github
          event-type: issue-pr-comment
          client-payload: ${{ steps.client_payload.outputs.client_payload }}
